5f90b21db9af23651b5f2fb61ed61f77
"use strict";

// モック
_getJestObj().mock('../../js/services/progressiveOverloadService.js', function () {
  return {
    ProgressiveOverloadService: jest.fn().mockImplementation(function () {
      return {
        analyzeProgressiveOverload: jest.fn().mockResolvedValue({
          totalWorkouts: 10,
          overallMetrics: {
            totalVolume: 5000,
            averageVolumePerWorkout: 500
          },
          consistencyScore: 85,
          muscleGroupProgress: {
            chest: {
              totalSessions: 5,
              totalVolume: 2500,
              averageVolumePerSession: 500
            }
          }
        })
      };
    })
  };
});
_getJestObj().mock('../../js/services/workoutDataService.js', function () {
  return {
    workoutDataService: {
      getWorkoutHistory: jest.fn().mockResolvedValue([]),
      getMuscleGroupStats: jest.fn().mockResolvedValue({})
    }
  };
});
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    safeGetElement: jest.fn(function (id) {
      var mockElement = {
        id: id,
        innerHTML: '',
        appendChild: jest.fn(),
        removeChild: jest.fn()
      };
      return mockElement;
    }),
    showNotification: jest.fn()
  };
});
_getJestObj().mock('../../js/utils/errorHandler.js', function () {
  return {
    handleError: jest.fn()
  };
});
var _progressPage = require("../../js/pages/progressPage.js");
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
} // ProgressPage.test.js - ProgressPageクラスのテスト
describe('ProgressPage', function () {
  var progressPage;
  var mockContainer;
  beforeEach(function () {
    // DOM要素のモック
    mockContainer = document.createElement('div');
    mockContainer.id = 'main-content';
    document.body.appendChild(mockContainer);

    // ProgressPageのインスタンスを作成
    progressPage = new _progressPage.ProgressPage();
  });
  afterEach(function () {
    document.body.removeChild(mockContainer);
    jest.clearAllMocks();
  });
  describe('初期化', function () {
    test('should initialize successfully', function () {
      expect(progressPage).toBeDefined();
      expect(progressPage.pageName).toBe('ProgressPage');
    });
    test('should have required properties', function () {
      expect(progressPage.workoutData).toEqual([]);
      expect(progressPage.progressiveOverloadData).toBeNull();
    });
  });
  describe('サンプルデータ生成', function () {
    test('should generate sample workout data', function () {
      var sampleData = progressPage.generateSampleWorkoutData();
      expect(Array.isArray(sampleData)).toBe(true);
      expect(sampleData.length).toBeGreaterThan(0);

      // サンプルデータの構造を確認
      var firstWorkout = sampleData[0];
      expect(firstWorkout).toHaveProperty('id');
      expect(firstWorkout).toHaveProperty('date');
      expect(firstWorkout).toHaveProperty('muscle_groups');
      expect(firstWorkout).toHaveProperty('exercises');
      expect(firstWorkout).toHaveProperty('duration');
    });
    test('should generate realistic workout parameters', function () {
      var sampleData = progressPage.generateSampleWorkoutData();
      sampleData.forEach(function (workout) {
        if (workout.exercises && workout.exercises.length > 0) {
          workout.exercises.forEach(function (exercise) {
            expect(exercise.sets).toBeLessThanOrEqual(3); // セット数は3以下
            expect(exercise.reps).toBeLessThanOrEqual(15); // 回数は15以下
            expect(exercise.weight).toBeLessThanOrEqual(100); // 重量は100以下
          });
        }
      });
    });
  });
  describe('プログレッシブ・オーバーロード分析', function () {
    test('should load progressive overload data', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            _context.n = 1;
            return progressPage.loadProgressiveOverloadData();
          case 1:
            expect(progressPage.progressiveOverloadData).toBeDefined();
            expect(progressPage.progressiveOverloadData.totalWorkouts).toBe(10);
            expect(progressPage.progressiveOverloadData.overallMetrics.totalVolume).toBe(5000);
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
    test('should handle progressive overload data loading errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var _require, ProgressiveOverloadService, consoleSpy;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            _require = require('../../js/services/progressiveOverloadService.js'), ProgressiveOverloadService = _require.ProgressiveOverloadService;
            ProgressiveOverloadService.mockImplementation(function () {
              return {
                analyzeProgressiveOverload: jest.fn().mockRejectedValue(new Error('Test error'))
              };
            });
            consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            _context2.n = 1;
            return progressPage.loadProgressiveOverloadData();
          case 1:
            expect(consoleSpy).toHaveBeenCalled();
            consoleSpy.mockRestore();
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
  });
  describe('エクササイズ分析', function () {
    test('should calculate exercise stats correctly', function () {
      var mockExerciseData = [{
        date: '2024-01-01',
        exercises: [{
          name: 'ベンチプレス',
          weight: 60,
          reps: 10,
          sets: 3
        }, {
          name: 'プッシュアップ',
          weight: 0,
          reps: 15,
          sets: 2
        }]
      }, {
        date: '2024-01-02',
        exercises: [{
          name: 'ベンチプレス',
          weight: 65,
          reps: 10,
          sets: 3
        }]
      }];
      var stats = progressPage.calculateExerciseStats(mockExerciseData, 'ベンチプレス');
      expect(stats.totalSessions).toBe(2);
      expect(stats.maxWeight).toBe(65);
      expect(stats.avgWeight).toBe(62);
      expect(stats.totalVolume).toBe(1800 + 1950); // (60*10*3) + (65*10*3)
      expect(stats.progressRate).toBeGreaterThan(0);
    });
    test('should handle empty exercise data', function () {
      var stats = progressPage.calculateExerciseStats([], 'ベンチプレス');
      expect(stats.totalSessions).toBe(0);
      expect(stats.maxWeight).toBe(0);
      expect(stats.avgWeight).toBe(0);
      expect(stats.totalVolume).toBe(0);
      expect(stats.progressRate).toBe(0);
    });
  });
  describe('筋肉部位分析', function () {
    test('should calculate muscle group analysis', function () {
      var mockMuscleData = [{
        date: '2024-01-01',
        muscle_groups: ['chest'],
        exercises: [{
          name: 'ベンチプレス',
          weight: 60,
          reps: 10,
          sets: 3
        }],
        duration: 45
      }, {
        date: '2024-01-02',
        muscle_groups: ['chest'],
        exercises: [{
          name: 'プッシュアップ',
          weight: 0,
          reps: 15,
          sets: 2
        }],
        duration: 30
      }];
      var analysis = progressPage.calculateMuscleGroupAnalysis(mockMuscleData);
      expect(analysis.totalSessions).toBe(2);
      expect(analysis.totalVolume).toBe(1800); // 60*10*3 + 0*15*2
      expect(analysis.averageVolumePerSession).toBe(900);
      expect(analysis.totalDuration).toBe(75);
    });
  });
  describe('レンダリング', function () {
    test('should render exercise analysis', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var mockExerciseData, container;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            mockExerciseData = [{
              date: '2024-01-01',
              exercises: [{
                name: 'ベンチプレス',
                weight: 60,
                reps: 10,
                sets: 3
              }]
            }];
            container = document.createElement('div');
            container.id = 'exercise-analysis';
            document.body.appendChild(container);
            _context3.n = 1;
            return progressPage.renderExerciseAnalysisFromService('ベンチプレス');
          case 1:
            expect(container.innerHTML).toContain('ベンチプレス');
            expect(container.innerHTML).toContain('exercise-analysis');
            document.body.removeChild(container);
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
    test('should render muscle group analysis', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var mockMuscleData, container;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            mockMuscleData = [{
              date: '2024-01-01',
              muscle_groups: ['chest'],
              exercises: [{
                name: 'ベンチプレス',
                weight: 60,
                reps: 10,
                sets: 3
              }],
              duration: 45
            }];
            container = document.createElement('div');
            container.id = 'muscle-group-analysis';
            document.body.appendChild(container);
            _context4.n = 1;
            return progressPage.renderMuscleGroupAnalysis('chest');
          case 1:
            expect(container.innerHTML).toContain('chest');
            document.body.removeChild(container);
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
  });
  describe('エラーハンドリング', function () {
    test('should handle rendering errors gracefully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var container;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            container = document.createElement('div');
            container.id = 'exercise-analysis';
            document.body.appendChild(container);

            // エラーを発生させる
            progressPage.calculateExerciseStats = jest.fn().mockImplementation(function () {
              throw new Error('Test error');
            });
            _context5.n = 1;
            return progressPage.renderExerciseAnalysisFromService('ベンチプレス');
          case 1:
            expect(container.innerHTML).toContain('エクササイズ分析の読み込みに失敗しました');
            document.body.removeChild(container);
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,