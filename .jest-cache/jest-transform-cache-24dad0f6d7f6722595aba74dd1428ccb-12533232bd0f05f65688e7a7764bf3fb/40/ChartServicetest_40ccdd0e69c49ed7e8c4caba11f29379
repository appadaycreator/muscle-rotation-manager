60a2e9f720d42b5a6830e00df922f239
"use strict";

// モック設定
_getJestObj().mock('../../js/utils/errorHandler.js', function () {
  return {
    handleError: jest.fn()
  };
});
var _chartService = require("../../js/services/chartService.js");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
} // tests/unit/ChartService.test.js - ChartServiceのテスト
// Chart.jsのモック
var mockChart = {
  destroy: jest.fn(),
  resize: jest.fn(),
  update: jest.fn(),
  data: {},
  options: {}
};

// Chart.jsのコンストラクタをモック
global.Chart = jest.fn(function () {
  return mockChart;
});
describe('ChartService', function () {
  var service;
  var mockCanvas;
  beforeEach(function () {
    // モックキャンバス要素
    mockCanvas = {
      getContext: jest.fn(function () {
        return {
          fillRect: jest.fn(),
          clearRect: jest.fn()
        };
      })
    };

    // document.getElementByIdのモック
    global.document = {
      getElementById: jest.fn(function () {
        return mockCanvas;
      })
    };

    // getElementByIdをモック関数として設定
    global.document.getElementById = jest.fn(function () {
      return mockCanvas;
    });
    service = _chartService.chartService;
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  describe('constructor', function () {
    it('should initialize with default values', function () {
      expect(service.charts).toBeInstanceOf(Map);
      expect(service.defaultColors).toEqual({
        primary: '#3B82F6',
        secondary: '#10B981',
        accent: '#F59E0B',
        danger: '#EF4444',
        success: '#22C55E',
        warning: '#F97316'
      });
    });
  });
  describe('destroyChart', function () {
    it('should destroy existing chart', function () {
      var chartId = 'test-chart';
      service.charts.set(chartId, mockChart);
      service.destroyChart(chartId);
      expect(mockChart.destroy).toHaveBeenCalled();
      expect(service.charts.has(chartId)).toBe(false);
    });
    it('should handle non-existent chart', function () {
      service.destroyChart('non-existent');
      expect(mockChart.destroy).not.toHaveBeenCalled();
    });
  });
  describe('createOneRMChart', function () {
    it('should create 1RM chart successfully', function () {
      var canvasId = 'one-rm-chart';
      var data = [{
        workout_date: '2024-01-01',
        one_rm: 100
      }, {
        workout_date: '2024-01-02',
        one_rm: 105
      }];
      var result = service.createOneRMChart(canvasId, data);
      expect(global.document.getElementById).toHaveBeenCalledWith(canvasId);
      expect(global.Chart).toHaveBeenCalled();
      expect(service.charts.has(canvasId)).toBe(true);
      expect(result).toBeDefined();
    });
    it('should handle missing canvas element', function () {
      global.document.getElementById.mockReturnValue(null);
      var result = service.createOneRMChart('missing-canvas', []);
      expect(result).toBeNull();
    });
  });
  describe('createProgressChart', function () {
    it('should create progress chart successfully', function () {
      var canvasId = 'progress-chart';
      var data = [{
        date: '2024-01-01',
        value: 100
      }, {
        date: '2024-01-02',
        value: 105
      }];
      var result = service.createProgressChart(canvasId, data);
      expect(global.document.getElementById).toHaveBeenCalledWith(canvasId);
      expect(global.Chart).toHaveBeenCalled();
      expect(service.charts.has(canvasId)).toBe(true);
      expect(result).toBeDefined();
    });
  });
  describe('destroyAllCharts', function () {
    it('should destroy all charts', function () {
      var chart1 = {
        destroy: jest.fn()
      };
      var chart2 = {
        destroy: jest.fn()
      };

      // 既存のチャートをクリア
      service.charts.clear();

      // チャートを直接追加
      service.charts.set('chart1', chart1);
      service.charts.set('chart2', chart2);

      // チャートが追加されたことを確認
      expect(service.charts.size).toBe(2);
      service.destroyAllCharts();
      expect(chart1.destroy).toHaveBeenCalled();
      expect(chart2.destroy).toHaveBeenCalled();
      expect(service.charts.size).toBe(0);
    });
  });
  describe('updateChart', function () {
    it('should update existing chart', function () {
      var chartId = 'test-chart';
      var newData = {
        labels: ['A', 'B'],
        datasets: []
      };
      service.charts.set(chartId, mockChart);
      service.updateChart(chartId, newData);
      expect(mockChart.data).toBe(newData);
      expect(mockChart.update).toHaveBeenCalled();
    });
  });
  describe('getChart', function () {
    it('should return existing chart', function () {
      var chartId = 'test-chart';
      service.charts.set(chartId, mockChart);
      var result = service.getChart(chartId);
      expect(result).toBeDefined();
    });
    it('should return null for non-existent chart', function () {
      var result = service.getChart('non-existent');
      expect(result).toBeNull();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,