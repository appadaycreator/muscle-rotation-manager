c923d63724048de5a35126ce3de9bdc9
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.progressiveOverloadService = exports.ProgressiveOverloadService = void 0;
var _workoutDataService = require("./workoutDataService.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // js/services/progressiveOverloadService.js - プログレッシブ・オーバーロード分析サービス
/**
 * プログレッシブ・オーバーロード分析サービス
 * トレーニングの進歩を定量的に分析し、最適化提案を行う
 */
var ProgressiveOverloadService = exports.ProgressiveOverloadService = /*#__PURE__*/function () {
  function ProgressiveOverloadService() {
    _classCallCheck(this, ProgressiveOverloadService);
    this.analysisCache = new Map();
    this.cacheExpiry = 5 * 60 * 1000; // 5分間キャッシュ
  }

  /**
   * エクササイズ別の進歩分析を取得
   * @param {string} exerciseName - エクササイズ名
   * @param {number} days - 分析期間（日数）
   * @returns {Promise<Object>} 進歩分析データ
   */
  return _createClass(ProgressiveOverloadService, [{
    key: "getExerciseProgress",
    value: (function () {
      var _getExerciseProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(exerciseName) {
        var days,
          cacheKey,
          cached,
          workouts,
          exerciseData,
          analysis,
          _args = arguments,
          _t;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.p = _context.n) {
            case 0:
              days = _args.length > 1 && _args[1] !== undefined ? _args[1] : 90;
              cacheKey = "exercise_".concat(exerciseName, "_").concat(days);
              cached = this.getCachedAnalysis(cacheKey);
              if (!cached) {
                _context.n = 1;
                break;
              }
              return _context.a(2, cached);
            case 1:
              _context.p = 1;
              _context.n = 2;
              return _workoutDataService.workoutDataService.loadWorkouts({
                limit: 1000
              });
            case 2:
              workouts = _context.v;
              exerciseData = this.filterExerciseData(workouts, exerciseName, days);
              analysis = {
                exerciseName: exerciseName,
                period: days,
                totalSessions: exerciseData.length,
                progressMetrics: this.calculateProgressMetrics(exerciseData),
                volumeProgression: this.calculateVolumeProgression(exerciseData),
                intensityProgression: this.calculateIntensityProgression(exerciseData),
                recommendations: this.generateRecommendations(exerciseData),
                trends: this.analyzeTrends(exerciseData),
                lastUpdated: new Date().toISOString()
              };
              this.setCachedAnalysis(cacheKey, analysis);
              return _context.a(2, analysis);
            case 3:
              _context.p = 3;
              _t = _context.v;
              console.error('Error analyzing exercise progress:', _t);
              throw _t;
            case 4:
              return _context.a(2);
          }
        }, _callee, this, [[1, 3]]);
      }));
      function getExerciseProgress(_x) {
        return _getExerciseProgress.apply(this, arguments);
      }
      return getExerciseProgress;
    }()
    /**
     * 部位別の進歩分析を取得
     * @param {string} muscleGroup - 筋肉部位
     * @param {number} days - 分析期間（日数）
     * @returns {Promise<Object>} 部位別進歩分析データ
     */
    )
  }, {
    key: "getMuscleGroupProgress",
    value: (function () {
      var _getMuscleGroupProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(muscleGroup) {
        var days,
          cacheKey,
          cached,
          workouts,
          muscleData,
          analysis,
          _args2 = arguments,
          _t2;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.p = _context2.n) {
            case 0:
              days = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 90;
              cacheKey = "muscle_".concat(muscleGroup, "_").concat(days);
              cached = this.getCachedAnalysis(cacheKey);
              if (!cached) {
                _context2.n = 1;
                break;
              }
              return _context2.a(2, cached);
            case 1:
              _context2.p = 1;
              _context2.n = 2;
              return _workoutDataService.workoutDataService.loadWorkouts({
                limit: 1000
              });
            case 2:
              workouts = _context2.v;
              muscleData = this.filterMuscleGroupData(workouts, muscleGroup, days);
              analysis = {
                muscleGroup: muscleGroup,
                period: days,
                totalSessions: muscleData.length,
                exercises: this.analyzeMuscleGroupExercises(muscleData),
                volumeProgression: this.calculateMuscleGroupVolumeProgression(muscleData),
                frequencyAnalysis: this.analyzeMuscleGroupFrequency(muscleData),
                recommendations: this.generateMuscleGroupRecommendations(muscleData),
                lastUpdated: new Date().toISOString()
              };
              this.setCachedAnalysis(cacheKey, analysis);
              return _context2.a(2, analysis);
            case 3:
              _context2.p = 3;
              _t2 = _context2.v;
              console.error('Error analyzing muscle group progress:', _t2);
              throw _t2;
            case 4:
              return _context2.a(2);
          }
        }, _callee2, this, [[1, 3]]);
      }));
      function getMuscleGroupProgress(_x2) {
        return _getMuscleGroupProgress.apply(this, arguments);
      }
      return getMuscleGroupProgress;
    }()
    /**
     * 総合的な進歩分析を取得
     * @param {number} days - 分析期間（日数）
     * @returns {Promise<Object>} 総合進歩分析データ
     */
    )
  }, {
    key: "getOverallProgress",
    value: (function () {
      var _getOverallProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
        var days,
          cacheKey,
          cached,
          workouts,
          recentWorkouts,
          analysis,
          _args3 = arguments,
          _t3,
          _t4,
          _t5,
          _t6,
          _t7,
          _t8,
          _t9,
          _t0,
          _t1;
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.p = _context3.n) {
            case 0:
              days = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : 90;
              cacheKey = "overall_".concat(days);
              cached = this.getCachedAnalysis(cacheKey);
              if (!cached) {
                _context3.n = 1;
                break;
              }
              return _context3.a(2, cached);
            case 1:
              _context3.p = 1;
              _context3.n = 2;
              return _workoutDataService.workoutDataService.loadWorkouts({
                limit: 1000
              });
            case 2:
              workouts = _context3.v;
              recentWorkouts = this.filterRecentWorkouts(workouts, days);
              _t3 = days;
              _t4 = recentWorkouts.length;
              _t5 = this.calculateOverallMetrics(recentWorkouts);
              _context3.n = 3;
              return this.calculateAllMuscleGroupProgress(recentWorkouts);
            case 3:
              _t6 = _context3.v;
              _context3.n = 4;
              return this.calculateAllExerciseProgress(recentWorkouts);
            case 4:
              _t7 = _context3.v;
              _t8 = this.calculateConsistencyScore(recentWorkouts);
              _t9 = this.generateOverallRecommendations(recentWorkouts);
              _t0 = new Date().toISOString();
              analysis = {
                period: _t3,
                totalWorkouts: _t4,
                overallMetrics: _t5,
                muscleGroupProgress: _t6,
                exerciseProgress: _t7,
                consistencyScore: _t8,
                recommendations: _t9,
                lastUpdated: _t0
              };
              this.setCachedAnalysis(cacheKey, analysis);
              return _context3.a(2, analysis);
            case 5:
              _context3.p = 5;
              _t1 = _context3.v;
              console.error('Error analyzing overall progress:', _t1);
              throw _t1;
            case 6:
              return _context3.a(2);
          }
        }, _callee3, this, [[1, 5]]);
      }));
      function getOverallProgress() {
        return _getOverallProgress.apply(this, arguments);
      }
      return getOverallProgress;
    }()
    /**
     * エクササイズデータをフィルタリング
     * @param {Array} workouts - ワークアウトデータ
     * @param {string} exerciseName - エクササイズ名
     * @param {number} days - 期間
     * @returns {Array} フィルタされたデータ
     */
    )
  }, {
    key: "filterExerciseData",
    value: function filterExerciseData(workouts, exerciseName, days) {
      var cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - days);
      return workouts.filter(function (workout) {
        var workoutDate = new Date(workout.date || workout.startTime);
        return workoutDate >= cutoffDate;
      }).map(function (workout) {
        return _objectSpread(_objectSpread({}, workout), {}, {
          exerciseData: (workout.exercises || []).filter(function (exercise) {
            return exercise.name && exercise.name.toLowerCase().includes(exerciseName.toLowerCase());
          })
        });
      }).filter(function (workout) {
        return workout.exerciseData.length > 0;
      });
    }

    /**
     * 筋肉部位データをフィルタリング
     * @param {Array} workouts - ワークアウトデータ
     * @param {string} muscleGroup - 筋肉部位
     * @param {number} days - 期間
     * @returns {Array} フィルタされたデータ
     */
  }, {
    key: "filterMuscleGroupData",
    value: function filterMuscleGroupData(workouts, muscleGroup, days) {
      var cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - days);
      return workouts.filter(function (workout) {
        var workoutDate = new Date(workout.date || workout.startTime);
        return workoutDate >= cutoffDate;
      }).filter(function (workout) {
        var muscleGroups = workout.muscle_groups || [];
        return muscleGroups.some(function (muscle) {
          return muscle.toLowerCase().includes(muscleGroup.toLowerCase());
        });
      });
    }

    /**
     * 最近のワークアウトをフィルタリング
     * @param {Array} workouts - ワークアウトデータ
     * @param {number} days - 期間
     * @returns {Array} フィルタされたデータ
     */
  }, {
    key: "filterRecentWorkouts",
    value: function filterRecentWorkouts(workouts, days) {
      var cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - days);
      return workouts.filter(function (workout) {
        var workoutDate = new Date(workout.date || workout.startTime);
        return workoutDate >= cutoffDate;
      });
    }

    /**
     * 進歩メトリクスを計算
     * @param {Array} exerciseData - エクササイズデータ
     * @returns {Object} 進歩メトリクス
     */
  }, {
    key: "calculateProgressMetrics",
    value: function calculateProgressMetrics(exerciseData) {
      if (exerciseData.length === 0) {
        return {
          volumeProgression: 0,
          intensityProgression: 0,
          consistencyScore: 0,
          averageWeight: 0,
          averageReps: 0,
          averageSets: 0
        };
      }
      var sessions = exerciseData.map(function (workout) {
        var exercise = workout.exerciseData[0];
        return {
          date: new Date(workout.date || workout.startTime),
          weight: exercise.weight || 0,
          reps: exercise.reps || 0,
          sets: exercise.sets || 0,
          volume: (exercise.weight || 0) * (exercise.reps || 0) * (exercise.sets || 0)
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
      var firstHalf = sessions.slice(0, Math.ceil(sessions.length / 2));
      var secondHalf = sessions.slice(Math.floor(sessions.length / 2));
      var firstHalfAvgVolume = this.calculateAverageVolume(firstHalf);
      var secondHalfAvgVolume = this.calculateAverageVolume(secondHalf);
      var volumeProgression = firstHalfAvgVolume > 0 ? (secondHalfAvgVolume - firstHalfAvgVolume) / firstHalfAvgVolume * 100 : 0;
      var firstHalfAvgWeight = this.calculateAverageWeight(firstHalf);
      var secondHalfAvgWeight = this.calculateAverageWeight(secondHalf);
      var intensityProgression = firstHalfAvgWeight > 0 ? (secondHalfAvgWeight - firstHalfAvgWeight) / firstHalfAvgWeight * 100 : 0;
      return {
        volumeProgression: Math.round(volumeProgression * 10) / 10,
        intensityProgression: Math.round(intensityProgression * 10) / 10,
        consistencyScore: this.calculateConsistencyScore(exerciseData),
        averageWeight: Math.round(this.calculateAverageWeight(sessions) * 10) / 10,
        averageReps: Math.round(this.calculateAverageReps(sessions) * 10) / 10,
        averageSets: Math.round(this.calculateAverageSets(sessions) * 10) / 10,
        totalSessions: sessions.length
      };
    }

    /**
     * ボリューム進歩を計算
     * @param {Array} exerciseData - エクササイズデータ
     * @returns {Array} ボリューム進歩データ
     */
  }, {
    key: "calculateVolumeProgression",
    value: function calculateVolumeProgression(exerciseData) {
      return exerciseData.map(function (workout) {
        var exercise = workout.exerciseData[0];
        var volume = (exercise.weight || 0) * (exercise.reps || 0) * (exercise.sets || 0);
        return {
          date: new Date(workout.date || workout.startTime),
          volume: volume,
          weight: exercise.weight || 0,
          reps: exercise.reps || 0,
          sets: exercise.sets || 0
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
    }

    /**
     * 強度進歩を計算
     * @param {Array} exerciseData - エクササイズデータ
     * @returns {Array} 強度進歩データ
     */
  }, {
    key: "calculateIntensityProgression",
    value: function calculateIntensityProgression(exerciseData) {
      return exerciseData.map(function (workout) {
        var exercise = workout.exerciseData[0];
        return {
          date: new Date(workout.date || workout.startTime),
          weight: exercise.weight || 0,
          reps: exercise.reps || 0,
          sets: exercise.sets || 0,
          intensity: exercise.weight || 0
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
    }

    /**
     * 筋肉部位のエクササイズ分析
     * @param {Array} muscleData - 筋肉部位データ
     * @returns {Object} エクササイズ分析
     */
  }, {
    key: "analyzeMuscleGroupExercises",
    value: function analyzeMuscleGroupExercises(muscleData) {
      var exerciseCounts = {};
      var exerciseProgress = {};
      muscleData.forEach(function (workout) {
        (workout.exercises || []).forEach(function (exercise) {
          var exerciseName = exercise.name;
          if (!exerciseCounts[exerciseName]) {
            exerciseCounts[exerciseName] = 0;
            exerciseProgress[exerciseName] = [];
          }
          exerciseCounts[exerciseName]++;
          exerciseProgress[exerciseName].push({
            date: new Date(workout.date || workout.startTime),
            weight: exercise.weight || 0,
            reps: exercise.reps || 0,
            sets: exercise.sets || 0
          });
        });
      });

      // 各エクササイズの進歩を計算
      Object.keys(exerciseProgress).forEach(function (exerciseName) {
        var sessions = exerciseProgress[exerciseName].sort(function (a, b) {
          return a.date - b.date;
        });
        if (sessions.length >= 2) {
          var firstSession = sessions[0];
          var lastSession = sessions[sessions.length - 1];
          var weightProgress = firstSession.weight > 0 ? (lastSession.weight - firstSession.weight) / firstSession.weight * 100 : 0;
          exerciseProgress[exerciseName] = {
            sessions: sessions,
            weightProgress: Math.round(weightProgress * 10) / 10,
            totalSessions: sessions.length
          };
        }
      });
      return {
        exerciseCounts: exerciseCounts,
        exerciseProgress: exerciseProgress
      };
    }

    /**
     * 筋肉部位のボリューム進歩を計算
     * @param {Array} muscleData - 筋肉部位データ
     * @returns {Array} ボリューム進歩データ
     */
  }, {
    key: "calculateMuscleGroupVolumeProgression",
    value: function calculateMuscleGroupVolumeProgression(muscleData) {
      return muscleData.map(function (workout) {
        var totalVolume = (workout.exercises || []).reduce(function (sum, exercise) {
          return sum + (exercise.weight || 0) * (exercise.reps || 0) * (exercise.sets || 0);
        }, 0);
        return {
          date: new Date(workout.date || workout.startTime),
          volume: totalVolume,
          exerciseCount: (workout.exercises || []).length,
          duration: workout.duration || 0
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
    }

    /**
     * 筋肉部位の頻度分析
     * @param {Array} muscleData - 筋肉部位データ
     * @returns {Object} 頻度分析データ
     */
  }, {
    key: "analyzeMuscleGroupFrequency",
    value: function analyzeMuscleGroupFrequency(muscleData) {
      var sessions = muscleData.map(function (workout) {
        return {
          date: new Date(workout.date || workout.startTime)
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
      if (sessions.length === 0) {
        return {
          averageDaysBetween: 0,
          frequencyScore: 0,
          lastWorkout: null,
          nextRecommended: null
        };
      }

      // セッション間隔を計算
      var intervals = [];
      for (var i = 1; i < sessions.length; i++) {
        var interval = (sessions[i].date - sessions[i - 1].date) / (1000 * 60 * 60 * 24);
        intervals.push(interval);
      }
      var averageDaysBetween = intervals.length > 0 ? intervals.reduce(function (sum, interval) {
        return sum + interval;
      }, 0) / intervals.length : 0;
      var lastWorkout = sessions[sessions.length - 1].date;
      var daysSinceLastWorkout = (new Date() - lastWorkout) / (1000 * 60 * 60 * 24);

      // 頻度スコア（理想的には2-3日間隔）
      var idealInterval = 2.5;
      var frequencyScore = averageDaysBetween > 0 ? Math.max(0, 100 - Math.abs(averageDaysBetween - idealInterval) * 20) : 0;
      var nextRecommended = new Date(lastWorkout);
      nextRecommended.setDate(nextRecommended.getDate() + Math.round(averageDaysBetween));
      return {
        averageDaysBetween: Math.round(averageDaysBetween * 10) / 10,
        frequencyScore: Math.round(frequencyScore),
        lastWorkout: lastWorkout,
        nextRecommended: nextRecommended,
        totalSessions: sessions.length
      };
    }

    /**
     * 総合メトリクスを計算
     * @param {Array} workouts - ワークアウトデータ
     * @returns {Object} 総合メトリクス
     */
  }, {
    key: "calculateOverallMetrics",
    value: function calculateOverallMetrics(workouts) {
      var totalVolume = workouts.reduce(function (sum, workout) {
        return sum + (workout.exercises || []).reduce(function (exerciseSum, exercise) {
          return exerciseSum + (exercise.weight || 0) * (exercise.reps || 0) * (exercise.sets || 0);
        }, 0);
      }, 0);
      var totalDuration = workouts.reduce(function (sum, workout) {
        return sum + (workout.duration || 0);
      }, 0);
      var averageDuration = workouts.length > 0 ? totalDuration / workouts.length : 0;
      var muscleGroupCounts = {};
      workouts.forEach(function (workout) {
        (workout.muscle_groups || []).forEach(function (muscle) {
          muscleGroupCounts[muscle] = (muscleGroupCounts[muscle] || 0) + 1;
        });
      });
      return {
        totalVolume: Math.round(totalVolume),
        totalDuration: Math.round(totalDuration / 60),
        // 分単位
        averageDuration: Math.round(averageDuration / 60),
        // 分単位
        muscleGroupDistribution: muscleGroupCounts,
        totalWorkouts: workouts.length,
        averageVolumePerWorkout: workouts.length > 0 ? Math.round(totalVolume / workouts.length) : 0
      };
    }

    /**
     * 全筋肉部位の進歩を計算
     * @param {Array} workouts - ワークアウトデータ
     * @returns {Promise<Object>} 全筋肉部位進歩データ
     */
  }, {
    key: "calculateAllMuscleGroupProgress",
    value: (function () {
      var _calculateAllMuscleGroupProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(workouts) {
        var muscleGroups, progress, _iterator, _step, muscleGroup, _t10, _t11;
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.p = _context4.n) {
            case 0:
              muscleGroups = new Set();
              workouts.forEach(function (workout) {
                (workout.muscle_groups || []).forEach(function (muscle) {
                  return muscleGroups.add(muscle);
                });
              });
              progress = {};
              _iterator = _createForOfIteratorHelper(muscleGroups);
              _context4.p = 1;
              _iterator.s();
            case 2:
              if ((_step = _iterator.n()).done) {
                _context4.n = 7;
                break;
              }
              muscleGroup = _step.value;
              _context4.p = 3;
              _context4.n = 4;
              return this.getMuscleGroupProgress(muscleGroup, 90);
            case 4:
              progress[muscleGroup] = _context4.v;
              _context4.n = 6;
              break;
            case 5:
              _context4.p = 5;
              _t10 = _context4.v;
              console.warn("Error calculating progress for muscle group ".concat(muscleGroup, ":"), _t10);
              progress[muscleGroup] = null;
            case 6:
              _context4.n = 2;
              break;
            case 7:
              _context4.n = 9;
              break;
            case 8:
              _context4.p = 8;
              _t11 = _context4.v;
              _iterator.e(_t11);
            case 9:
              _context4.p = 9;
              _iterator.f();
              return _context4.f(9);
            case 10:
              return _context4.a(2, progress);
          }
        }, _callee4, this, [[3, 5], [1, 8, 9, 10]]);
      }));
      function calculateAllMuscleGroupProgress(_x3) {
        return _calculateAllMuscleGroupProgress.apply(this, arguments);
      }
      return calculateAllMuscleGroupProgress;
    }()
    /**
     * 全エクササイズの進歩を計算
     * @param {Array} workouts - ワークアウトデータ
     * @returns {Promise<Object>} 全エクササイズ進歩データ
     */
    )
  }, {
    key: "calculateAllExerciseProgress",
    value: (function () {
      var _calculateAllExerciseProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(workouts) {
        var exercises, progress, _iterator2, _step2, exerciseName, _t12, _t13;
        return _regenerator().w(function (_context5) {
          while (1) switch (_context5.p = _context5.n) {
            case 0:
              exercises = new Set();
              workouts.forEach(function (workout) {
                (workout.exercises || []).forEach(function (exercise) {
                  if (exercise.name) exercises.add(exercise.name);
                });
              });
              progress = {};
              _iterator2 = _createForOfIteratorHelper(exercises);
              _context5.p = 1;
              _iterator2.s();
            case 2:
              if ((_step2 = _iterator2.n()).done) {
                _context5.n = 7;
                break;
              }
              exerciseName = _step2.value;
              _context5.p = 3;
              _context5.n = 4;
              return this.getExerciseProgress(exerciseName, 90);
            case 4:
              progress[exerciseName] = _context5.v;
              _context5.n = 6;
              break;
            case 5:
              _context5.p = 5;
              _t12 = _context5.v;
              console.warn("Error calculating progress for exercise ".concat(exerciseName, ":"), _t12);
              progress[exerciseName] = null;
            case 6:
              _context5.n = 2;
              break;
            case 7:
              _context5.n = 9;
              break;
            case 8:
              _context5.p = 8;
              _t13 = _context5.v;
              _iterator2.e(_t13);
            case 9:
              _context5.p = 9;
              _iterator2.f();
              return _context5.f(9);
            case 10:
              return _context5.a(2, progress);
          }
        }, _callee5, this, [[3, 5], [1, 8, 9, 10]]);
      }));
      function calculateAllExerciseProgress(_x4) {
        return _calculateAllExerciseProgress.apply(this, arguments);
      }
      return calculateAllExerciseProgress;
    }()
    /**
     * 一貫性スコアを計算
     * @param {Array} workouts - ワークアウトデータ
     * @returns {number} 一貫性スコア（0-100）
     */
    )
  }, {
    key: "calculateConsistencyScore",
    value: function calculateConsistencyScore(workouts) {
      if (workouts.length < 2) return 0;
      var sessions = workouts.map(function (workout) {
        return {
          date: new Date(workout.date || workout.startTime)
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });

      // セッション間隔の一貫性を計算
      var intervals = [];
      for (var i = 1; i < sessions.length; i++) {
        var interval = (sessions[i].date - sessions[i - 1].date) / (1000 * 60 * 60 * 24);
        intervals.push(interval);
      }
      if (intervals.length === 0) return 0;
      var averageInterval = intervals.reduce(function (sum, interval) {
        return sum + interval;
      }, 0) / intervals.length;
      var variance = intervals.reduce(function (sum, interval) {
        return sum + Math.pow(interval - averageInterval, 2);
      }, 0) / intervals.length;
      var standardDeviation = Math.sqrt(variance);

      // 標準偏差が小さいほど一貫性が高い
      var consistencyScore = Math.max(0, 100 - standardDeviation * 10);
      return Math.round(consistencyScore);
    }

    /**
     * 推奨事項を生成
     * @param {Array} exerciseData - エクササイズデータ
     * @returns {Array} 推奨事項配列
     */
  }, {
    key: "generateRecommendations",
    value: function generateRecommendations(exerciseData) {
      var recommendations = [];
      var metrics = this.calculateProgressMetrics(exerciseData);
      if (metrics.volumeProgression < 5) {
        recommendations.push({
          type: 'volume',
          priority: 'high',
          message: 'ボリュームの増加が停滞しています。セット数やレップ数を増やすことを検討してください。',
          action: 'セット数を1-2セット増やすか、レップ数を2-3回増やす'
        });
      }
      if (metrics.intensityProgression < 2) {
        recommendations.push({
          type: 'intensity',
          priority: 'medium',
          message: '重量の増加が緩やかです。より重い重量にチャレンジしてみてください。',
          action: '重量を2.5-5kg増やすか、より重い重量でレップ数を減らす'
        });
      }
      if (metrics.consistencyScore < 70) {
        recommendations.push({
          type: 'consistency',
          priority: 'high',
          message: 'トレーニングの一貫性を改善する必要があります。',
          action: '定期的なスケジュールを設定し、週2-3回の頻度を維持する'
        });
      }
      if (recommendations.length === 0) {
        recommendations.push({
          type: 'positive',
          priority: 'low',
          message: '素晴らしい進歩です！現在のトレーニングを継続してください。',
          action: '現在のプログラムを維持し、必要に応じて微調整する'
        });
      }
      return recommendations;
    }

    /**
     * 筋肉部位の推奨事項を生成
     * @param {Array} muscleData - 筋肉部位データ
     * @returns {Array} 推奨事項配列
     */
  }, {
    key: "generateMuscleGroupRecommendations",
    value: function generateMuscleGroupRecommendations(muscleData) {
      var recommendations = [];
      var frequencyAnalysis = this.analyzeMuscleGroupFrequency(muscleData);
      if (frequencyAnalysis.frequencyScore < 60) {
        recommendations.push({
          type: 'frequency',
          priority: 'high',
          message: 'この部位のトレーニング頻度が低すぎます。',
          action: '週1-2回の頻度でトレーニングを増やす'
        });
      }
      if (frequencyAnalysis.averageDaysBetween > 7) {
        recommendations.push({
          type: 'recovery',
          priority: 'medium',
          message: 'トレーニング間隔が長すぎる可能性があります。',
          action: 'より頻繁にトレーニングするか、他の部位との組み合わせを検討する'
        });
      }
      return recommendations;
    }

    /**
     * 総合推奨事項を生成
     * @param {Array} workouts - ワークアウトデータ
     * @returns {Array} 推奨事項配列
     */
  }, {
    key: "generateOverallRecommendations",
    value: function generateOverallRecommendations(workouts) {
      var recommendations = [];
      var metrics = this.calculateOverallMetrics(workouts);
      var consistencyScore = this.calculateConsistencyScore(workouts);
      if (consistencyScore < 60) {
        recommendations.push({
          type: 'consistency',
          priority: 'high',
          message: 'トレーニングの一貫性を改善しましょう。',
          action: '定期的なスケジュールを設定し、週3-4回の頻度を目標にする'
        });
      }
      if (metrics.averageVolumePerWorkout < 1000) {
        recommendations.push({
          type: 'volume',
          priority: 'medium',
          message: 'セッションあたりのボリュームを増やすことを検討してください。',
          action: 'エクササイズ数やセット数を増やす'
        });
      }
      var muscleGroups = Object.keys(metrics.muscleGroupDistribution);
      if (muscleGroups.length < 4) {
        recommendations.push({
          type: 'balance',
          priority: 'medium',
          message: 'より多くの筋肉部位をトレーニングしましょう。',
          action: '新しいエクササイズや筋肉部位を追加する'
        });
      }
      return recommendations;
    }

    /**
     * トレンドを分析
     * @param {Array} exerciseData - エクササイズデータ
     * @returns {Object} トレンド分析データ
     */
  }, {
    key: "analyzeTrends",
    value: function analyzeTrends(exerciseData) {
      var sessions = exerciseData.map(function (workout) {
        var exercise = workout.exerciseData[0];
        return {
          date: new Date(workout.date || workout.startTime),
          weight: exercise.weight || 0,
          reps: exercise.reps || 0,
          sets: exercise.sets || 0,
          volume: (exercise.weight || 0) * (exercise.reps || 0) * (exercise.sets || 0)
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
      if (sessions.length < 3) {
        return {
          weightTrend: 'insufficient_data',
          volumeTrend: 'insufficient_data',
          consistencyTrend: 'insufficient_data'
        };
      }

      // 線形回帰でトレンドを計算
      var weightTrend = this.calculateLinearTrend(sessions.map(function (s) {
        return s.weight;
      }));
      var volumeTrend = this.calculateLinearTrend(sessions.map(function (s) {
        return s.volume;
      }));
      return {
        weightTrend: weightTrend > 0.1 ? 'increasing' : weightTrend < -0.1 ? 'decreasing' : 'stable',
        volumeTrend: volumeTrend > 0.1 ? 'increasing' : volumeTrend < -0.1 ? 'decreasing' : 'stable',
        consistencyTrend: this.calculateConsistencyScore(exerciseData) > 70 ? 'good' : 'needs_improvement'
      };
    }

    /**
     * 線形トレンドを計算
     * @param {Array} values - 値の配列
     * @returns {number} トレンド係数
     */
  }, {
    key: "calculateLinearTrend",
    value: function calculateLinearTrend(values) {
      var n = values.length;
      var x = Array.from({
        length: n
      }, function (_, i) {
        return i;
      });
      var y = values;
      var sumX = x.reduce(function (sum, val) {
        return sum + val;
      }, 0);
      var sumY = y.reduce(function (sum, val) {
        return sum + val;
      }, 0);
      var sumXY = x.reduce(function (sum, val, i) {
        return sum + val * y[i];
      }, 0);
      var sumXX = x.reduce(function (sum, val) {
        return sum + val * val;
      }, 0);
      var slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
      return slope;
    }

    // ヘルパーメソッド
  }, {
    key: "calculateAverageVolume",
    value: function calculateAverageVolume(sessions) {
      return sessions.length > 0 ? sessions.reduce(function (sum, session) {
        return sum + session.volume;
      }, 0) / sessions.length : 0;
    }
  }, {
    key: "calculateAverageWeight",
    value: function calculateAverageWeight(sessions) {
      return sessions.length > 0 ? sessions.reduce(function (sum, session) {
        return sum + session.weight;
      }, 0) / sessions.length : 0;
    }
  }, {
    key: "calculateAverageReps",
    value: function calculateAverageReps(sessions) {
      return sessions.length > 0 ? sessions.reduce(function (sum, session) {
        return sum + session.reps;
      }, 0) / sessions.length : 0;
    }
  }, {
    key: "calculateAverageSets",
    value: function calculateAverageSets(sessions) {
      return sessions.length > 0 ? sessions.reduce(function (sum, session) {
        return sum + session.sets;
      }, 0) / sessions.length : 0;
    }

    // キャッシュ管理
  }, {
    key: "getCachedAnalysis",
    value: function getCachedAnalysis(key) {
      var cached = this.analysisCache.get(key);
      if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {
        return cached.data;
      }
      return null;
    }
  }, {
    key: "setCachedAnalysis",
    value: function setCachedAnalysis(key, data) {
      this.analysisCache.set(key, {
        data: data,
        timestamp: Date.now()
      });
    }

    /**
     * キャッシュをクリア
     */
  }, {
    key: "clearCache",
    value: function clearCache() {
      this.analysisCache.clear();
    }
  }]);
}(); // シングルトンインスタンスをエクスポート
var progressiveOverloadService = exports.progressiveOverloadService = new ProgressiveOverloadService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,