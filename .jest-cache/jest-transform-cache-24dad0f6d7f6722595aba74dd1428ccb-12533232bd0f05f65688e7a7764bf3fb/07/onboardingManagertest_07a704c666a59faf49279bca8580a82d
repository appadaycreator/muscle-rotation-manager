c74eb5054ed42411859e3c30f1b4045a
"use strict";

// モックの設定
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    showNotification: jest.fn()
  };
});
var _onboardingManager = require("../../js/utils/onboardingManager.js");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
} // onboardingManager.test.js - OnboardingManagerクラスのテスト
describe('OnboardingManager', function () {
  var manager;
  var mockShowNotification;
  beforeEach(function () {
    // モックのリセット
    jest.clearAllMocks();

    // モジュールの取得
    var helpersModule = require('../../js/utils/helpers.js');
    mockShowNotification = helpersModule.showNotification;

    // OnboardingManagerのインスタンス作成
    manager = new _onboardingManager.OnboardingManager();

    // DOMをセットアップ
    document.body.innerHTML = "\n      <div id=\"dashboard-link\">Dashboard</div>\n      <div id=\"workout-link\">Workout</div>\n      <div id=\"exercises-link\">Exercises</div>\n      <div id=\"analysis-link\">Analysis</div>\n      <div id=\"calendar-link\">Calendar</div>\n    ";

    // localStorageをクリア
    localStorage.clear();
  });
  describe('constructor', function () {
    test('should initialize with default values', function () {
      expect(manager.storageKey).toBe('muscleRotationOnboarding');
      expect(manager.currentStep).toBe(0);
      expect(manager.steps).toHaveLength(6);
      expect(manager.isActive).toBe(false);
      expect(manager.overlay).toBeNull();
      expect(manager.tooltip).toBeNull();
    });
  });
  describe('hasCompletedOnboarding', function () {
    test('should return false when onboarding not completed', function () {
      var result = manager.hasCompletedOnboarding();
      expect(result).toBe(false);
    });
    test('should return true when onboarding completed', function () {
      localStorage.setItem('muscleRotationOnboarding_completed', 'true');
      var result = manager.hasCompletedOnboarding();
      expect(result).toBe(true);
    });
    test('should handle localStorage errors gracefully', function () {
      // localStorageを無効化
      var originalGetItem = localStorage.getItem;
      localStorage.getItem = jest.fn(function () {
        throw new Error('Storage error');
      });
      var result = manager.hasCompletedOnboarding();
      expect(result).toBe(false);

      // localStorageを復元
      localStorage.getItem = originalGetItem;
    });
  });
  describe('startOnboarding', function () {
    test('should start onboarding for first-time users', function () {
      var createOverlaySpy = jest.spyOn(manager, 'createOverlay');
      var showStepSpy = jest.spyOn(manager, 'showStep');
      manager.startOnboarding();
      expect(manager.isActive).toBe(true);
      expect(manager.currentStep).toBe(0);
      expect(createOverlaySpy).toHaveBeenCalled();
      expect(showStepSpy).toHaveBeenCalledWith(0);
    });
    test('should not start onboarding for returning users', function () {
      localStorage.setItem('muscleRotationOnboarding_completed', 'true');
      var createOverlaySpy = jest.spyOn(manager, 'createOverlay');
      var showStepSpy = jest.spyOn(manager, 'showStep');
      manager.startOnboarding();
      expect(manager.isActive).toBe(false);
      expect(createOverlaySpy).not.toHaveBeenCalled();
      expect(showStepSpy).not.toHaveBeenCalled();
    });
    test('should handle errors gracefully', function () {
      // localStorageを無効化
      var originalGetItem = localStorage.getItem;
      localStorage.getItem = jest.fn(function () {
        throw new Error('Storage error');
      });
      expect(function () {
        manager.startOnboarding();
      }).not.toThrow();

      // localStorageを復元
      localStorage.getItem = originalGetItem;
    });
  });
  describe('createOverlay', function () {
    test('should create and append overlay to document', function () {
      manager.createOverlay();
      var overlay = document.getElementById('onboarding-overlay');
      expect(overlay).toBeDefined();
      expect(overlay.style.position).toBe('fixed');
      expect(overlay.style.zIndex).toBe('9999');
      expect(manager.overlay).toBe(overlay);
    });
    test('should remove existing overlay before creating new one', function () {
      // 最初のオーバーレイを作成
      manager.createOverlay();
      var firstOverlay = manager.overlay;

      // 2番目のオーバーレイを作成
      manager.createOverlay();
      var secondOverlay = manager.overlay;
      expect(firstOverlay).not.toBe(secondOverlay);
      expect(document.getElementById('onboarding-overlay')).toBe(secondOverlay);
    });
  });
  describe('showStep', function () {
    beforeEach(function () {
      manager.createOverlay();
    });
    test('should show step tooltip', function () {
      var createTooltipSpy = jest.spyOn(manager, 'createTooltip');
      var highlightTargetSpy = jest.spyOn(manager, 'highlightTarget');
      manager.showStep(0);
      expect(createTooltipSpy).toHaveBeenCalledWith(manager.steps[0]);
      expect(highlightTargetSpy).toHaveBeenCalledWith(manager.steps[0]);
    });
    test('should complete onboarding when all steps shown', function () {
      var completeOnboardingSpy = jest.spyOn(manager, 'completeOnboarding');
      manager.currentStep = manager.steps.length;
      manager.showStep(manager.steps.length);
      expect(completeOnboardingSpy).toHaveBeenCalled();
    });
  });
  describe('createTooltip', function () {
    test('should create tooltip with step information', function () {
      var step = manager.steps[0];
      manager.createTooltip(step);
      var tooltip = document.getElementById('onboarding-tooltip');
      expect(tooltip).toBeDefined();
      expect(tooltip.innerHTML).toContain(step.title);
      expect(tooltip.innerHTML).toContain(step.content);
      expect(manager.tooltip).toBe(tooltip);
    });
    test('should add event listeners to buttons', function () {
      var step = manager.steps[0];
      var nextStepSpy = jest.spyOn(manager, 'nextStep');
      manager.createTooltip(step);
      var nextBtn = document.getElementById('onboarding-next');
      expect(nextBtn).toBeDefined();
      nextBtn.click();
      expect(nextStepSpy).toHaveBeenCalled();
    });
    test('should show previous button for steps after first', function () {
      var step = manager.steps[1];
      manager.currentStep = 1;
      manager.createTooltip(step);
      var prevBtn = document.getElementById('onboarding-prev');
      expect(prevBtn).toBeDefined();
    });
  });
  describe('nextStep', function () {
    test('should move to next step', function () {
      manager.currentStep = 0;
      var showStepSpy = jest.spyOn(manager, 'showStep');
      var removeHighlightSpy = jest.spyOn(manager, 'removeHighlight');
      manager.nextStep();
      expect(manager.currentStep).toBe(1);
      expect(removeHighlightSpy).toHaveBeenCalled();
      expect(showStepSpy).toHaveBeenCalledWith(1);
    });
  });
  describe('prevStep', function () {
    test('should move to previous step', function () {
      manager.currentStep = 1;
      var showStepSpy = jest.spyOn(manager, 'showStep');
      var removeHighlightSpy = jest.spyOn(manager, 'removeHighlight');
      manager.prevStep();
      expect(manager.currentStep).toBe(0);
      expect(removeHighlightSpy).toHaveBeenCalled();
      expect(showStepSpy).toHaveBeenCalledWith(0);
    });
  });
  describe('completeOnboarding', function () {
    test('should complete onboarding and save to localStorage', function () {
      var removeOverlaySpy = jest.spyOn(manager, 'removeOverlay');
      var removeTooltipSpy = jest.spyOn(manager, 'removeTooltip');
      var removeHighlightSpy = jest.spyOn(manager, 'removeHighlight');
      manager.completeOnboarding();
      expect(localStorage.getItem('muscleRotationOnboarding_completed')).toBe('true');
      expect(localStorage.getItem('muscleRotationOnboarding_completedAt')).toBeDefined();
      expect(manager.isActive).toBe(false);
      expect(removeOverlaySpy).toHaveBeenCalled();
      expect(removeTooltipSpy).toHaveBeenCalled();
      expect(removeHighlightSpy).toHaveBeenCalled();
      expect(mockShowNotification).toHaveBeenCalledWith('オンボーディングが完了しました！', 'success');
    });
    test('should handle localStorage errors gracefully', function () {
      // localStorageを無効化
      var originalSetItem = localStorage.setItem;
      localStorage.setItem = jest.fn(function () {
        throw new Error('Storage error');
      });
      expect(function () {
        manager.completeOnboarding();
      }).not.toThrow();

      // localStorageを復元
      localStorage.setItem = originalSetItem;
    });
  });
  describe('resetOnboarding', function () {
    test('should remove onboarding completion data', function () {
      localStorage.setItem('muscleRotationOnboarding_completed', 'true');
      localStorage.setItem('muscleRotationOnboarding_completedAt', '2023-01-01');
      manager.resetOnboarding();
      expect(localStorage.getItem('muscleRotationOnboarding_completed')).toBeNull();
      expect(localStorage.getItem('muscleRotationOnboarding_completedAt')).toBeNull();
    });
    test('should handle localStorage errors gracefully', function () {
      // localStorageを無効化
      var originalRemoveItem = localStorage.removeItem;
      localStorage.removeItem = jest.fn(function () {
        throw new Error('Storage error');
      });
      expect(function () {
        manager.resetOnboarding();
      }).not.toThrow();

      // localStorageを復元
      localStorage.removeItem = originalRemoveItem;
    });
  });
  describe('getOnboardingStatus', function () {
    test('should return correct status for new user', function () {
      var status = manager.getOnboardingStatus();
      expect(status.completed).toBe(false);
      expect(status.completedAt).toBeNull();
      expect(status.isActive).toBe(false);
      expect(status.currentStep).toBe(0);
      expect(status.totalSteps).toBe(6);
    });
    test('should return correct status for completed user', function () {
      var completedAt = new Date().toISOString();
      localStorage.setItem('muscleRotationOnboarding_completed', 'true');
      localStorage.setItem('muscleRotationOnboarding_completedAt', completedAt);
      var status = manager.getOnboardingStatus();
      expect(status.completed).toBe(true);
      expect(status.completedAt).toEqual(new Date(completedAt));
      expect(status.isActive).toBe(false);
      expect(status.currentStep).toBe(0);
      expect(status.totalSteps).toBe(6);
    });
    test('should handle localStorage errors gracefully', function () {
      // localStorageを無効化
      var originalGetItem = localStorage.getItem;
      localStorage.getItem = jest.fn(function () {
        throw new Error('Storage error');
      });
      var status = manager.getOnboardingStatus();
      expect(status.completed).toBe(false);
      expect(status.completedAt).toBeNull();
      expect(status.isActive).toBe(false);
      expect(status.currentStep).toBe(0);
      expect(status.totalSteps).toBe(6);

      // localStorageを復元
      localStorage.getItem = originalGetItem;
    });
  });
  describe('singleton instance', function () {
    test('should export singleton instance', function () {
      expect(_onboardingManager.onboardingManager).toBeInstanceOf(_onboardingManager.OnboardingManager);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,