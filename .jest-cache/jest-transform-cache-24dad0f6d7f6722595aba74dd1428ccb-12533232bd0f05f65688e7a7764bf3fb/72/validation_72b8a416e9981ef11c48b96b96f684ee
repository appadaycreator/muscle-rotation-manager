fd0622cc0245ca71841ef7979336ff5b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Validator = exports.VALIDATION_RULES = exports.RealtimeValidator = exports.FormValidator = exports.ERROR_MESSAGES = void 0;
exports.detectXSS = detectXSS;
exports.escapeHtml = escapeHtml;
exports.globalRealtimeValidator = exports.globalFormValidator = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// validation.js - 包括的なバリデーションシステム

/**
 * バリデーション結果オブジェクト
 * @typedef {Object} ValidationResult
 * @property {boolean} isValid - バリデーション結果
 * @property {string[]} errors - エラーメッセージ配列
 * @property {Object} sanitizedData - サニタイズされたデータ
 */

/**
 * バリデーションルール定義
 */
var VALIDATION_RULES = exports.VALIDATION_RULES = {
  // 数値範囲
  WEIGHT: {
    min: 0.1,
    max: 500,
    unit: 'kg'
  },
  REPS: {
    min: 1,
    max: 100,
    unit: '回'
  },
  SETS: {
    min: 1,
    max: 10,
    unit: 'セット'
  },
  // 文字列長
  EMAIL_MAX_LENGTH: 254,
  PASSWORD_MIN_LENGTH: 8,
  PASSWORD_MAX_LENGTH: 128,
  NICKNAME_MAX_LENGTH: 50,
  EXERCISE_NAME_MAX_LENGTH: 100,
  NOTES_MAX_LENGTH: 1000,
  // 正規表現パターン
  // eslint-disable-next-line max-len
  EMAIL_PATTERN: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,
  PASSWORD_PATTERN: /^[a-zA-Z\d@$!%*?&]{8,}$/,
  SAFE_TEXT_PATTERN: /^[a-zA-Z0-9\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF\s\-_.()（）、。！？]*$/
};

/**
 * エラーメッセージ定義
 */
var ERROR_MESSAGES = exports.ERROR_MESSAGES = {
  REQUIRED: 'この項目は必須です',
  INVALID_EMAIL: 'メールアドレスの形式が正しくありません',
  INVALID_PASSWORD: 'パスワードは8文字以上で入力してください',
  INVALID_NUMBER: '数値を入力してください',
  OUT_OF_RANGE: function OUT_OF_RANGE(min, max, unit) {
    return "".concat(min).concat(unit, "\u304B\u3089").concat(max).concat(unit, "\u306E\u7BC4\u56F2\u3067\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044");
  },
  TOO_LONG: function TOO_LONG(max) {
    return "".concat(max, "\u6587\u5B57\u4EE5\u5185\u3067\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044");
  },
  INVALID_CHARACTERS: '使用できない文字が含まれています',
  XSS_DETECTED: '不正なスクリプトが検出されました'
};

/**
 * HTMLエスケープ処理
 * @param {string} str - エスケープする文字列
 * @returns {string} エスケープされた文字列
 */
function escapeHtml(str) {
  if (typeof str !== 'string') {
    return String(str);
  }
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '/': '&#x2F;',
    '`': '&#x60;',
    '=': '&#x3D;'
  };
  return str.replace(/[&<>"'`=/]/g, function (match) {
    return escapeMap[match];
  });
}

/**
 * XSS攻撃パターンの検出
 * @param {string} input - 検査する文字列
 * @returns {boolean} XSS攻撃パターンが検出されたかどうか
 */
function detectXSS(input) {
  if (typeof input !== 'string') {
    return false;
  }
  var xssPatterns = [/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, /javascript:/gi, /on\w+\s*=/gi, /<iframe\b/gi, /<object\b/gi, /<embed\b/gi, /<link\b/gi, /<meta\b/gi, /expression\s*\(/gi, /url\s*\(/gi, /vbscript:/gi, /data:text\/html/gi];
  return xssPatterns.some(function (pattern) {
    return pattern.test(input);
  });
}

/**
 * 基本バリデーター
 */
var Validator = exports.Validator = /*#__PURE__*/function () {
  function Validator() {
    _classCallCheck(this, Validator);
  }
  return _createClass(Validator, null, [{
    key: "required",
    value:
    /**
    * 必須チェック
    * @param {*} value - チェックする値
    * @returns {ValidationResult} バリデーション結果
    */
    function required(value) {
      var isValid = value !== null && value !== undefined && String(value).trim() !== '';
      return {
        isValid: isValid,
        errors: isValid ? [] : [ERROR_MESSAGES.REQUIRED],
        sanitizedData: isValid ? String(value).trim() : ''
      };
    }

    /**
    * メールアドレスバリデーション
    * @param {string} email - メールアドレス
    * @returns {ValidationResult} バリデーション結果
    */
  }, {
    key: "email",
    value: function email(_email) {
      var errors = [];
      var sanitizedEmail = '';
      if (!_email || typeof _email !== 'string') {
        errors.push(ERROR_MESSAGES.REQUIRED);
      } else {
        sanitizedEmail = _email.trim().toLowerCase();
        if (sanitizedEmail.length > VALIDATION_RULES.EMAIL_MAX_LENGTH) {
          errors.push(ERROR_MESSAGES.TOO_LONG(VALIDATION_RULES.EMAIL_MAX_LENGTH));
        }
        if (!VALIDATION_RULES.EMAIL_PATTERN.test(sanitizedEmail)) {
          errors.push(ERROR_MESSAGES.INVALID_EMAIL);
        }
        if (detectXSS(sanitizedEmail)) {
          errors.push(ERROR_MESSAGES.XSS_DETECTED);
        }
      }
      return {
        isValid: errors.length === 0,
        errors: errors,
        sanitizedData: sanitizedEmail
      };
    }

    /**
    * パスワードバリデーション
    * @param {string} password - パスワード
    * @returns {ValidationResult} バリデーション結果
    */
  }, {
    key: "password",
    value: function password(_password) {
      var errors = [];
      var sanitizedPassword = '';
      if (!_password || typeof _password !== 'string') {
        errors.push(ERROR_MESSAGES.REQUIRED);
      } else {
        sanitizedPassword = _password.trim();
        if (sanitizedPassword.length < VALIDATION_RULES.PASSWORD_MIN_LENGTH) {
          errors.push(ERROR_MESSAGES.INVALID_PASSWORD);
        } else if (sanitizedPassword.length > VALIDATION_RULES.PASSWORD_MAX_LENGTH) {
          errors.push(ERROR_MESSAGES.TOO_LONG(VALIDATION_RULES.PASSWORD_MAX_LENGTH));
        } else if (!VALIDATION_RULES.PASSWORD_PATTERN.test(sanitizedPassword)) {
          errors.push(ERROR_MESSAGES.INVALID_PASSWORD);
        }
        if (detectXSS(sanitizedPassword)) {
          errors.push(ERROR_MESSAGES.XSS_DETECTED);
        }
      }
      return {
        isValid: errors.length === 0,
        errors: errors,
        sanitizedData: sanitizedPassword
      };
    }

    /**
    * 数値範囲バリデーション
    * @param {*} value - チェックする値
    * @param {number} min - 最小値
    * @param {number} max - 最大値
    * @param {string} unit - 単位
    * @returns {ValidationResult} バリデーション結果
    */
  }, {
    key: "numberRange",
    value: function numberRange(value, min, max) {
      var unit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
      var errors = [];
      var sanitizedValue = 0;
      if (value === null || value === undefined || value === '') {
        errors.push(ERROR_MESSAGES.REQUIRED);
      } else {
        var numValue = Number(value);
        if (isNaN(numValue)) {
          errors.push(ERROR_MESSAGES.INVALID_NUMBER);
        } else {
          sanitizedValue = numValue;
          if (numValue < min || numValue > max) {
            errors.push(ERROR_MESSAGES.OUT_OF_RANGE(min, max, unit));
          }
        }
      }
      return {
        isValid: errors.length === 0,
        errors: errors,
        sanitizedData: sanitizedValue
      };
    }

    /**
    * 重量バリデーション
    * @param {*} weight - 重量
    * @returns {ValidationResult} バリデーション結果
    */
  }, {
    key: "weight",
    value: function weight(_weight) {
      return Validator.numberRange(_weight, VALIDATION_RULES.WEIGHT.min, VALIDATION_RULES.WEIGHT.max, VALIDATION_RULES.WEIGHT.unit);
    }

    /**
    * 回数バリデーション
    * @param {*} reps - 回数
    * @returns {ValidationResult} バリデーション結果
    */
  }, {
    key: "reps",
    value: function reps(_reps) {
      return Validator.numberRange(_reps, VALIDATION_RULES.REPS.min, VALIDATION_RULES.REPS.max, VALIDATION_RULES.REPS.unit);
    }

    /**
    * セット数バリデーション
    * @param {*} sets - セット数
    * @returns {ValidationResult} バリデーション結果
    */
  }, {
    key: "sets",
    value: function sets(_sets) {
      return Validator.numberRange(_sets, VALIDATION_RULES.SETS.min, VALIDATION_RULES.SETS.max, VALIDATION_RULES.SETS.unit);
    }

    /**
    * 安全なテキストバリデーション
    * @param {string} text - テキスト
    * @param {number} maxLength - 最大文字数
    * @returns {ValidationResult} バリデーション結果
    */
  }, {
    key: "safeText",
    value: function safeText(text) {
      var maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : VALIDATION_RULES.NOTES_MAX_LENGTH;
      var errors = [];
      var sanitizedText = '';
      if (text && typeof text === 'string') {
        sanitizedText = escapeHtml(text.trim());
        if (sanitizedText.length > maxLength) {
          errors.push(ERROR_MESSAGES.TOO_LONG(maxLength));
        }
        if (detectXSS(text)) {
          errors.push(ERROR_MESSAGES.XSS_DETECTED);
        }
      }
      return {
        isValid: errors.length === 0,
        errors: errors,
        sanitizedData: sanitizedText
      };
    }

    /**
    * ニックネームバリデーション
    * @param {string} nickname - ニックネーム
    * @returns {ValidationResult} バリデーション結果
    */
  }, {
    key: "nickname",
    value: function nickname(_nickname) {
      return Validator.safeText(_nickname, VALIDATION_RULES.NICKNAME_MAX_LENGTH);
    }

    /**
    * エクササイズ名バリデーション
    * @param {string} exerciseName - エクササイズ名
    * @returns {ValidationResult} バリデーション結果
    */
  }, {
    key: "exerciseName",
    value: function exerciseName(_exerciseName) {
      var result = Validator.safeText(_exerciseName, VALIDATION_RULES.EXERCISE_NAME_MAX_LENGTH);
      if (!_exerciseName || _exerciseName.trim() === '') {
        result.errors.unshift(ERROR_MESSAGES.REQUIRED);
        result.isValid = false;
      }
      return result;
    }
  }]);
}();
/**
 * フォームバリデーター
 */
var FormValidator = exports.FormValidator = /*#__PURE__*/function () {
  function FormValidator() {
    _classCallCheck(this, FormValidator);
    this.errors = new Map();
  }

  /**
  * エラーをクリア
  */
  return _createClass(FormValidator, [{
    key: "clearErrors",
    value: function clearErrors() {
      this.errors.clear();
    }

    /**
    * フィールドのエラーを設定
    * @param {string} fieldName - フィールド名
    * @param {string[]} errors - エラーメッセージ配列
    */
  }, {
    key: "setFieldErrors",
    value: function setFieldErrors(fieldName, errors) {
      if (errors.length > 0) {
        this.errors.set(fieldName, errors);
      } else {
        this.errors["delete"](fieldName);
      }
    }

    /**
    * フィールドのエラーを取得
    * @param {string} fieldName - フィールド名
    * @returns {string[]} エラーメッセージ配列
    */
  }, {
    key: "getFieldErrors",
    value: function getFieldErrors(fieldName) {
      return this.errors.get(fieldName) || [];
    }

    /**
    * 全エラーを取得
    * @returns {Object} エラーオブジェクト
    */
  }, {
    key: "getAllErrors",
    value: function getAllErrors() {
      var errorObj = {};
      var _iterator = _createForOfIteratorHelper(this.errors),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
            field = _step$value[0],
            errors = _step$value[1];
          errorObj[field] = errors;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return errorObj;
    }

    /**
    * バリデーションが成功したかチェック
    * @returns {boolean} 成功したかどうか
    */
  }, {
    key: "isValid",
    value: function isValid() {
      return this.errors.size === 0;
    }

    /**
    * フィールドをバリデーション
    * @param {string} fieldName - フィールド名
    * @param {*} value - 値
    * @param {Function} validator - バリデーター関数
    * @returns {*} サニタイズされた値
    */
  }, {
    key: "validateField",
    value: function validateField(fieldName, value, validator) {
      var result = validator(value);
      this.setFieldErrors(fieldName, result.errors);
      return result.sanitizedData;
    }

    /**
    * 認証フォームをバリデーション
    * @param {Object} formData - フォームデータ
    * @returns {Object} サニタイズされたデータ
    */
  }, {
    key: "validateAuthForm",
    value: function validateAuthForm(formData) {
      this.clearErrors();
      var sanitizedData = {
        email: this.validateField('email', formData.email, Validator.email),
        password: this.validateField('password', formData.password, Validator.password)
      };
      return sanitizedData;
    }

    /**
    * ワークアウトフォームをバリデーション
    * @param {Object} formData - フォームデータ
    * @returns {Object} サニタイズされたデータ
    */
  }, {
    key: "validateWorkoutForm",
    value: function validateWorkoutForm(formData) {
      this.clearErrors();
      var sanitizedData = {
        exerciseName: this.validateField('exerciseName', formData.exerciseName, Validator.exerciseName),
        weight: this.validateField('weight', formData.weight, Validator.weight),
        reps: this.validateField('reps', formData.reps, Validator.reps),
        sets: this.validateField('sets', formData.sets, Validator.sets),
        notes: this.validateField('notes', formData.notes, function (value) {
          return Validator.safeText(value);
        })
      };
      return sanitizedData;
    }

    /**
    * プロフィールフォームをバリデーション
    * @param {Object} formData - フォームデータ
    * @returns {Object} サニタイズされたデータ
    */
  }, {
    key: "validateProfileForm",
    value: function validateProfileForm(formData) {
      this.clearErrors();
      var sanitizedData = {
        display_name: this.validateField('display_name', formData.display_name, Validator.nickname),
        email: this.validateField('email', formData.email, function (value) {
          // メールアドレスは空の場合はスキップ、入力がある場合はバリデーション
          if (!value || value.trim() === '') {
            return {
              isValid: true,
              errors: [],
              sanitizedData: ''
            };
          }
          return Validator.email(value);
        }),
        age: this.validateField('age', formData.age, function (value) {
          return Validator.numberRange(value, 10, 100, '歳');
        }),
        weight: this.validateField('weight', formData.weight, Validator.weight),
        height: this.validateField('height', formData.height, function (value) {
          return Validator.numberRange(value, 100, 250, 'cm');
        })
      };
      return sanitizedData;
    }

    /**
    * エラーメッセージをDOMに表示
    * @param {string} fieldName - フィールド名
    * @param {Element} errorElement - エラー表示要素
    */
  }, {
    key: "displayFieldError",
    value: function displayFieldError(fieldName, errorElement) {
      var errors = this.getFieldErrors(fieldName);
      if (errorElement) {
        if (errors.length > 0) {
          errorElement.textContent = errors[0]; // 最初のエラーのみ表示
          errorElement.classList.remove('hidden');
          errorElement.classList.add('text-red-600', 'text-sm', 'mt-1');
        } else {
          errorElement.textContent = '';
          errorElement.classList.add('hidden');
        }
      }
    }

    /**
    * フィールドの視覚的エラー状態を設定
    * @param {string} fieldName - フィールド名
    * @param {Element} inputElement - 入力要素
    */
  }, {
    key: "setFieldErrorState",
    value: function setFieldErrorState(fieldName, inputElement) {
      var hasError = this.getFieldErrors(fieldName).length > 0;
      if (inputElement) {
        if (hasError) {
          inputElement.classList.add('border-red-500', 'focus:border-red-500');
          inputElement.classList.remove('border-gray-300', 'focus:border-blue-500');
        } else {
          inputElement.classList.remove('border-red-500', 'focus:border-red-500');
          inputElement.classList.add('border-gray-300', 'focus:border-blue-500');
        }
      }
    }
  }]);
}();
/**
 * リアルタイムバリデーション
 */
var RealtimeValidator = exports.RealtimeValidator = /*#__PURE__*/function () {
  function RealtimeValidator(formValidator) {
    _classCallCheck(this, RealtimeValidator);
    this.formValidator = formValidator;
    this.debounceTimers = new Map();
  }

  /**
  * フィールドにリアルタイムバリデーションを設定
  * @param {Element} inputElement - 入力要素
  * @param {Element} errorElement - エラー表示要素
  * @param {Function} validator - バリデーター関数
  * @param {number} debounceMs - デバウンス時間
  */
  return _createClass(RealtimeValidator, [{
    key: "setupFieldValidation",
    value: function setupFieldValidation(inputElement, errorElement, validator) {
      var _this = this;
      var debounceMs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 300;
      if (!inputElement) {
        return;
      }
      var fieldName = inputElement.name || inputElement.id;
      var validateField = function validateField() {
        var value = inputElement.value;
        _this.formValidator.validateField(fieldName, value, validator);
        _this.formValidator.displayFieldError(fieldName, errorElement);
        _this.formValidator.setFieldErrorState(fieldName, inputElement);
      };

      // リアルタイムバリデーション（デバウンス付き）
      inputElement.addEventListener('input', function () {
        if (_this.debounceTimers.has(fieldName)) {
          clearTimeout(_this.debounceTimers.get(fieldName));
        }
        var timer = setTimeout(validateField, debounceMs);
        _this.debounceTimers.set(fieldName, timer);
      });

      // フォーカス離脱時の即座バリデーション
      inputElement.addEventListener('blur', validateField);
    }

    /**
    * 認証フォームにリアルタイムバリデーションを設定
    * @param {Element} formElement - フォーム要素
    */
  }, {
    key: "setupAuthFormValidation",
    value: function setupAuthFormValidation(formElement) {
      if (!formElement) {
        return;
      }
      var emailInput = formElement.querySelector('#auth-email, #signup-email');
      var passwordInput = formElement.querySelector('#auth-password, #signup-password');
      var emailError = formElement.querySelector('#email-error');
      var passwordError = formElement.querySelector('#password-error');
      this.setupFieldValidation(emailInput, emailError, Validator.email);
      this.setupFieldValidation(passwordInput, passwordError, Validator.password);
    }

    /**
    * ワークアウトフォームにリアルタイムバリデーションを設定
    * @param {Element} formElement - フォーム要素
    */
  }, {
    key: "setupWorkoutFormValidation",
    value: function setupWorkoutFormValidation(formElement) {
      if (!formElement) {
        return;
      }
      var exerciseNameInput = formElement.querySelector('[name="exerciseName"]');
      var weightInput = formElement.querySelector('[name="weight"]');
      var repsInput = formElement.querySelector('[name="reps"]');
      var setsInput = formElement.querySelector('[name="sets"]');
      var notesInput = formElement.querySelector('[name="notes"]');
      this.setupFieldValidation(exerciseNameInput, null, Validator.exerciseName);
      this.setupFieldValidation(weightInput, null, Validator.weight);
      this.setupFieldValidation(repsInput, null, Validator.reps);
      this.setupFieldValidation(setsInput, null, Validator.sets);
      this.setupFieldValidation(notesInput, null, function (value) {
        return Validator.safeText(value);
      });
    }
  }]);
}(); // グローバルバリデーターインスタンス
var globalFormValidator = exports.globalFormValidator = new FormValidator();
var globalRealtimeValidator = exports.globalRealtimeValidator = new RealtimeValidator(globalFormValidator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,