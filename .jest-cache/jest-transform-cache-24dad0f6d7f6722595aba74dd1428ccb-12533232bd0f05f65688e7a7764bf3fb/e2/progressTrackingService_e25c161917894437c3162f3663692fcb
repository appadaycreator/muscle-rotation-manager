e9eec21af199278015cbe3e39c3a3371
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.progressTrackingService = exports.ProgressTrackingService = void 0;
var _supabaseService = require("./supabaseService.js");
var _errorHandler = require("../utils/errorHandler.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorValues(e) { if (null != e) { var t = e["function" == typeof Symbol && Symbol.iterator || "@@iterator"], r = 0; if (t) return t.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) return { next: function next() { return e && r >= e.length && (e = void 0), { value: e && e[r++], done: !e }; } }; } throw new TypeError(_typeof(e) + " is not iterable"); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * プログレッシブ・オーバーロード追跡サービス
 * 重量・回数の推移、1RM計算、目標設定・達成度管理を行う
 */
var ProgressTrackingService = exports.ProgressTrackingService = /*#__PURE__*/function () {
  function ProgressTrackingService() {
    _classCallCheck(this, ProgressTrackingService);
    this.supabase = _supabaseService.supabaseService.client;
  }

  /**
   * 1RM（最大挙上重量）を計算する
   * Brzycki式を使用: 1RM = weight × (36 / (37 - reps))
   * @param {number} weight - 重量（kg）
   * @param {number} reps - 回数
   * @returns {number} 1RM値
   */
  return _createClass(ProgressTrackingService, [{
    key: "calculateOneRM",
    value: function calculateOneRM(weight, reps) {
      try {
        if (!weight || !reps || weight <= 0 || reps <= 0) {
          throw new Error('重量と回数は正の数である必要があります');
        }
        if (reps === 1) {
          return weight;
        }
        if (reps > 36) {
          throw new Error('36回を超える回数では1RM計算が不正確になります');
        }

        // Brzycki式による1RM計算
        var oneRM = weight * (36 / (37 - reps));
        return Math.round(oneRM * 10) / 10; // 小数点第1位まで
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ProgressTrackingService.calculateOneRM'
        });
        return 0;
      }
    }

    /**
     * エクササイズの進捗データを保存
     * @param {Object} progressData - 進捗データ
     * @returns {Promise<Object>} 保存結果
     */
  }, {
    key: "saveProgressData",
    value: (function () {
      var _saveProgressData = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(progressData) {
        var _yield$this$supabase$, data, error, _t;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.p = _context.n) {
            case 0:
              _context.p = 0;
              _context.n = 1;
              return this.supabase.from('training_logs').insert({
                user_id: progressData.userId,
                exercise_id: progressData.exerciseId,
                exercise_name: progressData.exerciseName,
                muscle_group_id: progressData.muscleGroupId,
                workout_date: progressData.workoutDate,
                sets: progressData.sets,
                reps: progressData.reps,
                weights: progressData.weights,
                workout_session_id: progressData.workoutSessionId,
                // 1RM計算結果を保存
                one_rm: this.calculateBestOneRM(progressData.reps, progressData.weights),
                notes: progressData.notes
              });
            case 1:
              _yield$this$supabase$ = _context.v;
              data = _yield$this$supabase$.data;
              error = _yield$this$supabase$.error;
              if (!error) {
                _context.n = 2;
                break;
              }
              throw error;
            case 2:
              _context.n = 3;
              return this.updateProgressStats(progressData.userId, progressData.exerciseId);
            case 3:
              return _context.a(2, {
                success: true,
                data: data
              });
            case 4:
              _context.p = 4;
              _t = _context.v;
              (0, _errorHandler.handleError)(_t, {
                context: 'ProgressTrackingService.saveProgressData'
              });
              return _context.a(2, {
                success: false,
                error: _t.message
              });
          }
        }, _callee, this, [[0, 4]]);
      }));
      function saveProgressData(_x) {
        return _saveProgressData.apply(this, arguments);
      }
      return saveProgressData;
    }()
    /**
     * セット内で最高の1RMを計算
     * @param {Array} repsArray - 回数の配列
     * @param {Array} weightsArray - 重量の配列
     * @returns {number} 最高1RM値
     */
    )
  }, {
    key: "calculateBestOneRM",
    value: function calculateBestOneRM(repsArray, weightsArray) {
      try {
        var bestOneRM = 0;
        for (var i = 0; i < repsArray.length && i < weightsArray.length; i++) {
          var oneRM = this.calculateOneRM(weightsArray[i], repsArray[i]);
          if (oneRM > bestOneRM) {
            bestOneRM = oneRM;
          }
        }
        return bestOneRM;
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ProgressTrackingService.calculateBestOneRM'
        });
        return 0;
      }
    }

    /**
     * エクササイズの進捗履歴を取得
     * @param {string} userId - ユーザーID
     * @param {string} exerciseId - エクササイズID
     * @param {number} days - 取得する日数（デフォルト: 90日）
     * @returns {Promise<Array>} 進捗履歴
     */
  }, {
    key: "getProgressHistory",
    value: (function () {
      var _getProgressHistory = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(userId, exerciseId) {
        var _this = this;
        var days,
          startDate,
          _yield$this$supabase$2,
          data,
          error,
          _args2 = arguments,
          _t2;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.p = _context2.n) {
            case 0:
              days = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : 90;
              _context2.p = 1;
              startDate = new Date();
              startDate.setDate(startDate.getDate() - days);
              _context2.n = 2;
              return this.supabase.from('training_logs').select("\n                    id,\n                    workout_date,\n                    sets,\n                    reps,\n                    weights,\n                    one_rm,\n                    exercise_name,\n                    notes\n                ").eq('user_id', userId).eq('exercise_id', exerciseId).gte('workout_date', startDate.toISOString().split('T')[0]).order('workout_date', {
                ascending: true
              });
            case 2:
              _yield$this$supabase$2 = _context2.v;
              data = _yield$this$supabase$2.data;
              error = _yield$this$supabase$2.error;
              if (!error) {
                _context2.n = 3;
                break;
              }
              throw error;
            case 3:
              return _context2.a(2, data.map(function (record) {
                return _objectSpread(_objectSpread({}, record), {}, {
                  one_rm: record.one_rm || _this.calculateBestOneRM(record.reps, record.weights)
                });
              }));
            case 4:
              _context2.p = 4;
              _t2 = _context2.v;
              (0, _errorHandler.handleError)(_t2, {
                context: 'ProgressTrackingService.getProgressHistory'
              });
              return _context2.a(2, []);
          }
        }, _callee2, this, [[1, 4]]);
      }));
      function getProgressHistory(_x2, _x3) {
        return _getProgressHistory.apply(this, arguments);
      }
      return getProgressHistory;
    }()
    /**
     * 進捗統計を更新
     * @param {string} userId - ユーザーID
     * @param {string} exerciseId - エクササイズID
     */
    )
  }, {
    key: "updateProgressStats",
    value: (function () {
      var _updateProgressStats = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(userId, exerciseId) {
        var history, oneRMValues, maxOneRM, avgOneRM, firstOneRM, lastOneRM, progressRate, _yield$this$supabase$3, error, _t3;
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.p = _context3.n) {
            case 0:
              _context3.p = 0;
              _context3.n = 1;
              return this.getProgressHistory(userId, exerciseId, 30);
            case 1:
              history = _context3.v;
              if (!(history.length === 0)) {
                _context3.n = 2;
                break;
              }
              return _context3.a(2);
            case 2:
              // 統計計算
              oneRMValues = history.map(function (h) {
                return h.one_rm;
              }).filter(function (rm) {
                return rm > 0;
              });
              maxOneRM = Math.max.apply(Math, _toConsumableArray(oneRMValues));
              avgOneRM = oneRMValues.reduce(function (sum, rm) {
                return sum + rm;
              }, 0) / oneRMValues.length; // 進捗率計算（最初と最後の1RMを比較）
              firstOneRM = oneRMValues[0] || 0;
              lastOneRM = oneRMValues[oneRMValues.length - 1] || 0;
              progressRate = firstOneRM > 0 ? (lastOneRM - firstOneRM) / firstOneRM * 100 : 0; // 統計データを保存/更新
              _context3.n = 3;
              return this.supabase.from('progress_stats').upsert({
                user_id: userId,
                exercise_id: exerciseId,
                max_one_rm: maxOneRM,
                avg_one_rm: Math.round(avgOneRM * 10) / 10,
                progress_rate: Math.round(progressRate * 10) / 10,
                total_sessions: history.length,
                last_updated: new Date().toISOString()
              });
            case 3:
              _yield$this$supabase$3 = _context3.v;
              error = _yield$this$supabase$3.error;
              if (!error) {
                _context3.n = 4;
                break;
              }
              throw error;
            case 4:
              _context3.n = 6;
              break;
            case 5:
              _context3.p = 5;
              _t3 = _context3.v;
              (0, _errorHandler.handleError)(_t3, {
                context: 'ProgressTrackingService.updateProgressStats'
              });
            case 6:
              return _context3.a(2);
          }
        }, _callee3, this, [[0, 5]]);
      }));
      function updateProgressStats(_x4, _x5) {
        return _updateProgressStats.apply(this, arguments);
      }
      return updateProgressStats;
    }()
    /**
     * 目標を設定
     * @param {Object} goalData - 目標データ
     * @returns {Promise<Object>} 設定結果
     */
    )
  }, {
    key: "setGoal",
    value: (function () {
      var _setGoal = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(goalData) {
        var _goalData$notificatio, goalRecord, _yield$this$supabase$4, data, error, _t4;
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.p = _context4.n) {
            case 0:
              _context4.p = 0;
              goalRecord = {
                user_id: goalData.userId,
                exercise_id: goalData.exerciseId,
                goal_type: goalData.goalType,
                // 'weight', 'reps', 'one_rm'
                target_value: goalData.targetValue,
                current_value: goalData.currentValue,
                target_date: goalData.targetDate,
                description: goalData.description,
                priority: goalData.priority || 'medium',
                strategy: goalData.strategy || null,
                is_active: true,
                created_at: new Date().toISOString()
              }; // 通知設定がある場合は追加
              if (goalData.notifications) {
                goalRecord.notifications = JSON.stringify(goalData.notifications);
              }
              _context4.n = 1;
              return this.supabase.from('user_goals').upsert(goalRecord);
            case 1:
              _yield$this$supabase$4 = _context4.v;
              data = _yield$this$supabase$4.data;
              error = _yield$this$supabase$4.error;
              if (!error) {
                _context4.n = 2;
                break;
              }
              throw error;
            case 2:
              if (!((_goalData$notificatio = goalData.notifications) !== null && _goalData$notificatio !== void 0 && _goalData$notificatio.progress)) {
                _context4.n = 3;
                break;
              }
              _context4.n = 3;
              return this.scheduleGoalNotifications(goalData);
            case 3:
              return _context4.a(2, {
                success: true,
                data: data
              });
            case 4:
              _context4.p = 4;
              _t4 = _context4.v;
              (0, _errorHandler.handleError)(_t4, {
                context: 'ProgressTrackingService.setGoal'
              });
              return _context4.a(2, {
                success: false,
                error: _t4.message
              });
          }
        }, _callee4, this, [[0, 4]]);
      }));
      function setGoal(_x6) {
        return _setGoal.apply(this, arguments);
      }
      return setGoal;
    }()
    /**
     * 目標通知をスケジュール
     * @param {Object} goalData - 目標データ
     */
    )
  }, {
    key: "scheduleGoalNotifications",
    value: (function () {
      var _scheduleGoalNotifications = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(goalData) {
        var _goalData$notificatio2, targetDate, reminderDate, notifications, _t5;
        return _regenerator().w(function (_context5) {
          while (1) switch (_context5.p = _context5.n) {
            case 0:
              _context5.p = 0;
              if (!('Notification' in window && Notification.permission === 'default')) {
                _context5.n = 1;
                break;
              }
              _context5.n = 1;
              return Notification.requestPermission();
            case 1:
              // 期限前リマインダーの設定
              if ((_goalData$notificatio2 = goalData.notifications) !== null && _goalData$notificatio2 !== void 0 && _goalData$notificatio2.deadline) {
                targetDate = new Date(goalData.targetDate);
                reminderDate = new Date(targetDate);
                reminderDate.setDate(targetDate.getDate() - 7); // 1週間前

                if (reminderDate > new Date()) {
                  // LocalStorageに通知スケジュールを保存
                  notifications = JSON.parse(localStorage.getItem('goalNotifications') || '[]');
                  notifications.push({
                    goalId: "".concat(goalData.userId, "_").concat(goalData.exerciseId, "_").concat(goalData.goalType),
                    type: 'deadline_reminder',
                    scheduledDate: reminderDate.toISOString(),
                    message: "\u76EE\u6A19\u300C".concat(goalData.description, "\u300D\u306E\u671F\u9650\u304C1\u9031\u9593\u5F8C\u306B\u8FEB\u3063\u3066\u3044\u307E\u3059"),
                    goalData: goalData
                  });
                  localStorage.setItem('goalNotifications', JSON.stringify(notifications));
                }
              }
              _context5.n = 3;
              break;
            case 2:
              _context5.p = 2;
              _t5 = _context5.v;
              (0, _errorHandler.handleError)(_t5, {
                context: 'ProgressTrackingService.scheduleGoalNotifications'
              });
            case 3:
              return _context5.a(2);
          }
        }, _callee5, null, [[0, 2]]);
      }));
      function scheduleGoalNotifications(_x7) {
        return _scheduleGoalNotifications.apply(this, arguments);
      }
      return scheduleGoalNotifications;
    }()
    /**
     * 目標の進捗を確認し、通知を送信
     * @param {string} userId - ユーザーID
     * @param {string} exerciseId - エクササイズID
     * @param {Object} _newRecord - 新しい記録（将来の拡張用）
     */
    )
  }, {
    key: "checkGoalProgress",
    value: (function () {
      var _checkGoalProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(userId, exerciseId, _newRecord) {
        var _this2 = this;
        var goalProgress, _iterator, _step, _loop, _t6, _t7;
        return _regenerator().w(function (_context7) {
          while (1) switch (_context7.p = _context7.n) {
            case 0:
              _context7.p = 0;
              _context7.n = 1;
              return this.calculateGoalProgress(userId, exerciseId);
            case 1:
              goalProgress = _context7.v;
              if (!(!goalProgress.hasGoals || !goalProgress.progress)) {
                _context7.n = 2;
                break;
              }
              return _context7.a(2);
            case 2:
              _iterator = _createForOfIteratorHelper(goalProgress.progress);
              _context7.p = 3;
              _loop = /*#__PURE__*/_regenerator().m(function _loop() {
                var goal, notifications, milestones, currentMilestone;
                return _regenerator().w(function (_context6) {
                  while (1) switch (_context6.n) {
                    case 0:
                      goal = _step.value;
                      notifications = goal.notifications ? JSON.parse(goal.notifications) : {}; // マイルストーン通知（25%, 50%, 75%, 90%達成時）
                      if (notifications.milestone) {
                        milestones = [25, 50, 75, 90];
                        currentMilestone = milestones.find(function (m) {
                          return goal.progress_percentage >= m && goal.progress_percentage < m + 5;
                        } // 5%の範囲内
                        );
                        if (currentMilestone) {
                          _this2.sendGoalNotification('🎯 マイルストーン達成！', "\u76EE\u6A19\u300C".concat(goal.description, "\u300D\u306E").concat(currentMilestone, "%\u3092\u9054\u6210\u3057\u307E\u3057\u305F\uFF01"));
                        }
                      }

                      // 目標達成通知
                      if (!(goal.is_achieved && notifications.progress)) {
                        _context6.n = 1;
                        break;
                      }
                      _this2.sendGoalNotification('🎉 目標達成！', "\u304A\u3081\u3067\u3068\u3046\u3054\u3056\u3044\u307E\u3059\uFF01\u76EE\u6A19\u300C".concat(goal.description, "\u300D\u3092\u9054\u6210\u3057\u307E\u3057\u305F\uFF01"));

                      // 達成済み目標を非アクティブ化
                      _context6.n = 1;
                      return _this2.deactivateGoal(goal.id);
                    case 1:
                      return _context6.a(2);
                  }
                }, _loop);
              });
              _iterator.s();
            case 4:
              if ((_step = _iterator.n()).done) {
                _context7.n = 6;
                break;
              }
              return _context7.d(_regeneratorValues(_loop()), 5);
            case 5:
              _context7.n = 4;
              break;
            case 6:
              _context7.n = 8;
              break;
            case 7:
              _context7.p = 7;
              _t6 = _context7.v;
              _iterator.e(_t6);
            case 8:
              _context7.p = 8;
              _iterator.f();
              return _context7.f(8);
            case 9:
              _context7.n = 11;
              break;
            case 10:
              _context7.p = 10;
              _t7 = _context7.v;
              (0, _errorHandler.handleError)(_t7, {
                context: 'ProgressTrackingService.checkGoalProgress'
              });
            case 11:
              return _context7.a(2);
          }
        }, _callee6, this, [[3, 7, 8, 9], [0, 10]]);
      }));
      function checkGoalProgress(_x8, _x9, _x0) {
        return _checkGoalProgress.apply(this, arguments);
      }
      return checkGoalProgress;
    }()
    /**
     * 目標通知を送信
     * @param {string} title - 通知タイトル
     * @param {string} message - 通知メッセージ
     */
    )
  }, {
    key: "sendGoalNotification",
    value: function sendGoalNotification(title, message) {
      try {
        // ブラウザ通知
        if ('Notification' in window && Notification.permission === 'granted') {
          new Notification(title, {
            body: message,
            icon: '/favicon-32x32.png',
            tag: 'goal-progress'
          });
        }

        // アプリ内通知
        window.dispatchEvent(new CustomEvent('showNotification', {
          detail: {
            message: "".concat(title, "\n").concat(message),
            type: 'success'
          }
        }));
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ProgressTrackingService.sendGoalNotification'
        });
      }
    }

    /**
     * 目標を非アクティブ化
     * @param {string} goalId - 目標ID
     */
  }, {
    key: "deactivateGoal",
    value: (function () {
      var _deactivateGoal = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(goalId) {
        var _yield$this$supabase$5, error, _t8;
        return _regenerator().w(function (_context8) {
          while (1) switch (_context8.p = _context8.n) {
            case 0:
              _context8.p = 0;
              _context8.n = 1;
              return this.supabase.from('user_goals').update({
                is_active: false,
                completed_at: new Date().toISOString()
              }).eq('id', goalId);
            case 1:
              _yield$this$supabase$5 = _context8.v;
              error = _yield$this$supabase$5.error;
              if (!error) {
                _context8.n = 2;
                break;
              }
              throw error;
            case 2:
              _context8.n = 4;
              break;
            case 3:
              _context8.p = 3;
              _t8 = _context8.v;
              (0, _errorHandler.handleError)(_t8, {
                context: 'ProgressTrackingService.deactivateGoal'
              });
            case 4:
              return _context8.a(2);
          }
        }, _callee7, this, [[0, 3]]);
      }));
      function deactivateGoal(_x1) {
        return _deactivateGoal.apply(this, arguments);
      }
      return deactivateGoal;
    }()
    /**
     * 目標の達成度を計算
     * @param {string} userId - ユーザーID
     * @param {string} exerciseId - エクササイズID
     * @returns {Promise<Object>} 達成度データ
     */
    )
  }, {
    key: "calculateGoalProgress",
    value: (function () {
      var _calculateGoalProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(userId, exerciseId) {
        var _yield$this$supabase$6, goals, goalError, history, latestRecord, progressData, _t9;
        return _regenerator().w(function (_context9) {
          while (1) switch (_context9.p = _context9.n) {
            case 0:
              _context9.p = 0;
              _context9.n = 1;
              return this.supabase.from('user_goals').select('*').eq('user_id', userId).eq('exercise_id', exerciseId).eq('is_active', true);
            case 1:
              _yield$this$supabase$6 = _context9.v;
              goals = _yield$this$supabase$6.data;
              goalError = _yield$this$supabase$6.error;
              if (!goalError) {
                _context9.n = 2;
                break;
              }
              throw goalError;
            case 2:
              if (!(!goals || goals.length === 0)) {
                _context9.n = 3;
                break;
              }
              return _context9.a(2, {
                hasGoals: false
              });
            case 3:
              _context9.n = 4;
              return this.getProgressHistory(userId, exerciseId, 7);
            case 4:
              history = _context9.v;
              if (!(history.length === 0)) {
                _context9.n = 5;
                break;
              }
              return _context9.a(2, {
                hasGoals: true,
                goals: goals,
                progress: []
              });
            case 5:
              latestRecord = history[history.length - 1]; // 各目標の達成度を計算
              progressData = goals.map(function (goal) {
                var currentValue = 0;
                switch (goal.goal_type) {
                  case 'weight':
                    currentValue = Math.max.apply(Math, _toConsumableArray(latestRecord.weights));
                    break;
                  case 'reps':
                    currentValue = Math.max.apply(Math, _toConsumableArray(latestRecord.reps));
                    break;
                  case 'one_rm':
                    currentValue = latestRecord.one_rm;
                    break;
                }
                var progressPercentage = goal.target_value > 0 ? Math.min(100, currentValue / goal.target_value * 100) : 0;
                return _objectSpread(_objectSpread({}, goal), {}, {
                  current_value: currentValue,
                  progress_percentage: Math.round(progressPercentage * 10) / 10,
                  is_achieved: progressPercentage >= 100
                });
              });
              return _context9.a(2, {
                hasGoals: true,
                goals: goals,
                progress: progressData
              });
            case 6:
              _context9.p = 6;
              _t9 = _context9.v;
              (0, _errorHandler.handleError)(_t9, {
                context: 'ProgressTrackingService.calculateGoalProgress'
              });
              return _context9.a(2, {
                hasGoals: false,
                error: _t9.message
              });
          }
        }, _callee8, this, [[0, 6]]);
      }));
      function calculateGoalProgress(_x10, _x11) {
        return _calculateGoalProgress.apply(this, arguments);
      }
      return calculateGoalProgress;
    }()
    /**
     * 月間パフォーマンス分析を生成
     * @param {string} userId - ユーザーID
     * @param {string} exerciseId - エクササイズID
     * @returns {Promise<Object>} 分析データ
     */
    )
  }, {
    key: "generateMonthlyAnalysis",
    value: (function () {
      var _generateMonthlyAnalysis = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9(userId, exerciseId) {
        var history, weeklyData, trend, stats, _t0;
        return _regenerator().w(function (_context0) {
          while (1) switch (_context0.p = _context0.n) {
            case 0:
              _context0.p = 0;
              _context0.n = 1;
              return this.getProgressHistory(userId, exerciseId, 30);
            case 1:
              history = _context0.v;
              if (!(history.length === 0)) {
                _context0.n = 2;
                break;
              }
              return _context0.a(2, {
                hasData: false
              });
            case 2:
              // 週別データを集計
              weeklyData = this.groupByWeek(history); // トレンド分析
              trend = this.analyzeTrend(history); // 統計計算
              stats = this.calculateStats(history);
              return _context0.a(2, {
                hasData: true,
                weeklyData: weeklyData,
                trend: trend,
                stats: stats,
                totalSessions: history.length,
                dateRange: {
                  start: history[0].workout_date,
                  end: history[history.length - 1].workout_date
                }
              });
            case 3:
              _context0.p = 3;
              _t0 = _context0.v;
              (0, _errorHandler.handleError)(_t0, {
                context: 'ProgressTrackingService.generateMonthlyAnalysis'
              });
              return _context0.a(2, {
                hasData: false,
                error: _t0.message
              });
          }
        }, _callee9, this, [[0, 3]]);
      }));
      function generateMonthlyAnalysis(_x12, _x13) {
        return _generateMonthlyAnalysis.apply(this, arguments);
      }
      return generateMonthlyAnalysis;
    }()
    /**
     * データを週別にグループ化
     * @param {Array} history - 履歴データ
     * @returns {Array} 週別データ
     */
    )
  }, {
    key: "groupByWeek",
    value: function groupByWeek(history) {
      var weeks = {};
      history.forEach(function (record) {
        var date = new Date(record.workout_date);
        var weekStart = new Date(date);
        weekStart.setDate(date.getDate() - date.getDay()); // 週の開始を日曜日に設定
        var weekKey = weekStart.toISOString().split('T')[0];
        if (!weeks[weekKey]) {
          weeks[weekKey] = {
            weekStart: weekKey,
            sessions: [],
            maxWeight: 0,
            maxOneRM: 0,
            totalVolume: 0
          };
        }
        weeks[weekKey].sessions.push(record);
        weeks[weekKey].maxWeight = Math.max(weeks[weekKey].maxWeight, Math.max.apply(Math, _toConsumableArray(record.weights)));
        weeks[weekKey].maxOneRM = Math.max(weeks[weekKey].maxOneRM, record.one_rm);

        // ボリューム計算（重量 × 回数 × セット数）
        var sessionVolume = record.weights.reduce(function (sum, weight, index) {
          return sum + weight * record.reps[index];
        }, 0);
        weeks[weekKey].totalVolume += sessionVolume;
      });
      return Object.values(weeks).sort(function (a, b) {
        return new Date(a.weekStart) - new Date(b.weekStart);
      });
    }

    /**
     * トレンド分析を実行
     * @param {Array} history - 履歴データ
     * @returns {Object} トレンド分析結果
     */
  }, {
    key: "analyzeTrend",
    value: function analyzeTrend(history) {
      if (history.length < 2) {
        return {
          direction: 'insufficient_data',
          strength: 0
        };
      }
      var oneRMValues = history.map(function (h) {
        return h.one_rm;
      }).filter(function (rm) {
        return rm > 0;
      });
      if (oneRMValues.length < 2) {
        return {
          direction: 'insufficient_data',
          strength: 0
        };
      }

      // 線形回帰による傾向分析
      var n = oneRMValues.length;
      var x = Array.from({
        length: n
      }, function (_, i) {
        return i;
      });
      var y = oneRMValues;
      var sumX = x.reduce(function (sum, val) {
        return sum + val;
      }, 0);
      var sumY = y.reduce(function (sum, val) {
        return sum + val;
      }, 0);
      var sumXY = x.reduce(function (sum, val, i) {
        return sum + val * y[i];
      }, 0);
      var sumXX = x.reduce(function (sum, val) {
        return sum + val * val;
      }, 0);
      var slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
      var direction = 'stable';
      var strength = Math.abs(slope);
      if (slope > 0.1) {
        direction = 'improving';
      } else if (slope < -0.1) {
        direction = 'declining';
      }
      return {
        direction: direction,
        strength: Math.round(strength * 100) / 100
      };
    }

    /**
     * 統計データを計算
     * @param {Array} history - 履歴データ
     * @returns {Object} 統計データ
     */
  }, {
    key: "calculateStats",
    value: function calculateStats(history) {
      var oneRMValues = history.map(function (h) {
        return h.one_rm;
      }).filter(function (rm) {
        return rm > 0;
      });
      var weights = history.flatMap(function (h) {
        return h.weights;
      });
      var reps = history.flatMap(function (h) {
        return h.reps;
      });
      return {
        maxOneRM: Math.max.apply(Math, _toConsumableArray(oneRMValues)),
        avgOneRM: Math.round(oneRMValues.reduce(function (sum, rm) {
          return sum + rm;
        }, 0) / oneRMValues.length * 10) / 10,
        maxWeight: Math.max.apply(Math, _toConsumableArray(weights)),
        avgWeight: Math.round(weights.reduce(function (sum, w) {
          return sum + w;
        }, 0) / weights.length * 10) / 10,
        maxReps: Math.max.apply(Math, _toConsumableArray(reps)),
        avgReps: Math.round(reps.reduce(function (sum, r) {
          return sum + r;
        }, 0) / reps.length * 10) / 10,
        improvement: oneRMValues.length > 1 ? Math.round((oneRMValues[oneRMValues.length - 1] - oneRMValues[0]) / oneRMValues[0] * 100 * 10) / 10 : 0
      };
    }
  }]);
}(); // シングルトンインスタンスをエクスポート
var progressTrackingService = exports.progressTrackingService = new ProgressTrackingService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,