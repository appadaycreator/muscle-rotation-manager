{"version":3,"names":["_getJestObj","mock","authManager","initialize","jest","fn","isAuthenticated","getCurrentUser","setupEventListeners","updateAuthUI","supabaseService","isAvailable","showNotification","handleError","_MPAInitializer","_interopRequireDefault","require","e","__esModule","_regenerator","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","w","m","defineProperty","_regeneratorDefine","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_typeof","constructor","_require","global","fetch","describe","mpaInitializer","mockAuthManager","mockSupabaseService","beforeEach","clearAllMocks","document","body","innerHTML","authManagerModule","supabaseServiceModule","MPAInitializer","afterEach","_mpaInitializer$destr","_mpaInitializer","destroy","test","expect","isInitialized","toBe","currentPage","toBeDefined","pageName","getCurrentPageName","_callee","_context","mockResolvedValue","email","ok","text","toHaveBeenCalled","_callee2","_context2","not","_callee3","error","_t","_context3","Error","mockRejectedValue","_callee4","result","_context4","mockReturnValue","checkAuthentication","_callee5","_context5","_callee6","consoleErrorSpy","_context6","spyOn","console","mockImplementation","toHaveBeenCalledWith","mockRestore","_callee7","_context7","loadCommonComponents","_callee8","_t2","_context8","_callee9","mockModule","_context9","doMock","loadPageModule","_callee0","_context0","toBeNull","consoleLogSpy","setupMobileMenu","mobileMenuBtn","getElementById","mobileSidebar","setupOnlineStatusMonitoring","window","dispatchEvent","Event","setupErrorHandling","isReady","getCurrentPage","localStorage","clear","enableGuestMode","getItem","exercises","JSON","parse","workouts","guestData","toBeGreaterThan","createdAt","_callee1","_context1","setItem","showLoginPrompt","mainContent","toContain","setupLoginPromptListeners","loginBtn","querySelector","guestBtn","originalSetItem","setupGuestData","toThrow","_callee10","_context10","_callee11","_context11","_callee12","showLoginPromptSpy","_context12","_callee13","_context13"],"sources":["MPAInitializer.test.js"],"sourcesContent":["// MPAInitializer.test.js - MPAInitializerクラスのテスト\n\nimport MPAInitializer from '../../js/core/MPAInitializer.js';\n\n// モックの設定\njest.mock('../../js/modules/authManager.js', () => ({\n  authManager: {\n    initialize: jest.fn(),\n    isAuthenticated: jest.fn(),\n    getCurrentUser: jest.fn(),\n    setupEventListeners: jest.fn(),\n    updateAuthUI: jest.fn(),\n  },\n}));\n\njest.mock('../../js/services/supabaseService.js', () => ({\n  supabaseService: {\n    isAvailable: jest.fn(),\n  },\n}));\n\njest.mock('../../js/utils/helpers.js', () => ({\n  showNotification: jest.fn(),\n  handleError: jest.fn(),\n}));\n\njest.mock('../../js/utils/errorHandler.js', () => ({\n  handleError: jest.fn(),\n}));\n\n// グローバル関数のモック\nglobal.showNotification = jest.fn();\nglobal.handleError = jest.fn();\n\n// fetchのモック\nglobal.fetch = jest.fn();\n\ndescribe('MPAInitializer', () => {\n  let mpaInitializer;\n  let mockAuthManager;\n  let mockSupabaseService;\n\n  beforeEach(() => {\n    // モックのリセット\n    jest.clearAllMocks();\n\n    // DOMのセットアップ\n    document.body.innerHTML = `\n      <div id=\"header-container\"></div>\n      <div id=\"sidebar-container\"></div>\n      <div id=\"footer-container\"></div>\n      <div id=\"main-content\"></div>\n    `;\n\n    // モジュールの取得\n    const authManagerModule = require('../../js/modules/authManager.js');\n    const supabaseServiceModule = require('../../js/services/supabaseService.js');\n\n    mockAuthManager = authManagerModule.authManager;\n    mockSupabaseService = supabaseServiceModule.supabaseService;\n\n    // MPAInitializerのインスタンス取得（シングルトン）\n    mpaInitializer = MPAInitializer;\n  });\n\n  afterEach(() => {\n    if (mpaInitializer) {\n      mpaInitializer.destroy?.();\n    }\n  });\n\n  describe('constructor', () => {\n    test('should initialize with default values', () => {\n      expect(mpaInitializer.isInitialized).toBe(false);\n      expect(mpaInitializer.currentPage).toBeDefined();\n    });\n  });\n\n  describe('getCurrentPageName', () => {\n    test('should return correct page name for root path', () => {\n      // JSDOMの制限により、window.locationの再定義はできない\n      // そのため、getCurrentPageNameメソッドの動作のみ確認\n      const pageName = mpaInitializer.getCurrentPageName();\n      expect(typeof pageName).toBe('string');\n    });\n\n    test('should return correct page name for specific paths', () => {\n      // JSDOMの制限により、window.locationの再定義はできない\n      // そのため、getCurrentPageNameメソッドの動作のみ確認\n      const pageName = mpaInitializer.getCurrentPageName();\n      expect(typeof pageName).toBe('string');\n    });\n\n    test('should return dashboard for unknown paths', () => {\n      // JSDOMの制限により、window.locationの再定義はできない\n      // そのため、getCurrentPageNameメソッドの動作のみ確認\n      const pageName = mpaInitializer.getCurrentPageName();\n      expect(typeof pageName).toBe('string');\n    });\n  });\n\n  describe('initialize', () => {\n    test('should initialize successfully', async () => {\n      mockAuthManager.initialize.mockResolvedValue();\n      mockAuthManager.isAuthenticated.mockResolvedValue(true);\n      mockAuthManager.getCurrentUser.mockResolvedValue({\n        email: 'test@example.com',\n      });\n\n      // fetchのモック\n      global.fetch.mockResolvedValue({\n        ok: true,\n        text: jest.fn().mockResolvedValue('<div>Mock HTML</div>'),\n      });\n\n      // タイムアウトを30秒に設定\n      await mpaInitializer.initialize();\n\n      expect(mpaInitializer.isInitialized).toBe(true);\n      expect(mockAuthManager.initialize).toHaveBeenCalled();\n    }, 30000);\n\n    test('should not initialize if already initialized', async () => {\n      mpaInitializer.isInitialized = true;\n\n      await mpaInitializer.initialize();\n\n      expect(mockAuthManager.initialize).not.toHaveBeenCalled();\n    });\n\n    test('should handle initialization errors', async () => {\n      const error = new Error('Initialization failed');\n      mockAuthManager.initialize.mockRejectedValue(error);\n\n      // エラーハンドリングの動作を確認\n      try {\n        await mpaInitializer.initialize();\n      } catch (error) {\n        // エラーが発生することを確認\n        expect(error).toBeDefined();\n      }\n    });\n  });\n\n  describe('checkAuthentication', () => {\n    test('should return true for authenticated user', async () => {\n      mockAuthManager.isAuthenticated.mockResolvedValue(true);\n      mockAuthManager.getCurrentUser.mockResolvedValue({\n        email: 'test@example.com',\n      });\n      mockSupabaseService.isAvailable.mockReturnValue(true);\n\n      const result = await mpaInitializer.checkAuthentication();\n\n      expect(result).toBe(true);\n      expect(mockAuthManager.isAuthenticated).toHaveBeenCalled();\n    });\n\n    test('should return false for unauthenticated user', async () => {\n      mockAuthManager.isAuthenticated.mockResolvedValue(false);\n      mockSupabaseService.isAvailable.mockReturnValue(true);\n\n      const result = await mpaInitializer.checkAuthentication();\n\n      expect(result).toBe(false);\n    });\n\n    test('should handle authentication errors', async () => {\n      const error = new Error('Auth failed');\n      mockAuthManager.isAuthenticated.mockRejectedValue(error);\n      mockSupabaseService.isAvailable.mockReturnValue(true);\n\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      const result = await mpaInitializer.checkAuthentication();\n\n      expect(result).toBe(false);\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        '❌ Authentication check failed:',\n        error\n      );\n\n      consoleErrorSpy.mockRestore();\n    });\n  });\n\n  describe('loadCommonComponents', () => {\n    test('should load all components successfully', async () => {\n      global.fetch.mockResolvedValue({\n        ok: true,\n        text: jest.fn().mockResolvedValue('<div>Mock HTML</div>'),\n      });\n\n      await mpaInitializer.loadCommonComponents();\n\n      expect(global.fetch).toHaveBeenCalledWith('partials/header.html');\n      expect(global.fetch).toHaveBeenCalledWith('partials/sidebar.html');\n      expect(global.fetch).toHaveBeenCalledWith('partials/footer.html');\n    });\n\n    test('should handle component loading errors', async () => {\n      global.fetch.mockRejectedValue(new Error('Network error'));\n\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      // エラーハンドリングの動作を確認\n      try {\n        await mpaInitializer.loadCommonComponents();\n      } catch (error) {\n        // エラーが発生することを確認\n        expect(error).toBeDefined();\n      }\n\n      consoleErrorSpy.mockRestore();\n    });\n  });\n\n  describe('loadPageModule', () => {\n    test('should load dashboard page module', async () => {\n      const mockModule = { initialize: jest.fn() };\n      jest.doMock('../../js/pages/dashboardPage.js', () => ({\n        default: mockModule,\n      }));\n\n      const result = await mpaInitializer.loadPageModule('dashboard');\n\n      expect(result).toBeDefined();\n    });\n\n    test('should return null for unknown page', async () => {\n      const result = await mpaInitializer.loadPageModule('unknown');\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('setupEventListeners', () => {\n    test('should setup event listeners', () => {\n      const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      mpaInitializer.setupEventListeners();\n\n      expect(consoleLogSpy).toHaveBeenCalledWith(\n        '🔄 Setting up event listeners...'\n      );\n\n      consoleLogSpy.mockRestore();\n    });\n  });\n\n  describe('setupMobileMenu', () => {\n    test('should setup mobile menu', () => {\n      document.body.innerHTML = `\n        <button id=\"mobile-menu-btn\"></button>\n        <div id=\"mobile-sidebar\">\n          <button id=\"mobile-sidebar-close\"></button>\n        </div>\n      `;\n\n      mpaInitializer.setupMobileMenu();\n\n      const mobileMenuBtn = document.getElementById('mobile-menu-btn');\n      const mobileSidebar = document.getElementById('mobile-sidebar');\n\n      expect(mobileMenuBtn).toBeDefined();\n      expect(mobileSidebar).toBeDefined();\n    });\n  });\n\n  describe('setupOnlineStatusMonitoring', () => {\n    test('should setup online status monitoring', () => {\n      const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      mpaInitializer.setupOnlineStatusMonitoring();\n\n      // オンラインイベントを発火\n      window.dispatchEvent(new Event('online'));\n      expect(consoleLogSpy).toHaveBeenCalledWith('🌐 Online status restored');\n\n      // オフラインイベントを発火\n      window.dispatchEvent(new Event('offline'));\n      expect(consoleLogSpy).toHaveBeenCalledWith('📱 Offline status detected');\n\n      consoleLogSpy.mockRestore();\n    });\n  });\n\n  describe('setupErrorHandling', () => {\n    test('should setup error handling', () => {\n      // エラーハンドリングの設定を確認\n      mpaInitializer.setupErrorHandling();\n\n      // エラーハンドリングが設定されていることを確認\n      expect(typeof mpaInitializer.setupErrorHandling).toBe('function');\n    });\n  });\n\n  describe('isReady', () => {\n    test('should return initialization status', () => {\n      // 初期化状態を確認\n      const isReady = mpaInitializer.isReady();\n      expect(typeof isReady).toBe('boolean');\n\n      // 初期化状態を変更してテスト\n      mpaInitializer.isInitialized = true;\n      expect(mpaInitializer.isReady()).toBe(true);\n    });\n  });\n\n  describe('getCurrentPage', () => {\n    test('should return current page', () => {\n      expect(mpaInitializer.getCurrentPage()).toBeDefined();\n    });\n  });\n\n  describe('Guest Mode', () => {\n    beforeEach(() => {\n      // ローカルストレージをクリア\n      localStorage.clear();\n    });\n\n    test('should enable guest mode and setup sample data', () => {\n      // ゲストモードを有効化\n      mpaInitializer.enableGuestMode();\n\n      // ゲストモードフラグが設定されているかチェック\n      expect(localStorage.getItem('guestMode')).toBe('true');\n      expect(localStorage.getItem('guestModeEnabledAt')).toBeDefined();\n\n      // サンプルデータが設定されているかチェック\n      const exercises = JSON.parse(localStorage.getItem('exercises') || '[]');\n      const workouts = JSON.parse(localStorage.getItem('workouts') || '[]');\n      const guestData = JSON.parse(localStorage.getItem('guestModeData') || '{}');\n\n      expect(exercises.length).toBeGreaterThan(0);\n      expect(workouts.length).toBeGreaterThan(0);\n      expect(guestData.exercises).toBeDefined();\n      expect(guestData.workouts).toBeDefined();\n      expect(guestData.createdAt).toBeDefined();\n    });\n\n    test('should check authentication with guest mode enabled', async () => {\n      // ゲストモードを有効化\n      localStorage.setItem('guestMode', 'true');\n\n      const result = await mpaInitializer.checkAuthentication();\n\n      expect(result).toBe(true);\n      expect(mockAuthManager.isAuthenticated).not.toHaveBeenCalled();\n    });\n\n    test('should show login prompt with guest mode option', () => {\n      // DOMをセットアップ\n      document.body.innerHTML = '<div id=\"main-content\"></div>';\n\n      mpaInitializer.showLoginPrompt();\n\n      const mainContent = document.getElementById('main-content');\n      expect(mainContent.innerHTML).toContain('ログインが必要です');\n      expect(mainContent.innerHTML).toContain('ゲストモードで体験');\n      expect(mainContent.innerHTML).toContain('ホームに戻る');\n    });\n\n    test('should setup login prompt listeners', () => {\n      // DOMをセットアップ\n      document.body.innerHTML = `\n        <div id=\"main-content\">\n          <button onclick=\"this.showAuthModal('login')\"></button>\n          <button onclick=\"this.enableGuestMode()\"></button>\n        </div>\n      `;\n\n      mpaInitializer.setupLoginPromptListeners();\n\n      // イベントリスナーが設定されているかチェック\n      const loginBtn = document.querySelector('[onclick*=\"showAuthModal\"]');\n      const guestBtn = document.querySelector('[onclick*=\"enableGuestMode\"]');\n\n      expect(loginBtn).toBeDefined();\n      expect(guestBtn).toBeDefined();\n    });\n\n    test('should handle guest mode data setup errors', () => {\n      // localStorageを無効化してエラーを発生させる\n      const originalSetItem = localStorage.setItem;\n      localStorage.setItem = jest.fn(() => {\n        throw new Error('Storage error');\n      });\n\n      // エラーが発生してもクラッシュしないことを確認\n      expect(() => {\n        mpaInitializer.setupGuestData();\n      }).not.toThrow();\n\n      // localStorageを復元\n      localStorage.setItem = originalSetItem;\n    });\n  });\n\n  describe('Authentication Check', () => {\n    test('should skip authentication check when Supabase is not available', async () => {\n      mockSupabaseService.isAvailable.mockReturnValue(false);\n\n      const result = await mpaInitializer.checkAuthentication();\n\n      expect(result).toBe(true);\n      expect(mockAuthManager.isAuthenticated).not.toHaveBeenCalled();\n    });\n\n    test('should return true when user is authenticated', async () => {\n      mockSupabaseService.isAvailable.mockReturnValue(true);\n      mockAuthManager.isAuthenticated.mockResolvedValue(true);\n      mockAuthManager.getCurrentUser.mockResolvedValue({ email: 'test@example.com' });\n\n      const result = await mpaInitializer.checkAuthentication();\n\n      expect(result).toBe(true);\n      expect(mockAuthManager.isAuthenticated).toHaveBeenCalled();\n    });\n\n    test('should show login prompt when user is not authenticated', async () => {\n      mockSupabaseService.isAvailable.mockReturnValue(true);\n      mockAuthManager.isAuthenticated.mockResolvedValue(false);\n\n      const showLoginPromptSpy = jest.spyOn(mpaInitializer, 'showLoginPrompt');\n\n      const result = await mpaInitializer.checkAuthentication();\n\n      expect(result).toBe(false);\n      expect(showLoginPromptSpy).toHaveBeenCalled();\n    });\n\n    test('should handle authentication check errors', async () => {\n      mockSupabaseService.isAvailable.mockReturnValue(true);\n      mockAuthManager.isAuthenticated.mockRejectedValue(new Error('Auth error'));\n\n      const showLoginPromptSpy = jest.spyOn(mpaInitializer, 'showLoginPrompt');\n\n      const result = await mpaInitializer.checkAuthentication();\n\n      expect(result).toBe(false);\n      expect(showLoginPromptSpy).toHaveBeenCalled();\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}