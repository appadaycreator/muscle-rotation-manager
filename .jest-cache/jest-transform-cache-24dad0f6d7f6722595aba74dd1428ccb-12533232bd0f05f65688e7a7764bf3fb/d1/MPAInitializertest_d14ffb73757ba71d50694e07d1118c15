5c56a6ea8b5c8958fced2f55fd5997a6
"use strict";

// モックの設定
_getJestObj().mock('../../js/modules/authManager.js', function () {
  return {
    authManager: {
      initialize: jest.fn(),
      isAuthenticated: jest.fn(),
      getCurrentUser: jest.fn(),
      setupEventListeners: jest.fn(),
      updateAuthUI: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/services/supabaseService.js', function () {
  return {
    supabaseService: {
      isAvailable: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    showNotification: jest.fn(),
    handleError: jest.fn()
  };
});
_getJestObj().mock('../../js/utils/errorHandler.js', function () {
  return {
    handleError: jest.fn()
  };
});

// グローバル関数のモック
var _MPAInitializer = _interopRequireDefault(require("../../js/core/MPAInitializer.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
} // MPAInitializer.test.js - MPAInitializerクラスのテスト
global.showNotification = jest.fn();
global.handleError = jest.fn();

// fetchのモック
global.fetch = jest.fn();
describe('MPAInitializer', function () {
  var mpaInitializer;
  var mockAuthManager;
  var mockSupabaseService;
  beforeEach(function () {
    // モックのリセット
    jest.clearAllMocks();

    // DOMのセットアップ
    document.body.innerHTML = "\n      <div id=\"header-container\"></div>\n      <div id=\"sidebar-container\"></div>\n      <div id=\"footer-container\"></div>\n      <div id=\"main-content\"></div>\n    ";

    // モジュールの取得
    var authManagerModule = require('../../js/modules/authManager.js');
    var supabaseServiceModule = require('../../js/services/supabaseService.js');
    mockAuthManager = authManagerModule.authManager;
    mockSupabaseService = supabaseServiceModule.supabaseService;

    // MPAInitializerのインスタンス取得（シングルトン）
    mpaInitializer = _MPAInitializer["default"];
  });
  afterEach(function () {
    if (mpaInitializer) {
      var _mpaInitializer$destr, _mpaInitializer;
      (_mpaInitializer$destr = (_mpaInitializer = mpaInitializer).destroy) === null || _mpaInitializer$destr === void 0 || _mpaInitializer$destr.call(_mpaInitializer);
    }
  });
  describe('constructor', function () {
    test('should initialize with default values', function () {
      expect(mpaInitializer.isInitialized).toBe(false);
      expect(mpaInitializer.currentPage).toBeDefined();
    });
  });
  describe('getCurrentPageName', function () {
    test('should return correct page name for root path', function () {
      // JSDOMの制限により、window.locationの再定義はできない
      // そのため、getCurrentPageNameメソッドの動作のみ確認
      var pageName = mpaInitializer.getCurrentPageName();
      expect(_typeof(pageName)).toBe('string');
    });
    test('should return correct page name for specific paths', function () {
      // JSDOMの制限により、window.locationの再定義はできない
      // そのため、getCurrentPageNameメソッドの動作のみ確認
      var pageName = mpaInitializer.getCurrentPageName();
      expect(_typeof(pageName)).toBe('string');
    });
    test('should return dashboard for unknown paths', function () {
      // JSDOMの制限により、window.locationの再定義はできない
      // そのため、getCurrentPageNameメソッドの動作のみ確認
      var pageName = mpaInitializer.getCurrentPageName();
      expect(_typeof(pageName)).toBe('string');
    });
  });
  describe('initialize', function () {
    test('should initialize successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            mockAuthManager.initialize.mockResolvedValue();
            mockAuthManager.isAuthenticated.mockResolvedValue(true);
            mockAuthManager.getCurrentUser.mockResolvedValue({
              email: 'test@example.com'
            });

            // fetchのモック
            global.fetch.mockResolvedValue({
              ok: true,
              text: jest.fn().mockResolvedValue('<div>Mock HTML</div>')
            });

            // タイムアウトを30秒に設定
            _context.n = 1;
            return mpaInitializer.initialize();
          case 1:
            expect(mpaInitializer.isInitialized).toBe(true);
            expect(mockAuthManager.initialize).toHaveBeenCalled();
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })), 30000);
    test('should not initialize if already initialized', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            mpaInitializer.isInitialized = true;
            _context2.n = 1;
            return mpaInitializer.initialize();
          case 1:
            expect(mockAuthManager.initialize).not.toHaveBeenCalled();
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    test('should handle initialization errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var error, _t;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.p = _context3.n) {
          case 0:
            error = new Error('Initialization failed');
            mockAuthManager.initialize.mockRejectedValue(error);

            // エラーハンドリングの動作を確認
            _context3.p = 1;
            _context3.n = 2;
            return mpaInitializer.initialize();
          case 2:
            _context3.n = 4;
            break;
          case 3:
            _context3.p = 3;
            _t = _context3.v;
            // エラーが発生することを確認
            expect(_t).toBeDefined();
          case 4:
            return _context3.a(2);
        }
      }, _callee3, null, [[1, 3]]);
    })));
  });
  describe('checkAuthentication', function () {
    test('should return true for authenticated user', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var result;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            mockAuthManager.isAuthenticated.mockResolvedValue(true);
            mockAuthManager.getCurrentUser.mockResolvedValue({
              email: 'test@example.com'
            });
            mockSupabaseService.isAvailable.mockReturnValue(true);
            _context4.n = 1;
            return mpaInitializer.checkAuthentication();
          case 1:
            result = _context4.v;
            expect(result).toBe(true);
            expect(mockAuthManager.isAuthenticated).toHaveBeenCalled();
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    test('should return false for unauthenticated user', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var result;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            mockAuthManager.isAuthenticated.mockResolvedValue(false);
            mockSupabaseService.isAvailable.mockReturnValue(true);
            _context5.n = 1;
            return mpaInitializer.checkAuthentication();
          case 1:
            result = _context5.v;
            expect(result).toBe(false);
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
    test('should handle authentication errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var error, consoleErrorSpy, result;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            error = new Error('Auth failed');
            mockAuthManager.isAuthenticated.mockRejectedValue(error);
            mockSupabaseService.isAvailable.mockReturnValue(true);
            consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            _context6.n = 1;
            return mpaInitializer.checkAuthentication();
          case 1:
            result = _context6.v;
            expect(result).toBe(false);
            expect(consoleErrorSpy).toHaveBeenCalledWith('❌ Authentication check failed:', error);
            consoleErrorSpy.mockRestore();
          case 2:
            return _context6.a(2);
        }
      }, _callee6);
    })));
  });
  describe('loadCommonComponents', function () {
    test('should load all components successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            global.fetch.mockResolvedValue({
              ok: true,
              text: jest.fn().mockResolvedValue('<div>Mock HTML</div>')
            });
            _context7.n = 1;
            return mpaInitializer.loadCommonComponents();
          case 1:
            expect(global.fetch).toHaveBeenCalledWith('partials/header.html');
            expect(global.fetch).toHaveBeenCalledWith('partials/sidebar.html');
            expect(global.fetch).toHaveBeenCalledWith('partials/footer.html');
          case 2:
            return _context7.a(2);
        }
      }, _callee7);
    })));
    test('should handle component loading errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
      var consoleErrorSpy, _t2;
      return _regenerator().w(function (_context8) {
        while (1) switch (_context8.p = _context8.n) {
          case 0:
            global.fetch.mockRejectedValue(new Error('Network error'));
            consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(); // エラーハンドリングの動作を確認
            _context8.p = 1;
            _context8.n = 2;
            return mpaInitializer.loadCommonComponents();
          case 2:
            _context8.n = 4;
            break;
          case 3:
            _context8.p = 3;
            _t2 = _context8.v;
            // エラーが発生することを確認
            expect(_t2).toBeDefined();
          case 4:
            consoleErrorSpy.mockRestore();
          case 5:
            return _context8.a(2);
        }
      }, _callee8, null, [[1, 3]]);
    })));
  });
  describe('loadPageModule', function () {
    test('should load dashboard page module', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {
      var mockModule, result;
      return _regenerator().w(function (_context9) {
        while (1) switch (_context9.n) {
          case 0:
            mockModule = {
              initialize: jest.fn()
            };
            jest.doMock('../../js/pages/dashboardPage.js', function () {
              return {
                "default": mockModule
              };
            });
            _context9.n = 1;
            return mpaInitializer.loadPageModule('dashboard');
          case 1:
            result = _context9.v;
            expect(result).toBeDefined();
          case 2:
            return _context9.a(2);
        }
      }, _callee9);
    })));
    test('should return null for unknown page', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {
      var result;
      return _regenerator().w(function (_context0) {
        while (1) switch (_context0.n) {
          case 0:
            _context0.n = 1;
            return mpaInitializer.loadPageModule('unknown');
          case 1:
            result = _context0.v;
            expect(result).toBeNull();
          case 2:
            return _context0.a(2);
        }
      }, _callee0);
    })));
  });
  describe('setupEventListeners', function () {
    test('should setup event listeners', function () {
      var consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
      mpaInitializer.setupEventListeners();
      expect(consoleLogSpy).toHaveBeenCalledWith('🔄 Setting up event listeners...');
      consoleLogSpy.mockRestore();
    });
  });
  describe('setupMobileMenu', function () {
    test('should setup mobile menu', function () {
      document.body.innerHTML = "\n        <button id=\"mobile-menu-btn\"></button>\n        <div id=\"mobile-sidebar\">\n          <button id=\"mobile-sidebar-close\"></button>\n        </div>\n      ";
      mpaInitializer.setupMobileMenu();
      var mobileMenuBtn = document.getElementById('mobile-menu-btn');
      var mobileSidebar = document.getElementById('mobile-sidebar');
      expect(mobileMenuBtn).toBeDefined();
      expect(mobileSidebar).toBeDefined();
    });
  });
  describe('setupOnlineStatusMonitoring', function () {
    test('should setup online status monitoring', function () {
      var consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
      mpaInitializer.setupOnlineStatusMonitoring();

      // オンラインイベントを発火
      window.dispatchEvent(new Event('online'));
      expect(consoleLogSpy).toHaveBeenCalledWith('🌐 Online status restored');

      // オフラインイベントを発火
      window.dispatchEvent(new Event('offline'));
      expect(consoleLogSpy).toHaveBeenCalledWith('📱 Offline status detected');
      consoleLogSpy.mockRestore();
    });
  });
  describe('setupErrorHandling', function () {
    test('should setup error handling', function () {
      // エラーハンドリングの設定を確認
      mpaInitializer.setupErrorHandling();

      // エラーハンドリングが設定されていることを確認
      expect(_typeof(mpaInitializer.setupErrorHandling)).toBe('function');
    });
  });
  describe('isReady', function () {
    test('should return initialization status', function () {
      // 初期化状態を確認
      var isReady = mpaInitializer.isReady();
      expect(_typeof(isReady)).toBe('boolean');

      // 初期化状態を変更してテスト
      mpaInitializer.isInitialized = true;
      expect(mpaInitializer.isReady()).toBe(true);
    });
  });
  describe('getCurrentPage', function () {
    test('should return current page', function () {
      expect(mpaInitializer.getCurrentPage()).toBeDefined();
    });
  });
  describe('Guest Mode', function () {
    beforeEach(function () {
      // ローカルストレージをクリア
      localStorage.clear();
    });
    test('should enable guest mode and setup sample data', function () {
      // ゲストモードを有効化
      mpaInitializer.enableGuestMode();

      // ゲストモードフラグが設定されているかチェック
      expect(localStorage.getItem('guestMode')).toBe('true');
      expect(localStorage.getItem('guestModeEnabledAt')).toBeDefined();

      // サンプルデータが設定されているかチェック
      var exercises = JSON.parse(localStorage.getItem('exercises') || '[]');
      var workouts = JSON.parse(localStorage.getItem('workouts') || '[]');
      var guestData = JSON.parse(localStorage.getItem('guestModeData') || '{}');
      expect(exercises.length).toBeGreaterThan(0);
      expect(workouts.length).toBeGreaterThan(0);
      expect(guestData.exercises).toBeDefined();
      expect(guestData.workouts).toBeDefined();
      expect(guestData.createdAt).toBeDefined();
    });
    test('should check authentication with guest mode enabled', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1() {
      var result;
      return _regenerator().w(function (_context1) {
        while (1) switch (_context1.n) {
          case 0:
            // ゲストモードを有効化
            localStorage.setItem('guestMode', 'true');
            _context1.n = 1;
            return mpaInitializer.checkAuthentication();
          case 1:
            result = _context1.v;
            expect(result).toBe(true);
            expect(mockAuthManager.isAuthenticated).not.toHaveBeenCalled();
          case 2:
            return _context1.a(2);
        }
      }, _callee1);
    })));
    test('should show login prompt with guest mode option', function () {
      // DOMをセットアップ
      document.body.innerHTML = '<div id="main-content"></div>';
      mpaInitializer.showLoginPrompt();
      var mainContent = document.getElementById('main-content');
      expect(mainContent.innerHTML).toContain('ログインが必要です');
      expect(mainContent.innerHTML).toContain('ゲストモードで体験');
      expect(mainContent.innerHTML).toContain('ホームに戻る');
    });
    test('should setup login prompt listeners', function () {
      // DOMをセットアップ
      document.body.innerHTML = "\n        <div id=\"main-content\">\n          <button onclick=\"this.showAuthModal('login')\"></button>\n          <button onclick=\"this.enableGuestMode()\"></button>\n        </div>\n      ";
      mpaInitializer.setupLoginPromptListeners();

      // イベントリスナーが設定されているかチェック
      var loginBtn = document.querySelector('[onclick*="showAuthModal"]');
      var guestBtn = document.querySelector('[onclick*="enableGuestMode"]');
      expect(loginBtn).toBeDefined();
      expect(guestBtn).toBeDefined();
    });
    test('should handle guest mode data setup errors', function () {
      // localStorageを無効化してエラーを発生させる
      var originalSetItem = localStorage.setItem;
      localStorage.setItem = jest.fn(function () {
        throw new Error('Storage error');
      });

      // エラーが発生してもクラッシュしないことを確認
      expect(function () {
        mpaInitializer.setupGuestData();
      }).not.toThrow();

      // localStorageを復元
      localStorage.setItem = originalSetItem;
    });
  });
  describe('Authentication Check', function () {
    test('should skip authentication check when Supabase is not available', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10() {
      var result;
      return _regenerator().w(function (_context10) {
        while (1) switch (_context10.n) {
          case 0:
            mockSupabaseService.isAvailable.mockReturnValue(false);
            _context10.n = 1;
            return mpaInitializer.checkAuthentication();
          case 1:
            result = _context10.v;
            expect(result).toBe(true);
            expect(mockAuthManager.isAuthenticated).not.toHaveBeenCalled();
          case 2:
            return _context10.a(2);
        }
      }, _callee10);
    })));
    test('should return true when user is authenticated', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11() {
      var result;
      return _regenerator().w(function (_context11) {
        while (1) switch (_context11.n) {
          case 0:
            mockSupabaseService.isAvailable.mockReturnValue(true);
            mockAuthManager.isAuthenticated.mockResolvedValue(true);
            mockAuthManager.getCurrentUser.mockResolvedValue({
              email: 'test@example.com'
            });
            _context11.n = 1;
            return mpaInitializer.checkAuthentication();
          case 1:
            result = _context11.v;
            expect(result).toBe(true);
            expect(mockAuthManager.isAuthenticated).toHaveBeenCalled();
          case 2:
            return _context11.a(2);
        }
      }, _callee11);
    })));
    test('should show login prompt when user is not authenticated', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee12() {
      var showLoginPromptSpy, result;
      return _regenerator().w(function (_context12) {
        while (1) switch (_context12.n) {
          case 0:
            mockSupabaseService.isAvailable.mockReturnValue(true);
            mockAuthManager.isAuthenticated.mockResolvedValue(false);
            showLoginPromptSpy = jest.spyOn(mpaInitializer, 'showLoginPrompt');
            _context12.n = 1;
            return mpaInitializer.checkAuthentication();
          case 1:
            result = _context12.v;
            expect(result).toBe(false);
            expect(showLoginPromptSpy).toHaveBeenCalled();
          case 2:
            return _context12.a(2);
        }
      }, _callee12);
    })));
    test('should handle authentication check errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee13() {
      var showLoginPromptSpy, result;
      return _regenerator().w(function (_context13) {
        while (1) switch (_context13.n) {
          case 0:
            mockSupabaseService.isAvailable.mockReturnValue(true);
            mockAuthManager.isAuthenticated.mockRejectedValue(new Error('Auth error'));
            showLoginPromptSpy = jest.spyOn(mpaInitializer, 'showLoginPrompt');
            _context13.n = 1;
            return mpaInitializer.checkAuthentication();
          case 1:
            result = _context13.v;
            expect(result).toBe(false);
            expect(showLoginPromptSpy).toHaveBeenCalled();
          case 2:
            return _context13.a(2);
        }
      }, _callee13);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,