9c95957601caa4bc5a9020baec9522c8
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onboardingManager = exports.OnboardingManager = void 0;
var _helpers = require("./helpers.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // onboardingManager.js - オンボーディング管理ユーティリティ
/**
 * オンボーディング管理クラス
 * 初回ユーザー向けのガイド機能を提供
 */
var OnboardingManager = exports.OnboardingManager = /*#__PURE__*/function () {
  function OnboardingManager() {
    _classCallCheck(this, OnboardingManager);
    this.storageKey = 'muscleRotationOnboarding';
    this.currentStep = 0;
    this.steps = [{
      id: 'welcome',
      title: 'MuscleRotationManagerへようこそ！',
      content: 'このアプリで筋トレの記録と分析を効率的に行いましょう。',
      target: null,
      position: 'center'
    }, {
      id: 'dashboard',
      title: 'ダッシュボード',
      content: 'ここで全体の進捗と統計を確認できます。',
      target: '#dashboard-link',
      position: 'bottom'
    }, {
      id: 'workout',
      title: 'ワークアウト記録',
      content: '新しいワークアウトを記録して進捗を追跡しましょう。',
      target: '#workout-link',
      position: 'bottom'
    }, {
      id: 'exercises',
      title: 'エクササイズデータベース',
      content: '豊富なエクササイズから選択して、カスタムエクササイズも追加できます。',
      target: '#exercises-link',
      position: 'bottom'
    }, {
      id: 'analysis',
      title: '分析・レポート',
      content: '詳細な分析とレポートでトレーニングの効果を確認できます。',
      target: '#analysis-link',
      position: 'bottom'
    }, {
      id: 'calendar',
      title: 'カレンダー',
      content: 'トレーニング履歴をカレンダー形式で確認できます。',
      target: '#calendar-link',
      position: 'bottom'
    }];
    this.isActive = false;
    this.overlay = null;
    this.tooltip = null;
  }

  /**
   * オンボーディングを開始
   */
  return _createClass(OnboardingManager, [{
    key: "startOnboarding",
    value: function startOnboarding() {
      try {
        var hasCompleted = this.hasCompletedOnboarding();
        if (hasCompleted) {
          console.log('Onboarding already completed');
          return;
        }
        this.isActive = true;
        this.currentStep = 0;
        this.createOverlay();
        this.showStep(this.currentStep);
        console.log('Onboarding started');
      } catch (error) {
        console.error('Failed to start onboarding:', error);
      }
    }

    /**
     * オンボーディングが完了済みかチェック
     * @returns {boolean} 完了済みかどうか
     */
  }, {
    key: "hasCompletedOnboarding",
    value: function hasCompletedOnboarding() {
      try {
        var completed = localStorage.getItem("".concat(this.storageKey, "_completed"));
        return completed === 'true';
      } catch (error) {
        console.warn('Failed to check onboarding status:', error);
        return false;
      }
    }

    /**
     * オーバーレイを作成
     */
  }, {
    key: "createOverlay",
    value: function createOverlay() {
      // 既存のオーバーレイを削除
      this.removeOverlay();
      this.overlay = document.createElement('div');
      this.overlay.id = 'onboarding-overlay';
      this.overlay.style.cssText = "\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-color: rgba(0, 0, 0, 0.7);\n      z-index: 9999;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    ";
      document.body.appendChild(this.overlay);
    }

    /**
     * ステップを表示
     * @param {number} stepIndex - ステップインデックス
     */
  }, {
    key: "showStep",
    value: function showStep(stepIndex) {
      if (stepIndex >= this.steps.length) {
        this.completeOnboarding();
        return;
      }
      var step = this.steps[stepIndex];
      this.createTooltip(step);
      this.highlightTarget(step);
    }

    /**
     * ツールチップを作成
     * @param {Object} step - ステップ情報
     */
  }, {
    key: "createTooltip",
    value: function createTooltip(step) {
      var _this = this;
      // 既存のツールチップを削除
      this.removeTooltip();
      this.tooltip = document.createElement('div');
      this.tooltip.id = 'onboarding-tooltip';
      this.tooltip.style.cssText = "\n      position: fixed;\n      background: white;\n      border-radius: 8px;\n      padding: 20px;\n      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);\n      max-width: 400px;\n      z-index: 10000;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    ";
      this.tooltip.innerHTML = "\n      <div style=\"margin-bottom: 15px;\">\n        <h3 style=\"margin: 0 0 10px 0; color: #1f2937; font-size: 18px; font-weight: 600;\">\n          ".concat(step.title, "\n        </h3>\n        <p style=\"margin: 0; color: #6b7280; font-size: 14px; line-height: 1.5;\">\n          ").concat(step.content, "\n        </p>\n      </div>\n      <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n        <div style=\"color: #9ca3af; font-size: 12px;\">\n          ").concat(this.currentStep + 1, " / ").concat(this.steps.length, "\n        </div>\n        <div>\n          ").concat(this.currentStep > 0 ? "\n            <button id=\"onboarding-prev\" style=\"\n              background: #f3f4f6;\n              border: none;\n              padding: 8px 16px;\n              border-radius: 6px;\n              margin-right: 8px;\n              cursor: pointer;\n              font-size: 14px;\n            \">\u524D\u3078</button>\n          " : '', "\n          <button id=\"onboarding-next\" style=\"\n            background: #3b82f6;\n            color: white;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 6px;\n            cursor: pointer;\n            font-size: 14px;\n          \">").concat(this.currentStep === this.steps.length - 1 ? '完了' : '次へ', "</button>\n        </div>\n      </div>\n    ");

      // イベントリスナーを追加
      var nextBtn = this.tooltip.querySelector('#onboarding-next');
      var prevBtn = this.tooltip.querySelector('#onboarding-prev');
      if (nextBtn) {
        nextBtn.addEventListener('click', function () {
          return _this.nextStep();
        });
      }
      if (prevBtn) {
        prevBtn.addEventListener('click', function () {
          return _this.prevStep();
        });
      }
      document.body.appendChild(this.tooltip);
      this.positionTooltip(step);
    }

    /**
     * ツールチップを配置
     * @param {Object} step - ステップ情報
     */
  }, {
    key: "positionTooltip",
    value: function positionTooltip(step) {
      if (!this.tooltip) return;
      if (step.target) {
        var targetElement = document.querySelector(step.target);
        if (targetElement) {
          var rect = targetElement.getBoundingClientRect();
          var tooltipRect = this.tooltip.getBoundingClientRect();
          var top, left;
          switch (step.position) {
            case 'top':
              top = rect.top - tooltipRect.height - 10;
              left = rect.left + (rect.width - tooltipRect.width) / 2;
              break;
            case 'bottom':
              top = rect.bottom + 10;
              left = rect.left + (rect.width - tooltipRect.width) / 2;
              break;
            case 'left':
              top = rect.top + (rect.height - tooltipRect.height) / 2;
              left = rect.left - tooltipRect.width - 10;
              break;
            case 'right':
              top = rect.top + (rect.height - tooltipRect.height) / 2;
              left = rect.right + 10;
              break;
            default:
              top = rect.bottom + 10;
              left = rect.left + (rect.width - tooltipRect.width) / 2;
          }

          // 画面外に出ないように調整
          top = Math.max(10, Math.min(top, window.innerHeight - tooltipRect.height - 10));
          left = Math.max(10, Math.min(left, window.innerWidth - tooltipRect.width - 10));
          this.tooltip.style.top = "".concat(top, "px");
          this.tooltip.style.left = "".concat(left, "px");
        }
      } else {
        // 中央配置
        this.tooltip.style.top = '50%';
        this.tooltip.style.left = '50%';
        this.tooltip.style.transform = 'translate(-50%, -50%)';
      }
    }

    /**
     * ターゲット要素をハイライト
     * @param {Object} step - ステップ情報
     */
  }, {
    key: "highlightTarget",
    value: function highlightTarget(step) {
      if (!step.target) return;
      var targetElement = document.querySelector(step.target);
      if (targetElement) {
        targetElement.style.position = 'relative';
        targetElement.style.zIndex = '10001';
        targetElement.style.outline = '2px solid #3b82f6';
        targetElement.style.outlineOffset = '2px';
        targetElement.style.borderRadius = '4px';
      }
    }

    /**
     * ハイライトを削除
     */
  }, {
    key: "removeHighlight",
    value: function removeHighlight() {
      var highlightedElements = document.querySelectorAll('[style*="outline: 2px solid #3b82f6"]');
      highlightedElements.forEach(function (element) {
        element.style.outline = '';
        element.style.outlineOffset = '';
        element.style.borderRadius = '';
        element.style.zIndex = '';
      });
    }

    /**
     * 次のステップへ
     */
  }, {
    key: "nextStep",
    value: function nextStep() {
      this.removeHighlight();
      this.currentStep++;
      this.showStep(this.currentStep);
    }

    /**
     * 前のステップへ
     */
  }, {
    key: "prevStep",
    value: function prevStep() {
      this.removeHighlight();
      this.currentStep--;
      this.showStep(this.currentStep);
    }

    /**
     * オンボーディングをスキップ
     */
  }, {
    key: "skipOnboarding",
    value: function skipOnboarding() {
      this.completeOnboarding();
      (0, _helpers.showNotification)('オンボーディングをスキップしました', 'info');
    }

    /**
     * オンボーディングを完了
     */
  }, {
    key: "completeOnboarding",
    value: function completeOnboarding() {
      try {
        localStorage.setItem("".concat(this.storageKey, "_completed"), 'true');
        localStorage.setItem("".concat(this.storageKey, "_completedAt"), new Date().toISOString());
        this.removeOverlay();
        this.removeTooltip();
        this.removeHighlight();
        this.isActive = false;
        (0, _helpers.showNotification)('オンボーディングが完了しました！', 'success');
        console.log('Onboarding completed');
      } catch (error) {
        console.error('Failed to complete onboarding:', error);
      }
    }

    /**
     * オーバーレイを削除
     */
  }, {
    key: "removeOverlay",
    value: function removeOverlay() {
      if (this.overlay) {
        this.overlay.remove();
        this.overlay = null;
      }
    }

    /**
     * ツールチップを削除
     */
  }, {
    key: "removeTooltip",
    value: function removeTooltip() {
      if (this.tooltip) {
        this.tooltip.remove();
        this.tooltip = null;
      }
    }

    /**
     * オンボーディングをリセット
     */
  }, {
    key: "resetOnboarding",
    value: function resetOnboarding() {
      try {
        localStorage.removeItem("".concat(this.storageKey, "_completed"));
        localStorage.removeItem("".concat(this.storageKey, "_completedAt"));
        console.log('Onboarding reset');
      } catch (error) {
        console.error('Failed to reset onboarding:', error);
      }
    }

    /**
     * オンボーディング状態を取得
     * @returns {Object} オンボーディング状態
     */
  }, {
    key: "getOnboardingStatus",
    value: function getOnboardingStatus() {
      try {
        var completed = this.hasCompletedOnboarding();
        var completedAt = localStorage.getItem("".concat(this.storageKey, "_completedAt"));
        return {
          completed: completed,
          completedAt: completedAt ? new Date(completedAt) : null,
          isActive: this.isActive,
          currentStep: this.currentStep,
          totalSteps: this.steps.length
        };
      } catch (error) {
        console.error('Failed to get onboarding status:', error);
        return {
          completed: false,
          completedAt: null,
          isActive: false,
          currentStep: 0,
          totalSteps: this.steps.length
        };
      }
    }
  }]);
}(); // シングルトンインスタンスをエクスポート
var onboardingManager = exports.onboardingManager = new OnboardingManager();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,