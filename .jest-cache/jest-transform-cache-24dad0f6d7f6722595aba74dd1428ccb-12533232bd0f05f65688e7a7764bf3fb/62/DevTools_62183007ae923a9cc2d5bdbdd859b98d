a3f440562055b8390bb88d727ff2a8a6
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.devTools = exports.DevTools = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Chrome DevToolsÁµ±Âêà„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£
 * „Éá„Éê„ÉÉ„Ç∞„Å®„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ„ÇíÊèê‰æõ
 */
var DevTools = exports.DevTools = /*#__PURE__*/function () {
  function DevTools() {
    _classCallCheck(this, DevTools);
    this.isInitialized = false;
    this.isDevToolsOpen = false;
    this.performanceObserver = null;
    this.errorObserver = null;
    this.memoryObserver = null;
  }

  /**
  * DevTools„ÇíÂàùÊúüÂåñ
  */
  return _createClass(DevTools, [{
    key: "initialize",
    value: function initialize() {
      if (this.isInitialized) {
        return false;
      }
      if (typeof window === 'undefined') {
        return false;
      }

      // DevTools„ÅÆÈñãÈñâ„ÇíÊ§úÂá∫
      this.detectDevToolsOpen();

      // „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ„ÇíÈñãÂßã
      this.setupPerformanceMonitoring();

      // „Ç®„É©„ÉºÁõ£Ë¶ñ„ÇíÈñãÂßã
      this.setupErrorTracking();

      // „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁõ£Ë¶ñ„ÇíÈñãÂßã
      this.setupNetworkMonitoring();

      // „É°„É¢„É™Áõ£Ë¶ñ„ÇíÈñãÂßã
      this.setupMemoryMonitoring();

      // „Ç≥„É≥„ÇΩ„Éº„É´„É≠„Ç∞„ÅÆÊã°Âºµ
      this.enhanceConsoleLogging();
      this.isInitialized = true;
      console.log('üîß DevTools integration initialized');
      return true;
    }

    /**
    * DevTools„ÅÆÈñãÈñâ„ÇíÊ§úÂá∫
    */
  }, {
    key: "detectDevToolsOpen",
    value: function detectDevToolsOpen() {
      var _this = this;
      var devtools = {
        open: false,
        orientation: null
      };
      var threshold = 160;
      setInterval(function () {
        if (window.outerHeight - window.innerHeight > threshold || window.outerWidth - window.innerWidth > threshold) {
          if (!devtools.open) {
            devtools.open = true;
            _this.onDevToolsOpen();
          }
        } else {
          if (devtools.open) {
            devtools.open = false;
            _this.onDevToolsClose();
          }
        }
      }, 500);
    }

    /**
    * DevTools„ÅåÈñã„ÅÑ„ÅüÊôÇ„ÅÆÂá¶ÁêÜ
    */
  }, {
    key: "onDevToolsOpen",
    value: function onDevToolsOpen() {
      this.isDevToolsOpen = true;
      console.log('üîß DevTools opened');
    }

    /**
    * DevTools„ÅåÈñâ„Åò„ÅüÊôÇ„ÅÆÂá¶ÁêÜ
    */
  }, {
    key: "onDevToolsClose",
    value: function onDevToolsClose() {
      this.isDevToolsOpen = false;
      console.log('üîß DevTools closed');
    }

    /**
    * „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
    */
  }, {
    key: "setupPerformanceMonitoring",
    value: function setupPerformanceMonitoring() {
      var _this2 = this;
      if (!('PerformanceObserver' in window)) {
        console.warn('PerformanceObserver not supported');
        return;
      }
      try {
        // Long Task „ÅÆÁõ£Ë¶ñ
        this.performanceObserver = new PerformanceObserver(function (list) {
          var entries = list.getEntries();
          entries.forEach(function (entry) {
            if (entry.duration > 50) {
              console.warn("\u26A0\uFE0F Long Task detected: ".concat(entry.duration.toFixed(2), "ms"));
              _this2.recordPerformanceIssue('long_task', entry.duration);
            }
          });
        });
        this.performanceObserver.observe({
          entryTypes: ['longtask']
        });

        // Navigation Timing „ÅÆÁõ£Ë¶ñ
        this.navigationObserver = new PerformanceObserver(function (list) {
          var entries = list.getEntries();
          entries.forEach(function (entry) {
            _this2.analyzeNavigationTiming(entry);
          });
        });
        this.navigationObserver.observe({
          entryTypes: ['navigation']
        });
      } catch (error) {
        console.error('Failed to setup performance monitoring:', error);
      }
    }

    /**
    * „Ç®„É©„ÉºÁõ£Ë¶ñ„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
    */
  }, {
    key: "setupErrorTracking",
    value: function setupErrorTracking() {
      var _this3 = this;
      // „Ç∞„É≠„Éº„Éê„É´„Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº
      window.addEventListener('error', function (event) {
        _this3.logError({
          message: event.message,
          filename: event.filename,
          lineno: event.lineno,
          colno: event.colno,
          error: event.error
        });
      });

      // Promise rejection „Éè„É≥„Éâ„É©„Éº
      window.addEventListener('unhandledrejection', function (event) {
        _this3.logError({
          message: 'Unhandled Promise Rejection',
          reason: event.reason
        });
      });
    }

    /**
    * „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁõ£Ë¶ñ„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
    */
  }, {
    key: "setupNetworkMonitoring",
    value: function setupNetworkMonitoring() {
      var _this4 = this;
      if (!('PerformanceObserver' in window)) {
        return;
      }
      try {
        var networkObserver = new PerformanceObserver(function (list) {
          var entries = list.getEntries();
          entries.forEach(function (entry) {
            if (entry.entryType === 'resource') {
              _this4.logNetwork({
                url: entry.name,
                duration: entry.duration,
                size: entry.transferSize,
                type: entry.initiatorType
              });
            }
          });
        });
        networkObserver.observe({
          entryTypes: ['resource']
        });
      } catch (error) {
        console.error('Failed to setup network monitoring:', error);
      }
    }

    /**
    * „É°„É¢„É™Áõ£Ë¶ñ„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
    */
  }, {
    key: "setupMemoryMonitoring",
    value: function setupMemoryMonitoring() {
      var _this5 = this;
      if (!('memory' in performance)) {
        console.warn('Memory API not supported');
        return;
      }
      setInterval(function () {
        var memory = performance.memory;
        _this5.logMemory({
          used: memory.usedJSHeapSize,
          total: memory.totalJSHeapSize,
          limit: memory.jsHeapSizeLimit
        });
      }, 5000);
    }

    /**
    * „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Éá„Éº„Çø„Çí„É≠„Ç∞
    */
  }, {
    key: "logPerformance",
    value: function logPerformance(performanceData) {
      var logEntry = {
        type: 'performance',
        timestamp: Date.now(),
        data: performanceData
      };
      console.log('üìä Performance:', performanceData);
      this.storeLogEntry(logEntry);
    }

    /**
    * „Ç®„É©„Éº„Éá„Éº„Çø„Çí„É≠„Ç∞
    */
  }, {
    key: "logError",
    value: function logError(errorData) {
      var logEntry = {
        type: 'error',
        timestamp: Date.now(),
        data: errorData
      };
      console.error('‚ùå Error:', errorData);
      this.storeLogEntry(logEntry);
    }

    /**
    * „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Éá„Éº„Çø„Çí„É≠„Ç∞
    */
  }, {
    key: "logNetwork",
    value: function logNetwork(networkData) {
      var logEntry = {
        type: 'network',
        timestamp: Date.now(),
        data: networkData
      };
      console.log('üåê Network:', networkData);
      this.storeLogEntry(logEntry);
    }

    /**
    * „É°„É¢„É™„Éá„Éº„Çø„Çí„É≠„Ç∞
    */
  }, {
    key: "logMemory",
    value: function logMemory(memoryData) {
      var logEntry = {
        type: 'memory',
        timestamp: Date.now(),
        data: memoryData
      };
      console.log('üíæ Memory:', memoryData);
      this.storeLogEntry(logEntry);
    }

    /**
    * „Ç≥„É≥„ÇΩ„Éº„É´„É≠„Ç∞„ÅÆÊã°Âºµ
    */
  }, {
    key: "enhanceConsoleLogging",
    value: function enhanceConsoleLogging() {
      var _this6 = this;
      var originalLog = console.log;
      var originalError = console.error;
      var originalWarn = console.warn;
      console.log = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this6.logWithTimestamp('log', args);
        originalLog.apply(console, args);
      };
      console.error = function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        _this6.logWithTimestamp('error', args);
        originalError.apply(console, args);
      };
      console.warn = function () {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        _this6.logWithTimestamp('warn', args);
        originalWarn.apply(console, args);
      };
    }

    /**
    * „Çø„Ç§„É†„Çπ„Çø„É≥„Éó‰ªò„Åç„É≠„Ç∞
    */
  }, {
    key: "logWithTimestamp",
    value: function logWithTimestamp(level, args) {
      var timestamp = new Date().toISOString();
      var logEntry = {
        level: level,
        timestamp: timestamp,
        message: args.join(' ')
      };
      this.storeLogEntry(logEntry);
    }

    /**
    * „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂïèÈ°å„ÇíË®òÈå≤
    */
  }, {
    key: "recordPerformanceIssue",
    value: function recordPerformanceIssue(type, duration) {
      var issue = {
        type: type,
        duration: duration,
        timestamp: Date.now()
      };
      this.storePerformanceIssue(issue);
    }

    /**
    * „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Çø„Ç§„Éü„É≥„Ç∞„ÇíÂàÜÊûê
    */
  }, {
    key: "analyzeNavigationTiming",
    value: function analyzeNavigationTiming(entry) {
      var timing = {
        domContentLoaded: entry.domContentLoadedEventEnd - entry.navigationStart,
        loadComplete: entry.loadEventEnd - entry.navigationStart,
        firstPaint: entry.responseStart - entry.navigationStart
      };
      this.logPerformance({
        name: 'navigation',
        timing: timing
      });
    }

    /**
    * „É≠„Ç∞„Ç®„É≥„Éà„É™„Çí‰øùÂ≠ò
    */
  }, {
    key: "storeLogEntry",
    value: function storeLogEntry(logEntry) {
      try {
        var logs = JSON.parse(localStorage.getItem('devtools_logs') || '[]');
        logs.push(logEntry);

        // ÊúÄÊñ∞1000‰ª∂„ÅÆ„Åø‰øùÊåÅ
        if (logs.length > 1000) {
          logs.splice(0, logs.length - 1000);
        }
        localStorage.setItem('devtools_logs', JSON.stringify(logs));
      } catch (error) {
        console.error('Failed to store log entry:', error);
      }
    }

    /**
    * „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂïèÈ°å„Çí‰øùÂ≠ò
    */
  }, {
    key: "storePerformanceIssue",
    value: function storePerformanceIssue(issue) {
      try {
        var issues = JSON.parse(localStorage.getItem('devtools_performance_issues') || '[]');
        issues.push(issue);

        // ÊúÄÊñ∞100‰ª∂„ÅÆ„Åø‰øùÊåÅ
        if (issues.length > 100) {
          issues.splice(0, issues.length - 100);
        }
        localStorage.setItem('devtools_performance_issues', JSON.stringify(issues));
      } catch (error) {
        console.error('Failed to store performance issue:', error);
      }
    }

    /**
    * „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíË°®Á§∫
    */
  }, {
    key: "showDebugInfo",
    value: function showDebugInfo() {
      console.group('üîß DevTools Debug Info');
      console.log('Initialized:', this.isInitialized);
      console.log('DevTools Open:', this.isDevToolsOpen);
      console.log('Performance Observer:', !!this.performanceObserver);
      console.log('Error Observer:', !!this.errorObserver);
      console.log('Memory Observer:', !!this.memoryObserver);
      console.groupEnd();
    }

    /**
    * „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁµ±Ë®à„ÇíË°®Á§∫
    */
  }, {
    key: "showPerformanceStats",
    value: function showPerformanceStats() {
      if (!('memory' in performance)) {
        return;
      }
      var memory = performance.memory;
      var memoryUsage = {
        used: Math.round(memory.usedJSHeapSize / 1024 / 1024),
        total: Math.round(memory.totalJSHeapSize / 1024 / 1024),
        limit: Math.round(memory.jsHeapSizeLimit / 1024 / 1024)
      };
      console.group('üìä Performance Statistics');
      console.log('Memory Usage:', "".concat(memoryUsage.used, "MB / ").concat(memoryUsage.limit, "MB"));
      console.log('Memory Percentage:', "".concat(Math.round(memoryUsage.used / memoryUsage.limit * 100), "%"));

      // „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Ç®„É≥„Éà„É™„ÇíË°®Á§∫
      var entries = performance.getEntriesByType('navigation');
      if (entries.length > 0) {
        var entry = entries[0];
        console.log('Page Load Time:', "".concat(entry.loadEventEnd - entry.navigationStart, "ms"));
        console.log('DOM Content Loaded:', "".concat(entry.domContentLoadedEventEnd - entry.navigationStart, "ms"));
      }
      console.groupEnd();
    }

    /**
    * „Éá„Éê„ÉÉ„Ç∞„Éá„Éº„Çø„ÇíÂèñÂæó
    */
  }, {
    key: "getDebugData",
    value: function getDebugData() {
      return {
        isInitialized: this.isInitialized,
        isDevToolsOpen: this.isDevToolsOpen,
        logs: JSON.parse(localStorage.getItem('devtools_logs') || '[]'),
        performanceIssues: JSON.parse(localStorage.getItem('devtools_performance_issues') || '[]')
      };
    }

    /**
    * „Éá„Éê„ÉÉ„Ç∞„Éá„Éº„Çø„Çí„ÇØ„É™„Ç¢
    */
  }, {
    key: "clearDebugData",
    value: function clearDebugData() {
      localStorage.removeItem('devtools_logs');
      localStorage.removeItem('devtools_performance_issues');
      console.log('üóëÔ∏è Debug data cleared');
    }

    /**
    * „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„É¨„Éù„Éº„Éà„ÇíÁîüÊàê
    */
  }, {
    key: "generatePerformanceReport",
    value: function generatePerformanceReport() {
      var report = {
        timestamp: Date.now(),
        memory: performance.memory ? {
          used: performance.memory.usedJSHeapSize,
          total: performance.memory.totalJSHeapSize,
          limit: performance.memory.jsHeapSizeLimit
        } : null,
        navigation: performance.getEntriesByType('navigation'),
        resources: performance.getEntriesByType('resource')
      };
      console.log('üìä Performance Report:', report);
      return report;
    }

    /**
    * DevTools„ÇíÁ†¥Ê£Ñ
    */
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.performanceObserver) {
        this.performanceObserver.disconnect();
        this.performanceObserver = null;
      }
      if (this.navigationObserver) {
        this.navigationObserver.disconnect();
        this.navigationObserver = null;
      }
      this.isInitialized = false;
      console.log('üóëÔ∏è DevTools destroyed');
    }
  }]);
}(); // „Ç∑„É≥„Ç∞„É´„Éà„É≥„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà
var devTools = exports.devTools = new DevTools();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,