2a7e2e471341620beb56dddf35d6cd37
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.supabaseService = exports.SupabaseService = void 0;
var _constants = require("../utils/constants.js");
var _errorHandler = require("../utils/errorHandler.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // js/services/SupabaseService.js - Supabase統合サービス
/**
 * Supabase統合サービス
 * データベース操作と認証を管理
 *
 * @class SupabaseService
 * @version 2.0.0
 * @since 1.0.0
 */
var SupabaseService = exports.SupabaseService = /*#__PURE__*/function () {
  /**
   * Supabaseサービスのコンストラクタ
   * @param {Object} options - 初期化オプション
   * @param {boolean} options.autoInitialize - 自動初期化（デフォルト: true）
   * @param {boolean} options.enableRetry - リトライ機能（デフォルト: true）
   * @param {number} options.maxRetries - 最大リトライ回数（デフォルト: 3）
   */
  function SupabaseService() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, SupabaseService);
    this.client = null;
    this.isConnected = false;
    this.autoInitialize = options.autoInitialize !== false;
    this.enableRetry = options.enableRetry !== false;
    this.maxRetries = options.maxRetries || 3;
    this.retryDelay = 1000; // 1秒
    this.connectionAttempts = 0;
    this.lastConnectionAttempt = null;
    this.healthCheckInterval = null;
    this.performanceMetrics = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      averageResponseTime: 0
    };
    if (this.autoInitialize) {
      this.initialize();
    }
  }

  /**
   * Supabaseクライアントを初期化
   * @param {Object} options - 初期化オプション
   * @param {boolean} options.force - 強制初期化（デフォルト: false）
   * @returns {Promise<boolean>} 初期化成功かどうか
   */
  return _createClass(SupabaseService, [{
    key: "initialize",
    value: (function () {
      var _initialize = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
        var options,
          createClient,
          _args = arguments,
          _t;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.p = _context.n) {
            case 0:
              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
              if (!(this.isConnected && !options.force)) {
                _context.n = 1;
                break;
              }
              console.log('⚠️ Supabase already initialized');
              return _context.a(2, true);
            case 1:
              this.connectionAttempts++;
              this.lastConnectionAttempt = new Date();
              _context.p = 2;
              console.log("\uD83D\uDD04 Initializing Supabase client (attempt ".concat(this.connectionAttempts, ")..."));
              if (!(!_constants.SUPABASE_CONFIG.url || !_constants.SUPABASE_CONFIG.key)) {
                _context.n = 3;
                break;
              }
              throw new Error('Supabase configuration not found');
            case 3:
              if (!(!window.supabase || !window.supabase.createClient)) {
                _context.n = 4;
                break;
              }
              throw new Error('Supabase library not loaded from CDN');
            case 4:
              createClient = window.supabase.createClient;
              this.client = createClient(_constants.SUPABASE_CONFIG.url, _constants.SUPABASE_CONFIG.key);

              // 接続テスト
              _context.n = 5;
              return this.testConnection();
            case 5:
              this.isConnected = true;
              console.log('✅ Supabase client initialized successfully');

              // ヘルスチェックの開始
              this.startHealthCheck();
              return _context.a(2, true);
            case 6:
              _context.p = 6;
              _t = _context.v;
              console.error("\u274C Failed to initialize Supabase client (attempt ".concat(this.connectionAttempts, "):"), _t);
              this.isConnected = false;

              // リトライロジック
              if (!(this.enableRetry && this.connectionAttempts < this.maxRetries)) {
                _context.n = 9;
                break;
              }
              console.log("\uD83D\uDD04 Retrying Supabase initialization in ".concat(this.retryDelay, "ms..."));
              _context.n = 7;
              return this.delay(this.retryDelay);
            case 7:
              _context.n = 8;
              return this.initialize(_objectSpread(_objectSpread({}, options), {}, {
                force: true
              }));
            case 8:
              return _context.a(2, _context.v);
            case 9:
              (0, _errorHandler.handleError)(_t, {
                context: 'SupabaseService.initialize',
                showNotification: true,
                severity: 'error'
              });
              return _context.a(2, false);
          }
        }, _callee, this, [[2, 6]]);
      }));
      function initialize() {
        return _initialize.apply(this, arguments);
      }
      return initialize;
    }()
    /**
     * Supabaseが利用可能かチェック
     * @returns {boolean} 利用可能かどうか
     */
    )
  }, {
    key: "isAvailable",
    value: function isAvailable() {
      return this.isConnected && this.client !== null;
    }

    /**
     * 接続テストを実行
     * @returns {Promise<boolean>} 接続成功かどうか
     */
  }, {
    key: "testConnection",
    value: (function () {
      var _testConnection = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
        var _yield$this$client$fr, error, _t2;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.p = _context2.n) {
            case 0:
              _context2.p = 0;
              _context2.n = 1;
              return this.client.from('exercises').select('count').limit(1);
            case 1:
              _yield$this$client$fr = _context2.v;
              error = _yield$this$client$fr.error;
              if (!error) {
                _context2.n = 2;
                break;
              }
              throw new Error("Connection test failed: ".concat(error.message));
            case 2:
              console.log('✅ Supabase connection test successful');
              return _context2.a(2, true);
            case 3:
              _context2.p = 3;
              _t2 = _context2.v;
              console.error('❌ Supabase connection test failed:', _t2);
              throw _t2;
            case 4:
              return _context2.a(2);
          }
        }, _callee2, this, [[0, 3]]);
      }));
      function testConnection() {
        return _testConnection.apply(this, arguments);
      }
      return testConnection;
    }()
    /**
     * ヘルスチェックを開始
     */
    )
  }, {
    key: "startHealthCheck",
    value: function startHealthCheck() {
      var _this = this;
      if (this.healthCheckInterval) {
        clearInterval(this.healthCheckInterval);
      }
      this.healthCheckInterval = setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
        var _t3;
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.p = _context3.n) {
            case 0:
              _context3.p = 0;
              _context3.n = 1;
              return _this.testConnection();
            case 1:
              _context3.n = 3;
              break;
            case 2:
              _context3.p = 2;
              _t3 = _context3.v;
              console.warn('⚠️ Supabase health check failed:', _t3);
              _this.isConnected = false;
            case 3:
              return _context3.a(2);
          }
        }, _callee3, null, [[0, 2]]);
      })), 60000); // 1分ごと
    }

    /**
     * ヘルスチェックを停止
     */
  }, {
    key: "stopHealthCheck",
    value: function stopHealthCheck() {
      if (this.healthCheckInterval) {
        clearInterval(this.healthCheckInterval);
        this.healthCheckInterval = null;
      }
    }

    /**
     * 遅延実行
     * @param {number} ms - 遅延時間（ミリ秒）
     * @returns {Promise<void>}
     */
  }, {
    key: "delay",
    value: function delay(ms) {
      return new Promise(function (resolve) {
        return setTimeout(resolve, ms);
      });
    }

    /**
     * パフォーマンスメトリクスを更新
     * @param {number} responseTime - レスポンス時間
     * @param {boolean} success - 成功かどうか
     */
  }, {
    key: "updatePerformanceMetrics",
    value: function updatePerformanceMetrics(responseTime, success) {
      this.performanceMetrics.totalRequests++;
      if (success) {
        this.performanceMetrics.successfulRequests++;
      } else {
        this.performanceMetrics.failedRequests++;
      }

      // 平均レスポンス時間を更新
      var total = this.performanceMetrics.totalRequests;
      var current = this.performanceMetrics.averageResponseTime;
      this.performanceMetrics.averageResponseTime = (current * (total - 1) + responseTime) / total;
    }

    /**
     * パフォーマンスメトリクスを取得
     * @returns {Object} パフォーマンスメトリクス
     */
  }, {
    key: "getPerformanceMetrics",
    value: function getPerformanceMetrics() {
      return _objectSpread(_objectSpread({}, this.performanceMetrics), {}, {
        successRate: this.performanceMetrics.totalRequests > 0 ? this.performanceMetrics.successfulRequests / this.performanceMetrics.totalRequests * 100 : 0
      });
    }

    /**
     * サービスの健全性チェック
     * @returns {Object} 健全性チェック結果
     */
  }, {
    key: "healthCheck",
    value: function healthCheck() {
      var issues = [];
      if (!this.isConnected) {
        issues.push('Not connected');
      }
      if (this.connectionAttempts > this.maxRetries) {
        issues.push('Too many connection attempts');
      }
      if (this.performanceMetrics.failedRequests > this.performanceMetrics.successfulRequests) {
        issues.push('High failure rate');
      }
      return {
        isHealthy: issues.length === 0,
        issues: issues,
        score: Math.max(0, 100 - issues.length * 25),
        metrics: {
          isConnected: this.isConnected,
          connectionAttempts: this.connectionAttempts,
          performance: this.getPerformanceMetrics()
        }
      };
    }

    /**
     * 認証状態を取得
     */
  }, {
    key: "getAuthState",
    value: (function () {
      var _getAuthState = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
        var _yield$this$client$au, session, error, user, _t4;
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.p = _context4.n) {
            case 0:
              if (this.isAvailable()) {
                _context4.n = 1;
                break;
              }
              console.log('Supabase not available for auth state check');
              return _context4.a(2, {
                user: null,
                session: null
              });
            case 1:
              _context4.p = 1;
              _context4.n = 2;
              return this.client.auth.getSession();
            case 2:
              _yield$this$client$au = _context4.v;
              session = _yield$this$client$au.data.session;
              error = _yield$this$client$au.error;
              if (!error) {
                _context4.n = 3;
                break;
              }
              console.error('Auth state error:', error);
              return _context4.a(2, {
                user: null,
                session: null
              });
            case 3:
              user = (session === null || session === void 0 ? void 0 : session.user) || null;
              console.log('Auth state retrieved:', {
                hasSession: !!session,
                hasUser: !!user,
                userId: user === null || user === void 0 ? void 0 : user.id,
                userEmail: user === null || user === void 0 ? void 0 : user.email
              });
              return _context4.a(2, {
                user: user,
                session: session
              });
            case 4:
              _context4.p = 4;
              _t4 = _context4.v;
              console.error('Failed to get auth state:', _t4);
              return _context4.a(2, {
                user: null,
                session: null
              });
          }
        }, _callee4, this, [[1, 4]]);
      }));
      function getAuthState() {
        return _getAuthState.apply(this, arguments);
      }
      return getAuthState;
    }()
    /**
     * 現在のユーザーを取得（同期版）
     */
    )
  }, {
    key: "getCurrentUser",
    value: function getCurrentUser() {
      if (!this.isAvailable()) {
        return null;
      }
      try {
        // Supabaseのセッション情報をローカルストレージから取得
        var sessionData = localStorage.getItem('sb-mwwlqpokfgduxyjbqoff-auth-token');
        if (sessionData) {
          var session = JSON.parse(sessionData);
          return (session === null || session === void 0 ? void 0 : session.user) || null;
        }

        // 別のキーでも試行
        var altSessionData = localStorage.getItem('supabase.auth.token');
        if (altSessionData) {
          var _session = JSON.parse(altSessionData);
          return (_session === null || _session === void 0 ? void 0 : _session.user) || null;
        }
        return null;
      } catch (error) {
        console.error('Failed to get current user:', error);
        return null;
      }
    }

    /**
     * ユーザー登録
     */
  }, {
    key: "signUp",
    value: (function () {
      var _signUp = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(email, password) {
        var userData,
          _yield$this$client$au2,
          data,
          error,
          _args5 = arguments,
          _t5;
        return _regenerator().w(function (_context5) {
          while (1) switch (_context5.p = _context5.n) {
            case 0:
              userData = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};
              if (this.isAvailable()) {
                _context5.n = 1;
                break;
              }
              throw new Error('Supabase is not available');
            case 1:
              _context5.p = 1;
              _context5.n = 2;
              return this.client.auth.signUp({
                email: email,
                password: password,
                options: {
                  data: userData
                }
              });
            case 2:
              _yield$this$client$au2 = _context5.v;
              data = _yield$this$client$au2.data;
              error = _yield$this$client$au2.error;
              if (!error) {
                _context5.n = 3;
                break;
              }
              throw new Error(error.message);
            case 3:
              return _context5.a(2, data);
            case 4:
              _context5.p = 4;
              _t5 = _context5.v;
              console.error('Sign up error:', _t5);
              throw _t5;
            case 5:
              return _context5.a(2);
          }
        }, _callee5, this, [[1, 4]]);
      }));
      function signUp(_x, _x2) {
        return _signUp.apply(this, arguments);
      }
      return signUp;
    }()
    /**
     * ユーザーログイン
     */
    )
  }, {
    key: "signIn",
    value: (function () {
      var _signIn = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(email, password) {
        var _yield$this$client$au3, data, error, _t6;
        return _regenerator().w(function (_context6) {
          while (1) switch (_context6.p = _context6.n) {
            case 0:
              if (this.isAvailable()) {
                _context6.n = 1;
                break;
              }
              throw new Error('Supabase is not available');
            case 1:
              _context6.p = 1;
              _context6.n = 2;
              return this.client.auth.signInWithPassword({
                email: email,
                password: password
              });
            case 2:
              _yield$this$client$au3 = _context6.v;
              data = _yield$this$client$au3.data;
              error = _yield$this$client$au3.error;
              if (!error) {
                _context6.n = 3;
                break;
              }
              throw new Error(error.message);
            case 3:
              return _context6.a(2, data);
            case 4:
              _context6.p = 4;
              _t6 = _context6.v;
              console.error('Sign in error:', _t6);
              throw _t6;
            case 5:
              return _context6.a(2);
          }
        }, _callee6, this, [[1, 4]]);
      }));
      function signIn(_x3, _x4) {
        return _signIn.apply(this, arguments);
      }
      return signIn;
    }()
    /**
     * ユーザーログアウト
     */
    )
  }, {
    key: "signOut",
    value: (function () {
      var _signOut = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
        var _yield$this$client$au4, error, _t7;
        return _regenerator().w(function (_context7) {
          while (1) switch (_context7.p = _context7.n) {
            case 0:
              if (this.isAvailable()) {
                _context7.n = 1;
                break;
              }
              throw new Error('Supabase is not available');
            case 1:
              _context7.p = 1;
              _context7.n = 2;
              return this.client.auth.signOut();
            case 2:
              _yield$this$client$au4 = _context7.v;
              error = _yield$this$client$au4.error;
              if (!error) {
                _context7.n = 3;
                break;
              }
              throw new Error(error.message);
            case 3:
              _context7.n = 5;
              break;
            case 4:
              _context7.p = 4;
              _t7 = _context7.v;
              console.error('Sign out error:', _t7);
              throw _t7;
            case 5:
              return _context7.a(2);
          }
        }, _callee7, this, [[1, 4]]);
      }));
      function signOut() {
        return _signOut.apply(this, arguments);
      }
      return signOut;
    }()
    /**
     * ワークアウト履歴を取得
     */
    )
  }, {
    key: "getWorkoutHistory",
    value: (function () {
      var _getWorkoutHistory = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
        var limit,
          _yield$this$client$fr2,
          data,
          error,
          _args8 = arguments,
          _t8;
        return _regenerator().w(function (_context8) {
          while (1) switch (_context8.p = _context8.n) {
            case 0:
              limit = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : 50;
              if (this.isAvailable()) {
                _context8.n = 1;
                break;
              }
              throw new Error('Supabase is not available');
            case 1:
              _context8.p = 1;
              _context8.n = 2;
              return this.client.from('workout_sessions').select('*').order('workout_date', {
                ascending: false
              }).limit(limit);
            case 2:
              _yield$this$client$fr2 = _context8.v;
              data = _yield$this$client$fr2.data;
              error = _yield$this$client$fr2.error;
              if (!error) {
                _context8.n = 3;
                break;
              }
              throw new Error(error.message);
            case 3:
              return _context8.a(2, data || []);
            case 4:
              _context8.p = 4;
              _t8 = _context8.v;
              console.error('Failed to get workout history:', _t8);
              throw _t8;
            case 5:
              return _context8.a(2);
          }
        }, _callee8, this, [[1, 4]]);
      }));
      function getWorkoutHistory() {
        return _getWorkoutHistory.apply(this, arguments);
      }
      return getWorkoutHistory;
    }()
    /**
     * ワークアウトを取得（getWorkoutHistoryのエイリアス）
     */
    )
  }, {
    key: "getWorkouts",
    value: (function () {
      var _getWorkouts = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {
        var limit,
          _args9 = arguments;
        return _regenerator().w(function (_context9) {
          while (1) switch (_context9.n) {
            case 0:
              limit = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : 50;
              return _context9.a(2, this.getWorkoutHistory(limit));
          }
        }, _callee9, this);
      }));
      function getWorkouts() {
        return _getWorkouts.apply(this, arguments);
      }
      return getWorkouts;
    }()
    /**
     * ワークアウトを保存
     */
    )
  }, {
    key: "saveWorkout",
    value: (function () {
      var _saveWorkout = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0(workoutData) {
        var _yield$this$client$fr3, data, error, _t9;
        return _regenerator().w(function (_context0) {
          while (1) switch (_context0.p = _context0.n) {
            case 0:
              if (this.isAvailable()) {
                _context0.n = 1;
                break;
              }
              throw new Error('Supabase is not available');
            case 1:
              _context0.p = 1;
              _context0.n = 2;
              return this.client.from('workout_sessions').insert([workoutData]).select();
            case 2:
              _yield$this$client$fr3 = _context0.v;
              data = _yield$this$client$fr3.data;
              error = _yield$this$client$fr3.error;
              if (!error) {
                _context0.n = 3;
                break;
              }
              throw new Error(error.message);
            case 3:
              return _context0.a(2, data);
            case 4:
              _context0.p = 4;
              _t9 = _context0.v;
              console.error('Failed to save workout:', _t9);
              throw _t9;
            case 5:
              return _context0.a(2);
          }
        }, _callee0, this, [[1, 4]]);
      }));
      function saveWorkout(_x5) {
        return _saveWorkout.apply(this, arguments);
      }
      return saveWorkout;
    }()
    /**
     * トレーニングログを保存
     */
    )
  }, {
    key: "saveTrainingLogs",
    value: (function () {
      var _saveTrainingLogs = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1(trainingLogs) {
        var _yield$this$client$fr4, data, error, _t0;
        return _regenerator().w(function (_context1) {
          while (1) switch (_context1.p = _context1.n) {
            case 0:
              if (this.isAvailable()) {
                _context1.n = 1;
                break;
              }
              throw new Error('Supabase is not available');
            case 1:
              _context1.p = 1;
              _context1.n = 2;
              return this.client.from('training_logs').insert(trainingLogs).select();
            case 2:
              _yield$this$client$fr4 = _context1.v;
              data = _yield$this$client$fr4.data;
              error = _yield$this$client$fr4.error;
              if (!error) {
                _context1.n = 3;
                break;
              }
              throw new Error(error.message);
            case 3:
              return _context1.a(2, data);
            case 4:
              _context1.p = 4;
              _t0 = _context1.v;
              console.error('Failed to save training logs:', _t0);
              throw _t0;
            case 5:
              return _context1.a(2);
          }
        }, _callee1, this, [[1, 4]]);
      }));
      function saveTrainingLogs(_x6) {
        return _saveTrainingLogs.apply(this, arguments);
      }
      return saveTrainingLogs;
    }()
    /**
     * エクササイズ一覧を取得
     */
    )
  }, {
    key: "getExercises",
    value: (function () {
      var _getExercises = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10() {
        var _yield$this$client$fr5, data, error, _t1;
        return _regenerator().w(function (_context10) {
          while (1) switch (_context10.p = _context10.n) {
            case 0:
              if (this.isAvailable()) {
                _context10.n = 1;
                break;
              }
              throw new Error('Supabase is not available');
            case 1:
              _context10.p = 1;
              _context10.n = 2;
              return this.client.from('exercises').select('*').order('name');
            case 2:
              _yield$this$client$fr5 = _context10.v;
              data = _yield$this$client$fr5.data;
              error = _yield$this$client$fr5.error;
              if (!error) {
                _context10.n = 3;
                break;
              }
              throw new Error(error.message);
            case 3:
              return _context10.a(2, data || []);
            case 4:
              _context10.p = 4;
              _t1 = _context10.v;
              console.error('Failed to get exercises:', _t1);
              throw _t1;
            case 5:
              return _context10.a(2);
          }
        }, _callee10, this, [[1, 4]]);
      }));
      function getExercises() {
        return _getExercises.apply(this, arguments);
      }
      return getExercises;
    }()
    /**
     * 筋肉部位一覧を取得
     */
    )
  }, {
    key: "getMuscleGroups",
    value: (function () {
      var _getMuscleGroups = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11() {
        var _yield$this$client$fr6, data, error, _t10;
        return _regenerator().w(function (_context11) {
          while (1) switch (_context11.p = _context11.n) {
            case 0:
              if (this.isAvailable()) {
                _context11.n = 1;
                break;
              }
              throw new Error('Supabase is not available');
            case 1:
              _context11.p = 1;
              _context11.n = 2;
              return this.client.from('muscle_groups').select('*').order('name');
            case 2:
              _yield$this$client$fr6 = _context11.v;
              data = _yield$this$client$fr6.data;
              error = _yield$this$client$fr6.error;
              if (!error) {
                _context11.n = 3;
                break;
              }
              throw new Error(error.message);
            case 3:
              return _context11.a(2, data || []);
            case 4:
              _context11.p = 4;
              _t10 = _context11.v;
              console.error('Failed to get muscle groups:', _t10);
              throw _t10;
            case 5:
              return _context11.a(2);
          }
        }, _callee11, this, [[1, 4]]);
      }));
      function getMuscleGroups() {
        return _getMuscleGroups.apply(this, arguments);
      }
      return getMuscleGroups;
    }()
    /**
     * 筋肉回復データを取得
     */
    )
  }, {
    key: "getMuscleRecoveryData",
    value: (function () {
      var _getMuscleRecoveryData = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee12() {
        var _yield$this$client$fr7, data, error, _t11;
        return _regenerator().w(function (_context12) {
          while (1) switch (_context12.p = _context12.n) {
            case 0:
              if (this.isAvailable()) {
                _context12.n = 1;
                break;
              }
              throw new Error('Supabase is not available');
            case 1:
              _context12.p = 1;
              _context12.n = 2;
              return this.client.from('muscle_recovery').select('*').order('last_trained', {
                ascending: false
              });
            case 2:
              _yield$this$client$fr7 = _context12.v;
              data = _yield$this$client$fr7.data;
              error = _yield$this$client$fr7.error;
              if (!error) {
                _context12.n = 3;
                break;
              }
              throw new Error(error.message);
            case 3:
              return _context12.a(2, data || []);
            case 4:
              _context12.p = 4;
              _t11 = _context12.v;
              console.error('Failed to get muscle recovery data:', _t11);
              throw _t11;
            case 5:
              return _context12.a(2);
          }
        }, _callee12, this, [[1, 4]]);
      }));
      function getMuscleRecoveryData() {
        return _getMuscleRecoveryData.apply(this, arguments);
      }
      return getMuscleRecoveryData;
    }()
    /**
     * 推奨事項を取得
     */
    )
  }, {
    key: "getRecommendations",
    value: (function () {
      var _getRecommendations = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee13() {
        var _yield$this$client$fr8, data, error, _t12;
        return _regenerator().w(function (_context13) {
          while (1) switch (_context13.p = _context13.n) {
            case 0:
              if (this.isAvailable()) {
                _context13.n = 1;
                break;
              }
              throw new Error('Supabase is not available');
            case 1:
              _context13.p = 1;
              _context13.n = 2;
              return this.client.from('recommendations').select('*').order('created_at', {
                ascending: false
              }).limit(10);
            case 2:
              _yield$this$client$fr8 = _context13.v;
              data = _yield$this$client$fr8.data;
              error = _yield$this$client$fr8.error;
              if (!error) {
                _context13.n = 3;
                break;
              }
              throw new Error(error.message);
            case 3:
              return _context13.a(2, data || []);
            case 4:
              _context13.p = 4;
              _t12 = _context13.v;
              console.error('Failed to get recommendations:', _t12);
              throw _t12;
            case 5:
              return _context13.a(2);
          }
        }, _callee13, this, [[1, 4]]);
      }));
      function getRecommendations() {
        return _getRecommendations.apply(this, arguments);
      }
      return getRecommendations;
    }()
    /**
     * ユーザープロフィールを取得
     */
    )
  }, {
    key: "getUserProfile",
    value: (function () {
      var _getUserProfile = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee14() {
        var _yield$this$client$fr9, data, error, _t13;
        return _regenerator().w(function (_context14) {
          while (1) switch (_context14.p = _context14.n) {
            case 0:
              if (this.isAvailable()) {
                _context14.n = 1;
                break;
              }
              throw new Error('Supabase is not available');
            case 1:
              _context14.p = 1;
              _context14.n = 2;
              return this.client.from('user_profiles').select('*').single();
            case 2:
              _yield$this$client$fr9 = _context14.v;
              data = _yield$this$client$fr9.data;
              error = _yield$this$client$fr9.error;
              if (!error) {
                _context14.n = 3;
                break;
              }
              throw new Error(error.message);
            case 3:
              return _context14.a(2, data);
            case 4:
              _context14.p = 4;
              _t13 = _context14.v;
              console.error('Failed to get user profile:', _t13);
              throw _t13;
            case 5:
              return _context14.a(2);
          }
        }, _callee14, this, [[1, 4]]);
      }));
      function getUserProfile() {
        return _getUserProfile.apply(this, arguments);
      }
      return getUserProfile;
    }()
    /**
     * ユーザープロフィールを更新
     */
    )
  }, {
    key: "updateUserProfile",
    value: (function () {
      var _updateUserProfile = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee15(profileData) {
        var _yield$this$client$fr0, data, error, _t14;
        return _regenerator().w(function (_context15) {
          while (1) switch (_context15.p = _context15.n) {
            case 0:
              if (this.isAvailable()) {
                _context15.n = 1;
                break;
              }
              throw new Error('Supabase is not available');
            case 1:
              _context15.p = 1;
              _context15.n = 2;
              return this.client.from('user_profiles').upsert([profileData]).select();
            case 2:
              _yield$this$client$fr0 = _context15.v;
              data = _yield$this$client$fr0.data;
              error = _yield$this$client$fr0.error;
              if (!error) {
                _context15.n = 3;
                break;
              }
              throw new Error(error.message);
            case 3:
              return _context15.a(2, data);
            case 4:
              _context15.p = 4;
              _t14 = _context15.v;
              console.error('Failed to update user profile:', _t14);
              throw _t14;
            case 5:
              return _context15.a(2);
          }
        }, _callee15, this, [[1, 4]]);
      }));
      function updateUserProfile(_x7) {
        return _updateUserProfile.apply(this, arguments);
      }
      return updateUserProfile;
    }()
    /**
     * データを保存（汎用）
     */
    )
  }, {
    key: "saveData",
    value: (function () {
      var _saveData = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee16(tableName, data) {
        var _yield$this$client$fr1, result, error, _t15;
        return _regenerator().w(function (_context16) {
          while (1) switch (_context16.p = _context16.n) {
            case 0:
              if (this.isAvailable()) {
                _context16.n = 1;
                break;
              }
              throw new Error('Supabase is not available');
            case 1:
              _context16.p = 1;
              _context16.n = 2;
              return this.client.from(tableName).insert([data]).select();
            case 2:
              _yield$this$client$fr1 = _context16.v;
              result = _yield$this$client$fr1.data;
              error = _yield$this$client$fr1.error;
              if (!error) {
                _context16.n = 3;
                break;
              }
              throw new Error(error.message);
            case 3:
              return _context16.a(2, result);
            case 4:
              _context16.p = 4;
              _t15 = _context16.v;
              console.error("Failed to save data to ".concat(tableName, ":"), _t15);
              throw _t15;
            case 5:
              return _context16.a(2);
          }
        }, _callee16, this, [[1, 4]]);
      }));
      function saveData(_x8, _x9) {
        return _saveData.apply(this, arguments);
      }
      return saveData;
    }()
    /**
     * データを読み込み（汎用）
     */
    )
  }, {
    key: "loadData",
    value: (function () {
      var _loadData = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee17(tableName) {
        var filters,
          query,
          _yield$query,
          data,
          error,
          _args17 = arguments,
          _t16;
        return _regenerator().w(function (_context17) {
          while (1) switch (_context17.p = _context17.n) {
            case 0:
              filters = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : {};
              if (this.isAvailable()) {
                _context17.n = 1;
                break;
              }
              throw new Error('Supabase is not available');
            case 1:
              _context17.p = 1;
              query = this.client.from(tableName).select('*'); // フィルターを適用
              Object.entries(filters).forEach(function (_ref2) {
                var _ref3 = _slicedToArray(_ref2, 2),
                  key = _ref3[0],
                  value = _ref3[1];
                query = query.eq(key, value);
              });
              _context17.n = 2;
              return query;
            case 2:
              _yield$query = _context17.v;
              data = _yield$query.data;
              error = _yield$query.error;
              if (!error) {
                _context17.n = 3;
                break;
              }
              throw new Error(error.message);
            case 3:
              return _context17.a(2, data || []);
            case 4:
              _context17.p = 4;
              _t16 = _context17.v;
              console.error("Failed to load data from ".concat(tableName, ":"), _t16);
              throw _t16;
            case 5:
              return _context17.a(2);
          }
        }, _callee17, this, [[1, 4]]);
      }));
      function loadData(_x0) {
        return _loadData.apply(this, arguments);
      }
      return loadData;
    }()
    /**
     * リアルタイム購読を設定
     */
    )
  }, {
    key: "subscribeToTable",
    value: function subscribeToTable(tableName, callback) {
      if (!this.isAvailable()) {
        throw new Error('Supabase is not available');
      }
      try {
        return this.client.channel("".concat(tableName, "_changes")).on('postgres_changes', {
          event: '*',
          schema: 'public',
          table: tableName
        }, callback).subscribe();
      } catch (error) {
        console.error("Failed to subscribe to ".concat(tableName, ":"), error);
        throw error;
      }
    }

    /**
     * 接続状態をチェック
     */
  }, {
    key: "checkConnection",
    value: (function () {
      var _checkConnection = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee18() {
        var _yield$this$client$fr10, error, _t17;
        return _regenerator().w(function (_context18) {
          while (1) switch (_context18.p = _context18.n) {
            case 0:
              if (this.isAvailable()) {
                _context18.n = 1;
                break;
              }
              return _context18.a(2, false);
            case 1:
              _context18.p = 1;
              _context18.n = 2;
              return this.client.from('workout_sessions').select('count').limit(1);
            case 2:
              _yield$this$client$fr10 = _context18.v;
              error = _yield$this$client$fr10.error;
              return _context18.a(2, !error);
            case 3:
              _context18.p = 3;
              _t17 = _context18.v;
              console.error('Connection check failed:', _t17);
              return _context18.a(2, false);
          }
        }, _callee18, this, [[1, 3]]);
      }));
      function checkConnection() {
        return _checkConnection.apply(this, arguments);
      }
      return checkConnection;
    }()
    /**
     * オフライン同期キューを処理
     */
    )
  }, {
    key: "processOfflineQueue",
    value: (function () {
      var _processOfflineQueue = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee19() {
        var offlineQueue, synced, failed, _iterator, _step, item, _t18, _t19, _t20;
        return _regenerator().w(function (_context19) {
          while (1) switch (_context19.p = _context19.n) {
            case 0:
              _context19.p = 0;
              offlineQueue = JSON.parse(localStorage.getItem('offlineWorkoutQueue') || '[]');
              if (!(offlineQueue.length === 0)) {
                _context19.n = 1;
                break;
              }
              return _context19.a(2, {
                synced: 0,
                failed: 0
              });
            case 1:
              synced = 0;
              failed = 0;
              _iterator = _createForOfIteratorHelper(offlineQueue);
              _context19.p = 2;
              _iterator.s();
            case 3:
              if ((_step = _iterator.n()).done) {
                _context19.n = 8;
                break;
              }
              item = _step.value;
              _context19.p = 4;
              _context19.n = 5;
              return this.saveWorkout(item.data);
            case 5:
              this.removeFromOfflineQueue(item.id);
              synced++;
              _context19.n = 7;
              break;
            case 6:
              _context19.p = 6;
              _t18 = _context19.v;
              console.error("Failed to sync ".concat(item.id, ":"), _t18);
              failed++;
            case 7:
              _context19.n = 3;
              break;
            case 8:
              _context19.n = 10;
              break;
            case 9:
              _context19.p = 9;
              _t19 = _context19.v;
              _iterator.e(_t19);
            case 10:
              _context19.p = 10;
              _iterator.f();
              return _context19.f(10);
            case 11:
              return _context19.a(2, {
                synced: synced,
                failed: failed
              });
            case 12:
              _context19.p = 12;
              _t20 = _context19.v;
              console.error('Failed to process offline queue:', _t20);
              throw _t20;
            case 13:
              return _context19.a(2);
          }
        }, _callee19, this, [[4, 6], [2, 9, 10, 11], [0, 12]]);
      }));
      function processOfflineQueue() {
        return _processOfflineQueue.apply(this, arguments);
      }
      return processOfflineQueue;
    }()
    /**
     * オフラインキューからアイテムを削除
     */
    )
  }, {
    key: "removeFromOfflineQueue",
    value: function removeFromOfflineQueue(id) {
      try {
        var offlineQueue = JSON.parse(localStorage.getItem('offlineWorkoutQueue') || '[]');
        var filteredQueue = offlineQueue.filter(function (item) {
          return item.id !== id;
        });
        localStorage.setItem('offlineWorkoutQueue', JSON.stringify(filteredQueue));
      } catch (error) {
        console.error('Failed to remove from offline queue:', error);
      }
    }

    /**
     * オフラインキューにアイテムを追加
     */
  }, {
    key: "addToOfflineQueue",
    value: function addToOfflineQueue(data) {
      try {
        var offlineQueue = JSON.parse(localStorage.getItem('offlineWorkoutQueue') || '[]');
        var item = {
          id: data.id || "offline_".concat(Date.now()),
          data: data,
          timestamp: new Date().toISOString(),
          retryCount: 0
        };
        offlineQueue.push(item);
        localStorage.setItem('offlineWorkoutQueue', JSON.stringify(offlineQueue));
      } catch (error) {
        console.error('Failed to add to offline queue:', error);
      }
    }

    /**
     * 認証状態の変更を監視
     */
  }, {
    key: "onAuthStateChange",
    value: function onAuthStateChange(callback) {
      if (!this.isAvailable()) {
        console.warn('Supabase is not available, cannot set up auth state listener');
        return;
      }
      try {
        return this.client.auth.onAuthStateChange(callback);
      } catch (error) {
        console.error('Failed to set up auth state listener:', error);
      }
    }

    /**
     * ユーザーの統計情報を取得
     */
  }, {
    key: "getUserStats",
    value: (function () {
      var _getUserStats = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee20() {
        var _yield$this$client$au5, user, _yield$this$client$fr11, workouts, workoutsError, totalWorkouts, currentStreak, today, sortedWorkouts, i, workoutDate, daysDiff, prevWorkoutDate, daysBetween, oneWeekAgo, weeklyWorkouts, lastWorkout, _t21;
        return _regenerator().w(function (_context20) {
          while (1) switch (_context20.p = _context20.n) {
            case 0:
              if (this.isAvailable()) {
                _context20.n = 1;
                break;
              }
              console.warn('Supabase is not available, cannot get user stats');
              return _context20.a(2, {
                totalWorkouts: 0,
                currentStreak: 0,
                weeklyProgress: 0,
                lastWorkout: null
              });
            case 1:
              _context20.p = 1;
              _context20.n = 2;
              return this.client.auth.getUser();
            case 2:
              _yield$this$client$au5 = _context20.v;
              user = _yield$this$client$au5.data.user;
              if (user) {
                _context20.n = 3;
                break;
              }
              console.warn('No authenticated user found');
              return _context20.a(2, {
                totalWorkouts: 0,
                currentStreak: 0,
                weeklyProgress: 0,
                lastWorkout: null
              });
            case 3:
              _context20.n = 4;
              return this.client.from('workout_sessions').select('*').order('workout_date', {
                ascending: false
              });
            case 4:
              _yield$this$client$fr11 = _context20.v;
              workouts = _yield$this$client$fr11.data;
              workoutsError = _yield$this$client$fr11.error;
              if (!workoutsError) {
                _context20.n = 5;
                break;
              }
              console.error('Error fetching workouts for stats:', workoutsError);
              return _context20.a(2, {
                totalWorkouts: 0,
                currentStreak: 0,
                weeklyProgress: 0,
                lastWorkout: null
              });
            case 5:
              totalWorkouts = workouts ? workouts.length : 0; // ストリーク計算
              currentStreak = 0;
              if (!(workouts && workouts.length > 0)) {
                _context20.n = 10;
                break;
              }
              today = new Date();
              sortedWorkouts = workouts.sort(function (a, b) {
                return new Date(b.workout_date) - new Date(a.workout_date);
              });
              i = 0;
            case 6:
              if (!(i < sortedWorkouts.length)) {
                _context20.n = 10;
                break;
              }
              workoutDate = new Date(sortedWorkouts[i].workout_date);
              daysDiff = Math.floor((today - workoutDate) / (1000 * 60 * 60 * 24));
              if (!(i === 0 && daysDiff <= 1)) {
                _context20.n = 7;
                break;
              }
              currentStreak = 1;
              _context20.n = 9;
              break;
            case 7:
              if (!(i > 0)) {
                _context20.n = 9;
                break;
              }
              prevWorkoutDate = new Date(sortedWorkouts[i - 1].workout_date);
              daysBetween = Math.floor((prevWorkoutDate - workoutDate) / (1000 * 60 * 60 * 24));
              if (!(daysBetween <= 1)) {
                _context20.n = 8;
                break;
              }
              currentStreak++;
              _context20.n = 9;
              break;
            case 8:
              return _context20.a(3, 10);
            case 9:
              i++;
              _context20.n = 6;
              break;
            case 10:
              // 週間進捗計算
              oneWeekAgo = new Date();
              oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
              weeklyWorkouts = workouts ? workouts.filter(function (w) {
                return new Date(w.workout_date) >= oneWeekAgo;
              }).length : 0;
              lastWorkout = workouts && workouts.length > 0 ? workouts[0] : null;
              return _context20.a(2, {
                totalWorkouts: totalWorkouts,
                currentStreak: currentStreak,
                weeklyProgress: weeklyWorkouts,
                lastWorkout: lastWorkout ? {
                  date: lastWorkout.workout_date,
                  name: lastWorkout.session_name || 'ワークアウト'
                } : null
              });
            case 11:
              _context20.p = 11;
              _t21 = _context20.v;
              console.error('Failed to get user stats:', _t21);
              return _context20.a(2, {
                totalWorkouts: 0,
                currentStreak: 0,
                weeklyProgress: 0,
                lastWorkout: null
              });
          }
        }, _callee20, this, [[1, 11]]);
      }));
      function getUserStats() {
        return _getUserStats.apply(this, arguments);
      }
      return getUserStats;
    }()
    /**
     * ユーザープロフィールを保存
     */
    )
  }, {
    key: "saveUserProfile",
    value: (function () {
      var _saveUserProfile = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee21(profileData) {
        var _yield$this$client$au6, user, allowedColumns, filteredProfileData, profileWithUserId, defaults, _yield$this$client$fr12, data, error, _t22;
        return _regenerator().w(function (_context21) {
          while (1) switch (_context21.p = _context21.n) {
            case 0:
              if (this.isAvailable()) {
                _context21.n = 1;
                break;
              }
              console.warn('Supabase is not available, cannot save user profile');
              return _context21.a(2, false);
            case 1:
              _context21.p = 1;
              _context21.n = 2;
              return this.client.auth.getUser();
            case 2:
              _yield$this$client$au6 = _context21.v;
              user = _yield$this$client$au6.data.user;
              if (user) {
                _context21.n = 3;
                break;
              }
              console.warn('No authenticated user found');
              return _context21.a(2, false);
            case 3:
              // user_profilesテーブルに存在するカラムのみをフィルタリング
              allowedColumns = ['display_name', 'email', 'avatar_url', 'bio', 'fitness_level', 'primary_goals', 'preferred_language', 'timezone', 'weight', 'height', 'age', 'gender', 'activity_level', 'workout_frequency', 'preferred_workout_duration', 'notifications_enabled', 'email_notifications', 'push_notifications', 'theme_preference', 'font_size'];
              filteredProfileData = {};
              Object.keys(profileData).forEach(function (key) {
                if (allowedColumns.includes(key)) {
                  filteredProfileData[key] = profileData[key];
                }
              });

              // プロフィールデータにユーザーIDを追加
              profileWithUserId = _objectSpread(_objectSpread({}, filteredProfileData), {}, {
                id: user.id,
                // user_profilesテーブルのidフィールドはauth.users.idと一致
                updated_at: new Date().toISOString()
              }); // 制約に合致するデフォルト値を設定
              defaults = {
                font_size: 'md',
                fitness_level: 'beginner',
                activity_level: 'moderate',
                theme_preference: 'auto',
                preferred_language: 'ja',
                workout_frequency: 3
              }; // 各フィールドにデフォルト値を設定
              Object.keys(defaults).forEach(function (key) {
                if (!profileWithUserId[key]) {
                  profileWithUserId[key] = defaults[key];
                }
              });

              // Supabaseデータベースに保存
              _context21.n = 4;
              return this.client.from('user_profiles').upsert([profileWithUserId]).select();
            case 4:
              _yield$this$client$fr12 = _context21.v;
              data = _yield$this$client$fr12.data;
              error = _yield$this$client$fr12.error;
              if (!error) {
                _context21.n = 5;
                break;
              }
              console.error('Database save error:', error);
              throw new Error(error.message);
            case 5:
              console.log('User profile saved to Supabase:', data);

              // ローカルストレージにもバックアップ保存
              localStorage.setItem('userProfile', JSON.stringify(profileData));
              console.log('User profile also saved to localStorage as backup');
              return _context21.a(2, true);
            case 6:
              _context21.p = 6;
              _t22 = _context21.v;
              console.error('Failed to save user profile:', _t22);
              // エラーが発生した場合はローカルストレージに保存
              localStorage.setItem('userProfile', JSON.stringify(profileData));
              console.log('Fallback: User profile saved to localStorage only');
              return _context21.a(2, false);
          }
        }, _callee21, this, [[1, 6]]);
      }));
      function saveUserProfile(_x1) {
        return _saveUserProfile.apply(this, arguments);
      }
      return saveUserProfile;
    }()
    /**
     * ユーザープロフィールを取得（重複メソッド名を修正）
     */
    )
  }, {
    key: "getUserProfileData",
    value: (function () {
      var _getUserProfileData = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee22() {
        var _yield$this$client$au7, user, _yield$this$client$fr13, data, error, profileData, _profileData, _t23;
        return _regenerator().w(function (_context22) {
          while (1) switch (_context22.p = _context22.n) {
            case 0:
              if (this.isAvailable()) {
                _context22.n = 1;
                break;
              }
              console.warn('Supabase is not available, cannot get user profile');
              return _context22.a(2, null);
            case 1:
              _context22.p = 1;
              _context22.n = 2;
              return this.client.auth.getUser();
            case 2:
              _yield$this$client$au7 = _context22.v;
              user = _yield$this$client$au7.data.user;
              if (user) {
                _context22.n = 3;
                break;
              }
              console.warn('No authenticated user found');
              return _context22.a(2, null);
            case 3:
              _context22.n = 4;
              return this.client.from('user_profiles').select('*').eq('id', user.id).single();
            case 4:
              _yield$this$client$fr13 = _context22.v;
              data = _yield$this$client$fr13.data;
              error = _yield$this$client$fr13.error;
              if (!error) {
                _context22.n = 5;
                break;
              }
              console.warn('Failed to get profile from database:', error);
              // データベースから取得できない場合はローカルストレージから取得
              profileData = localStorage.getItem('userProfile');
              return _context22.a(2, profileData ? JSON.parse(profileData) : {});
            case 5:
              console.log('User profile loaded from Supabase:', data);
              return _context22.a(2, data || {});
            case 6:
              _context22.p = 6;
              _t23 = _context22.v;
              console.error('Failed to get user profile:', _t23);
              // エラーが発生した場合はローカルストレージから取得
              _profileData = localStorage.getItem('userProfile');
              return _context22.a(2, _profileData ? JSON.parse(_profileData) : {});
          }
        }, _callee22, this, [[1, 6]]);
      }));
      function getUserProfileData() {
        return _getUserProfileData.apply(this, arguments);
      }
      return getUserProfileData;
    }()
    /**
     * アバター画像をアップロード
     * @param {File} file - アップロードするファイル
     * @returns {Promise<string>} アップロードされた画像のURL
     */
    )
  }, {
    key: "uploadAvatar",
    value: (function () {
      var _uploadAvatar = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee23(file) {
        var _yield$this$client$au8, user, fileExt, fileName, _yield$this$client$st, error, _this$client$storage$, publicUrlData, _t24;
        return _regenerator().w(function (_context23) {
          while (1) switch (_context23.p = _context23.n) {
            case 0:
              if (this.isAvailable()) {
                _context23.n = 1;
                break;
              }
              throw new Error('Supabase is not available');
            case 1:
              _context23.p = 1;
              _context23.n = 2;
              return this.client.auth.getUser();
            case 2:
              _yield$this$client$au8 = _context23.v;
              user = _yield$this$client$au8.data.user;
              if (user) {
                _context23.n = 3;
                break;
              }
              throw new Error('No authenticated user found');
            case 3:
              // ファイル名を生成（ユーザーIDをフォルダ名として使用）
              fileExt = file.name.split('.').pop();
              fileName = "".concat(user.id, "/avatar_").concat(Date.now(), ".").concat(fileExt); // アバター用のバケットにアップロード
              _context23.n = 4;
              return this.client.storage.from('avatars').upload(fileName, file, {
                cacheControl: '3600',
                upsert: true,
                contentType: file.type
              });
            case 4:
              _yield$this$client$st = _context23.v;
              error = _yield$this$client$st.error;
              if (!error) {
                _context23.n = 5;
                break;
              }
              console.error('Avatar upload error:', error);
              throw new Error("\u30A2\u30D0\u30BF\u30FC\u753B\u50CF\u306E\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u306B\u5931\u6557\u3057\u307E\u3057\u305F: ".concat(error.message));
            case 5:
              // 公開URLを取得
              _this$client$storage$ = this.client.storage.from('avatars').getPublicUrl(fileName), publicUrlData = _this$client$storage$.data;
              if (publicUrlData !== null && publicUrlData !== void 0 && publicUrlData.publicUrl) {
                _context23.n = 6;
                break;
              }
              throw new Error('アバター画像のURL取得に失敗しました');
            case 6:
              console.log('Avatar uploaded successfully:', publicUrlData.publicUrl);
              return _context23.a(2, publicUrlData.publicUrl);
            case 7:
              _context23.p = 7;
              _t24 = _context23.v;
              console.error('Avatar upload failed:', _t24);
              throw _t24;
            case 8:
              return _context23.a(2);
          }
        }, _callee23, this, [[1, 7]]);
      }));
      function uploadAvatar(_x10) {
        return _uploadAvatar.apply(this, arguments);
      }
      return uploadAvatar;
    }())
  }]);
}(); // シングルトンインスタンスをエクスポート
var supabaseService = exports.supabaseService = new SupabaseService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,