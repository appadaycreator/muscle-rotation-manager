80fb340fb6b083eb27820e659ecaa454
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BasePage = void 0;
var _authManager = require("../modules/authManager.js");
var _supabaseService = require("../services/supabaseService.js");
var _helpers = require("../utils/helpers.js");
var _errorHandler = require("../utils/errorHandler.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // js/core/BasePage.js - ベースページクラス
/**
 * ベースページクラス
 * 全ページで共通の機能を提供
 *
 * @class BasePage
 * @version 2.0.0
 * @since 1.0.0
 */
var BasePage = exports.BasePage = /*#__PURE__*/function () {
  /**
  * ベースページのコンストラクタ
  * @param {Object} options - 初期化オプション
  * @param {string} options.pageName - ページ名（オプション）
  * @param {boolean} options.requiresAuth - 認証が必要かどうか（デフォルト: true）
  */
  function BasePage() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, BasePage);
    this.pageName = options.pageName || this.constructor.name.toLowerCase().replace('page', '');
    this.isInitialized = false;
    this.eventListeners = new Map();
    this.requiresAuth = options.requiresAuth !== false; // デフォルトはtrue
    this.initializationTime = null;
    this.errorCount = 0;
    this.maxRetries = 3;
    this.retryDelay = 1000; // 1秒
  }

  /**
  * ページを初期化
  * @param {Object} options - 初期化オプション
  * @param {boolean} options.force - 強制初期化（デフォルト: false）
  * @param {boolean} options.skipAuth - 認証チェックをスキップ（デフォルト: false）
  * @returns {Promise<boolean>} 初期化成功かどうか
  */
  return _createClass(BasePage, [{
    key: "initialize",
    value: (function () {
      var _initialize = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
        var options,
          startTime,
          _args = arguments,
          _t;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.p = _context.n) {
            case 0:
              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
              if (!(this.isInitialized && !options.force)) {
                _context.n = 1;
                break;
              }
              console.warn("\u26A0\uFE0F Page ".concat(this.pageName, " already initialized"));
              return _context.a(2, true);
            case 1:
              startTime = performance.now();
              this.errorCount = 0;
              _context.p = 2;
              console.log("\uD83D\uDD04 Initializing ".concat(this.pageName, " page..."));

              // 認証状態をチェック（スキップオプションがない場合）
              if (options.skipAuth) {
                _context.n = 3;
                break;
              }
              _context.n = 3;
              return this.checkAuthentication();
            case 3:
              _context.n = 4;
              return this.onInitialize();
            case 4:
              _context.n = 5;
              return this.loadData();
            case 5:
              // イベントリスナーの設定
              this.setupEventListeners();
              this.isInitialized = true;
              this.initializationTime = performance.now() - startTime;
              console.log("\u2705 ".concat(this.pageName, " page initialized successfully (").concat(this.initializationTime.toFixed(2), "ms)"));

              // 初期化完了イベントを発火
              this.dispatchEvent('pageInitialized', {
                pageName: this.pageName,
                initTime: this.initializationTime
              });
              return _context.a(2, true);
            case 6:
              _context.p = 6;
              _t = _context.v;
              this.errorCount++;
              console.error("\u274C Failed to initialize ".concat(this.pageName, " page (attempt ").concat(this.errorCount, "):"), _t);

              // リトライロジック
              if (!(this.errorCount < this.maxRetries)) {
                _context.n = 9;
                break;
              }
              console.log("\uD83D\uDD04 Retrying initialization in ".concat(this.retryDelay, "ms..."));
              _context.n = 7;
              return this.delay(this.retryDelay);
            case 7:
              _context.n = 8;
              return this.initialize(_objectSpread(_objectSpread({}, options), {}, {
                force: true
              }));
            case 8:
              return _context.a(2, _context.v);
            case 9:
              this.handleError(_t);
              return _context.a(2, false);
          }
        }, _callee, this, [[2, 6]]);
      }));
      function initialize() {
        return _initialize.apply(this, arguments);
      }
      return initialize;
    }()
    /**
    * 認証状態をチェック
    * @returns {Promise<boolean>} 認証状態
    */
    )
  }, {
    key: "checkAuthentication",
    value: (function () {
      var _checkAuthentication = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
        var isAuthenticated, isTestEnvironment, _t2;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.p = _context2.n) {
            case 0:
              _context2.p = 0;
              console.log("\uD83D\uDD10 Checking authentication for ".concat(this.pageName, " page (requiresAuth: ").concat(this.requiresAuth, ")"));

              // Supabaseが利用可能かチェック
              if (_supabaseService.supabaseService.isAvailable()) {
                _context2.n = 1;
                break;
              }
              console.log("\uD83D\uDD10 Supabase not available for ".concat(this.pageName, " page - skipping auth check"));
              return _context2.a(2, true);
            case 1:
              _context2.n = 2;
              return _authManager.authManager.isAuthenticated();
            case 2:
              isAuthenticated = _context2.v;
              console.log("\uD83D\uDD10 Authentication result for ".concat(this.pageName, ":"), {
                isAuthenticated: isAuthenticated,
                requiresAuth: this.requiresAuth
              });
              if (!(!isAuthenticated && this.requiresAuth)) {
                _context2.n = 5;
                break;
              }
              console.log("\uD83D\uDD10 Authentication required for ".concat(this.pageName, " page - redirecting to login"));
              (0, _helpers.showNotification)('ログインが必要です', 'warning');

              // リダイレクト前にイベントを発火
              this.dispatchEvent('authRequired', {
                pageName: this.pageName,
                redirectUrl: './index.html'
              });

              // テスト環境ではナビゲーションをモック
              if (!(typeof window !== 'undefined' && window.location)) {
                _context2.n = 4;
                break;
              }
              // CI環境でのJSDOMナビゲーション制限を回避
              isTestEnvironment = typeof process !== 'undefined' && (process.env.NODE_ENV === 'test' || process.env.JEST_WORKER_ID);
              if (!isTestEnvironment) {
                _context2.n = 3;
                break;
              }
              // テスト環境ではナビゲーションをスキップ
              console.log('Navigation skipped in test environment');
              return _context2.a(2, false);
            case 3:
              try {
                window.location.href = './index.html';
              } catch (error) {
                // JSDOM環境ではlocation.hrefの直接設定が失敗する可能性がある
                // その場合はassignメソッドを使用
                if (window.location.assign) {
                  window.location.assign('./index.html');
                } else {
                  console.warn('Navigation not available in test environment');
                }
              }
            case 4:
              return _context2.a(2, false);
            case 5:
              console.log("\uD83D\uDD10 Authentication check passed for ".concat(this.pageName, " page"));
              return _context2.a(2, isAuthenticated);
            case 6:
              _context2.p = 6;
              _t2 = _context2.v;
              console.error('❌ Authentication check failed:', _t2);
              (0, _errorHandler.handleError)(_t2, {
                context: 'BasePage.checkAuthentication',
                showNotification: true
              });
              return _context2.a(2, false);
          }
        }, _callee2, this, [[0, 6]]);
      }));
      function checkAuthentication() {
        return _checkAuthentication.apply(this, arguments);
      }
      return checkAuthentication;
    }()
    /**
    * ページ固有の初期化処理
    * サブクラスでオーバーライド
    * @returns {Promise<void>}
    */
    )
  }, {
    key: "onInitialize",
    value: (function () {
      var _onInitialize = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.n) {
            case 0:
              // サブクラスで実装
              console.log("\uD83D\uDCC4 ".concat(this.pageName, " page-specific initialization"));
            case 1:
              return _context3.a(2);
          }
        }, _callee3, this);
      }));
      function onInitialize() {
        return _onInitialize.apply(this, arguments);
      }
      return onInitialize;
    }()
    /**
    * イベントリスナーの設定
    * サブクラスでオーバーライド
    */
    )
  }, {
    key: "setupEventListeners",
    value: function setupEventListeners() {
      // サブクラスで実装
      console.log("\uD83C\uDFA7 Setting up event listeners for ".concat(this.pageName, " page"));
    }

    /**
    * データの読み込み
    * サブクラスでオーバーライド
    * @returns {Promise<any>} 読み込まれたデータ
    */
  }, {
    key: "loadData",
    value: (function () {
      var _loadData = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.n) {
            case 0:
              // サブクラスで実装
              console.log("\uD83D\uDCCA Loading data for ".concat(this.pageName, " page"));
              return _context4.a(2, null);
          }
        }, _callee4, this);
      }));
      function loadData() {
        return _loadData.apply(this, arguments);
      }
      return loadData;
    }()
    /**
    * エラーハンドリング
    * @param {Error} error - エラーオブジェクト
    * @param {Object} options - エラーハンドリングオプション
    * @param {boolean} options.showNotification - 通知を表示するかどうか
    * @param {boolean} options.showErrorPage - エラーページを表示するかどうか
    */
    )
  }, {
    key: "handleError",
    value: function handleError(error) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _options$showNotifica = options.showNotification,
        shouldShowNotification = _options$showNotifica === void 0 ? true : _options$showNotifica,
        _options$showErrorPag = options.showErrorPage,
        shouldShowErrorPage = _options$showErrorPag === void 0 ? true : _options$showErrorPag;
      console.error("\u274C Error in ".concat(this.pageName, " page:"), error);

      // エラーハンドラーに委譲
      (0, _errorHandler.handleError)(error, {
        context: "BasePage.".concat(this.pageName),
        showNotification: shouldShowNotification,
        severity: 'error'
      });

      // ユーザーにエラーを通知
      if (shouldShowNotification) {
        (0, _helpers.showNotification)('ページの読み込み中にエラーが発生しました', 'error');
      }

      // エラーページを表示
      if (shouldShowErrorPage) {
        this.showErrorPage(error);
      }

      // エラーイベントを発火
      this.dispatchEvent('pageError', {
        pageName: this.pageName,
        error: error.message,
        stack: error.stack
      });
    }

    /**
    * エラーページを表示
    */
  }, {
    key: "showErrorPage",
    value: function showErrorPage(error) {
      var mainContent = document.getElementById('main-content');
      if (mainContent) {
        mainContent.innerHTML = "\n        <div class=\"min-h-screen flex items-center justify-center\">\n          <div class=\"text-center\">\n            <div class=\"text-red-500 text-6xl mb-4\">\n              <i class=\"fas fa-exclamation-triangle\"></i>\n            </div>\n            <h1 class=\"text-2xl font-bold text-gray-800 mb-2\">\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F</h1>\n            <p class=\"text-gray-600 mb-4\">\u30DA\u30FC\u30B8\u306E\u8AAD\u307F\u8FBC\u307F\u4E2D\u306B\u554F\u984C\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u3002</p>\n            <div class=\"space-x-4\">\n              <button onclick=\"window.location.reload()\" class=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\">\n                \u518D\u8AAD\u307F\u8FBC\u307F\n              </button>\n              <button onclick=\"window.location.href='/index.html'\" class=\"bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600\">\n                \u30DB\u30FC\u30E0\u306B\u623B\u308B\n              </button>\n            </div>\n            ".concat(typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'development' ? "\n              <details class=\"mt-4 text-left\">\n                <summary class=\"cursor-pointer text-sm text-gray-500\">\u30A8\u30E9\u30FC\u8A73\u7D30</summary>\n                <pre class=\"text-xs text-red-600 mt-2 p-2 bg-red-50 rounded\">".concat(error.stack, "</pre>\n              </details>\n            ") : '', "\n          </div>\n        </div>\n      ");
      }
    }

    /**
    * イベントリスナーを追加
    */
  }, {
    key: "addEventListener",
    value: function addEventListener(element, event, handler) {
      if (element && typeof handler === 'function') {
        element.addEventListener(event, handler);

        // イベントリスナーを記録（後でクリーンアップ用）
        var key = "".concat(element.id || 'unknown', "_").concat(event);
        this.eventListeners.set(key, {
          element: element,
          event: event,
          handler: handler
        });
      }
    }

    /**
    * イベントリスナーを削除
    */
  }, {
    key: "removeEventListener",
    value: function removeEventListener(element, event, handler) {
      if (element && typeof handler === 'function') {
        element.removeEventListener(event, handler);
        var key = "".concat(element.id || 'unknown', "_").concat(event);
        this.eventListeners["delete"](key);
      }
    }

    /**
    * 全イベントリスナーをクリーンアップ
    */
  }, {
    key: "cleanup",
    value: function cleanup() {
      this.eventListeners.forEach(function (_ref) {
        var element = _ref.element,
          event = _ref.event,
          handler = _ref.handler;
        element.removeEventListener(event, handler);
      });
      this.eventListeners.clear();
    }

    /**
    * ページを破棄
    */
  }, {
    key: "destroy",
    value: function destroy() {
      this.cleanup();
      this.isInitialized = false;
      console.log("\uD83D\uDDD1\uFE0F ".concat(this.pageName, " page destroyed"));
    }

    /**
    * データを保存
    */
  }, {
    key: "saveData",
    value: (function () {
      var _saveData = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(data) {
        var _t3;
        return _regenerator().w(function (_context5) {
          while (1) switch (_context5.p = _context5.n) {
            case 0:
              _context5.p = 0;
              if (!_supabaseService.supabaseService.isAvailable()) {
                _context5.n = 2;
                break;
              }
              _context5.n = 1;
              return _supabaseService.supabaseService.saveData(data);
            case 1:
              return _context5.a(2, _context5.v);
            case 2:
              _context5.n = 3;
              return this.saveToLocalStorage(data);
            case 3:
              return _context5.a(2, _context5.v);
            case 4:
              _context5.n = 6;
              break;
            case 5:
              _context5.p = 5;
              _t3 = _context5.v;
              console.error('Failed to save data:', _t3);
              throw _t3;
            case 6:
              return _context5.a(2);
          }
        }, _callee5, this, [[0, 5]]);
      }));
      function saveData(_x) {
        return _saveData.apply(this, arguments);
      }
      return saveData;
    }()
    /**
    * ローカルストレージに保存
    */
    )
  }, {
    key: "saveToLocalStorage",
    value: (function () {
      var _saveToLocalStorage = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(data) {
        var key, existingData;
        return _regenerator().w(function (_context6) {
          while (1) switch (_context6.n) {
            case 0:
              key = "".concat(this.pageName, "_data");
              existingData = JSON.parse(localStorage.getItem(key) || '[]');
              existingData.push(_objectSpread(_objectSpread({}, data), {}, {
                timestamp: new Date().toISOString(),
                id: Date.now().toString()
              }));
              localStorage.setItem(key, JSON.stringify(existingData));
              return _context6.a(2, existingData[existingData.length - 1]);
          }
        }, _callee6, this);
      }));
      function saveToLocalStorage(_x2) {
        return _saveToLocalStorage.apply(this, arguments);
      }
      return saveToLocalStorage;
    }()
    /**
    * データを読み込み
    */
    )
  }, {
    key: "loadDataFromStorage",
    value: (function () {
      var _loadDataFromStorage = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
        var _t4;
        return _regenerator().w(function (_context7) {
          while (1) switch (_context7.p = _context7.n) {
            case 0:
              _context7.p = 0;
              if (!_supabaseService.supabaseService.isAvailable()) {
                _context7.n = 2;
                break;
              }
              _context7.n = 1;
              return _supabaseService.supabaseService.loadData(this.pageName);
            case 1:
              return _context7.a(2, _context7.v);
            case 2:
              _context7.n = 3;
              return this.loadFromLocalStorage();
            case 3:
              return _context7.a(2, _context7.v);
            case 4:
              _context7.n = 6;
              break;
            case 5:
              _context7.p = 5;
              _t4 = _context7.v;
              console.error('Failed to load data:', _t4);
              return _context7.a(2, []);
            case 6:
              return _context7.a(2);
          }
        }, _callee7, this, [[0, 5]]);
      }));
      function loadDataFromStorage() {
        return _loadDataFromStorage.apply(this, arguments);
      }
      return loadDataFromStorage;
    }()
    /**
    * ローカルストレージから読み込み
    */
    )
  }, {
    key: "loadFromLocalStorage",
    value: (function () {
      var _loadFromLocalStorage = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
        var key;
        return _regenerator().w(function (_context8) {
          while (1) switch (_context8.n) {
            case 0:
              key = "".concat(this.pageName, "_data");
              return _context8.a(2, JSON.parse(localStorage.getItem(key) || '[]'));
          }
        }, _callee8, this);
      }));
      function loadFromLocalStorage() {
        return _loadFromLocalStorage.apply(this, arguments);
      }
      return loadFromLocalStorage;
    }()
    /**
    * ページの状態を取得
    * @returns {Object} ページの状態
    */
    )
  }, {
    key: "getState",
    value: function getState() {
      return {
        pageName: this.pageName,
        isInitialized: this.isInitialized,
        eventListenersCount: this.eventListeners.size,
        initializationTime: this.initializationTime,
        errorCount: this.errorCount,
        requiresAuth: this.requiresAuth
      };
    }

    /**
    * カスタムイベントを発火
    * @param {string} eventName - イベント名
    * @param {Object} detail - イベント詳細
    */
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(eventName) {
      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var event = new CustomEvent(eventName, {
        detail: _objectSpread({
          pageName: this.pageName,
          timestamp: new Date().toISOString()
        }, detail)
      });
      window.dispatchEvent(event);
    }

    /**
    * 遅延実行
    * @param {number} ms - 遅延時間（ミリ秒）
    * @returns {Promise<void>}
    */
  }, {
    key: "delay",
    value: function delay(ms) {
      return new Promise(function (resolve) {
        return setTimeout(resolve, ms);
      });
    }

    /**
    * ページのパフォーマンス情報を取得
    * @returns {Object} パフォーマンス情報
    */
  }, {
    key: "getPerformanceInfo",
    value: function getPerformanceInfo() {
      return {
        pageName: this.pageName,
        initializationTime: this.initializationTime,
        errorCount: this.errorCount,
        eventListenersCount: this.eventListeners.size,
        memoryUsage: performance.memory ? {
          used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024),
          total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024),
          limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024)
        } : null
      };
    }

    /**
    * ページの健全性チェック
    * @returns {Object} 健全性チェック結果
    */
  }, {
    key: "healthCheck",
    value: function healthCheck() {
      var issues = [];
      if (this.errorCount > 5) {
        issues.push('High error count');
      }
      if (this.eventListeners.size > 50) {
        issues.push('Too many event listeners');
      }
      if (this.initializationTime && this.initializationTime > 5000) {
        issues.push('Slow initialization');
      }
      return {
        isHealthy: issues.length === 0,
        issues: issues,
        score: Math.max(0, 100 - issues.length * 20)
      };
    }

    /**
    * ページの最適化を実行
    * @returns {Promise<void>}
    */
  }, {
    key: "optimize",
    value: (function () {
      var _optimize = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {
        return _regenerator().w(function (_context9) {
          while (1) switch (_context9.n) {
            case 0:
              console.log("\uD83D\uDD27 Optimizing ".concat(this.pageName, " page..."));

              // 不要なイベントリスナーの削除
              this.cleanup();

              // メモリ使用量の最適化
              if (window.gc) {
                window.gc();
              }
              console.log("\u2705 ".concat(this.pageName, " page optimization complete"));
            case 1:
              return _context9.a(2);
          }
        }, _callee9, this);
      }));
      function optimize() {
        return _optimize.apply(this, arguments);
      }
      return optimize;
    }())
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,