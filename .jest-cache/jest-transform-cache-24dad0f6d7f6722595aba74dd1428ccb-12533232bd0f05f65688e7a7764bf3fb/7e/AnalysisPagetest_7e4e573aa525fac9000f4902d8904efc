581068d8c80b59e39e50d5baff50b5c6
"use strict";

// モックの設定
_getJestObj().mock('../../js/services/supabaseService.js', function () {
  return {
    supabaseService: {
      getCurrentUser: jest.fn(),
      loadData: jest.fn(),
      isAvailable: jest.fn(),
      getWorkouts: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/services/muscleGroupService.js', function () {
  return {
    muscleGroupService: {
      getMuscleGroups: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/services/progressiveOverloadService.js', function () {
  return {
    progressiveOverloadService: {
      getOverallProgress: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/services/workoutDataService.js', function () {
  return {
    workoutDataService: {
      loadWorkouts: jest.fn(),
      saveWorkout: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/modules/authManager.js', function () {
  return {
    authManager: {
      isAuthenticated: jest.fn(),
      showAuthModal: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    showNotification: jest.fn(),
    safeAsync: jest.fn(),
    safeGetElement: jest.fn()
  };
});
_getJestObj().mock('../../js/utils/errorHandler.js', function () {
  return {
    handleError: jest.fn()
  };
});
var _analysisPage = require("../../js/pages/analysisPage.js");
var _supabaseService = require("../../js/services/supabaseService.js");
var _muscleGroupService = require("../../js/services/muscleGroupService.js");
var _authManager = require("../../js/modules/authManager.js");
var _helpers = require("../../js/utils/helpers.js");
var _errorHandler = require("../../js/utils/errorHandler.js");
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
/**
 * AnalysisPage テストスイート
 */
describe('AnalysisPage', function () {
  var analysisPage;
  beforeEach(function () {
    jest.clearAllMocks();
    document.body.innerHTML = '<div id="main-content"></div>';
    _helpers.safeGetElement.mockReturnValue(document.querySelector('#main-content'));
    analysisPage = new _analysisPage.AnalysisPage();
  });
  describe('constructor', function () {
    it('should initialize with default values', function () {
      expect(analysisPage.workoutData).toEqual([]);
      expect(analysisPage.charts).toEqual({});
      expect(analysisPage.isLoading).toBe(false);
    });
  });
  describe('initialize', function () {
    it('should initialize successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var consoleSpy;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            _helpers.safeAsync.mockImplementation(/*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(fn) {
                return _regenerator().w(function (_context) {
                  while (1) switch (_context.n) {
                    case 0:
                      _context.n = 1;
                      return fn();
                    case 1:
                      return _context.a(2, _context.v);
                  }
                }, _callee);
              }));
              return function (_x) {
                return _ref2.apply(this, arguments);
              };
            }());
            _context2.n = 1;
            return analysisPage.initialize();
          case 1:
            expect(consoleSpy).toHaveBeenCalledWith('Analysis page initialized');
            consoleSpy.mockRestore();
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    it('should handle initialization errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var originalRenderAnalysisPage;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            // safeAsync をエラーを投げるようにモック
            _helpers.safeAsync.mockImplementation(/*#__PURE__*/function () {
              var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(fn, context, errorHandler) {
                var _t;
                return _regenerator().w(function (_context3) {
                  while (1) switch (_context3.p = _context3.n) {
                    case 0:
                      _context3.p = 0;
                      _context3.n = 1;
                      return fn();
                    case 1:
                      _context3.n = 3;
                      break;
                    case 2:
                      _context3.p = 2;
                      _t = _context3.v;
                      errorHandler(_t);
                    case 3:
                      return _context3.a(2);
                  }
                }, _callee3, null, [[0, 2]]);
              }));
              return function (_x2, _x3, _x4) {
                return _ref4.apply(this, arguments);
              };
            }());

            // エラーを発生させるために、renderAnalysisPageでエラーを投げる
            originalRenderAnalysisPage = analysisPage.renderAnalysisPage;
            analysisPage.renderAnalysisPage = jest.fn().mockImplementation(function () {
              throw new Error('Render error');
            });
            _context4.n = 1;
            return analysisPage.initialize();
          case 1:
            expect(_errorHandler.handleError).toHaveBeenCalledWith(expect.any(Error), expect.objectContaining({
              context: '分析ページ初期化',
              showNotification: true
            }));

            // 元のメソッドを復元
            analysisPage.renderAnalysisPage = originalRenderAnalysisPage;
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
  });
  describe('showLoginPrompt', function () {
    it('should render login prompt', function () {
      analysisPage.showLoginPrompt();
      var mainContent = document.querySelector('#main-content');
      expect(mainContent.innerHTML).toContain('ログインが必要です');
      expect(mainContent.innerHTML).toContain('ログイン');
      expect(mainContent.innerHTML).toContain('ホームに戻る');
    });
    it('should setup login button event listener', function () {
      analysisPage.showLoginPrompt();
      var loginBtn = document.getElementById('login-btn');
      expect(loginBtn).toBeTruthy();
    });
    it('should return early if main content is not found', function () {
      _helpers.safeGetElement.mockReturnValue(null);
      expect(function () {
        return analysisPage.showLoginPrompt();
      }).not.toThrow();
    });
  });
  describe('renderAnalysisPage', function () {
    it('should render analysis page content', function () {
      analysisPage.renderAnalysisPage();
      var mainContent = document.querySelector('#main-content');
      expect(mainContent.innerHTML).toContain('分析');
    });
    it('should return early if main content is not found', function () {
      _helpers.safeGetElement.mockReturnValue(null);
      expect(function () {
        return analysisPage.renderAnalysisPage();
      }).not.toThrow();
    });
  });
  describe('loadWorkoutData', function () {
    it('should load workout data from localStorage', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var mockWorkoutData;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            mockWorkoutData = [{
              id: 1,
              date: '2024-01-01',
              exercises: []
            }, {
              id: 2,
              date: '2024-01-02',
              exercises: []
            }]; // localStorage のモック
            Object.defineProperty(window, 'localStorage', {
              value: {
                getItem: jest.fn().mockReturnValue(JSON.stringify(mockWorkoutData)),
                setItem: jest.fn(),
                removeItem: jest.fn()
              },
              writable: true
            });
            _context5.n = 1;
            return analysisPage.loadWorkoutData();
          case 1:
            expect(window.localStorage.getItem).toHaveBeenCalledWith('workoutHistory');
            expect(analysisPage.workoutData).toEqual(mockWorkoutData);
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
    it('should handle workout data loading errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            // localStorage.getItem をエラーを投げるようにモック
            Object.defineProperty(window, 'localStorage', {
              value: {
                getItem: jest.fn().mockImplementation(function () {
                  throw new Error('localStorage error');
                }),
                setItem: jest.fn(),
                removeItem: jest.fn()
              },
              writable: true
            });
            _context6.n = 1;
            return analysisPage.loadWorkoutData();
          case 1:
            // エラーが発生した場合、サンプルデータが生成される
            expect(analysisPage.workoutData.length).toBeGreaterThan(0);
            expect(_helpers.showNotification).toHaveBeenCalledWith('ワークアウトデータの読み込みに失敗しました', 'error');
          case 2:
            return _context6.a(2);
        }
      }, _callee6);
    })));
  });
  describe('renderStatistics', function () {
    it('should render statistics', function () {
      analysisPage.workoutData = [{
        id: 1,
        date: '2024-01-01',
        exercises: []
      }];
      analysisPage.renderStatistics();

      // 統計がレンダリングされることを確認
      expect(analysisPage.workoutData).toHaveLength(1);
    });
  });
  describe('renderCharts', function () {
    it('should render charts', function () {
      analysisPage.workoutData = [{
        id: 1,
        date: '2024-01-01',
        exercises: []
      }];
      analysisPage.renderCharts();

      // チャートがレンダリングされることを確認
      expect(analysisPage.workoutData).toHaveLength(1);
    });
  });
  describe('generateAnalysisReport', function () {
    it('should generate analysis report', function () {
      analysisPage.workoutData = [{
        id: 1,
        date: '2024-01-01',
        exercises: []
      }];
      analysisPage.generateAnalysisReport();

      // レポートが生成されることを確認
      expect(analysisPage.workoutData).toHaveLength(1);
    });
  });
  describe('integration', function () {
    it('should complete full initialization flow', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
      var consoleSpy;
      return _regenerator().w(function (_context8) {
        while (1) switch (_context8.n) {
          case 0:
            consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            _helpers.safeAsync.mockImplementation(/*#__PURE__*/function () {
              var _ref8 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(fn) {
                return _regenerator().w(function (_context7) {
                  while (1) switch (_context7.n) {
                    case 0:
                      _context7.n = 1;
                      return fn();
                    case 1:
                      return _context7.a(2, _context7.v);
                  }
                }, _callee7);
              }));
              return function (_x5) {
                return _ref8.apply(this, arguments);
              };
            }());
            _context8.n = 1;
            return analysisPage.initialize();
          case 1:
            expect(consoleSpy).toHaveBeenCalledWith('Analysis page initialized');
            consoleSpy.mockRestore();
          case 2:
            return _context8.a(2);
        }
      }, _callee8);
    })));
    it('should handle multiple initialization calls', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {
      return _regenerator().w(function (_context0) {
        while (1) switch (_context0.n) {
          case 0:
            _helpers.safeAsync.mockImplementation(/*#__PURE__*/function () {
              var _ref0 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9(fn) {
                return _regenerator().w(function (_context9) {
                  while (1) switch (_context9.n) {
                    case 0:
                      _context9.n = 1;
                      return fn();
                    case 1:
                      return _context9.a(2, _context9.v);
                  }
                }, _callee9);
              }));
              return function (_x6) {
                return _ref0.apply(this, arguments);
              };
            }());
            _context0.n = 1;
            return analysisPage.initialize();
          case 1:
            _context0.n = 2;
            return analysisPage.initialize();
          case 2:
            // 複数回の初期化が正常に処理されることを確認
            expect(analysisPage.workoutData).toBeDefined();
          case 3:
            return _context0.a(2);
        }
      }, _callee0);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,