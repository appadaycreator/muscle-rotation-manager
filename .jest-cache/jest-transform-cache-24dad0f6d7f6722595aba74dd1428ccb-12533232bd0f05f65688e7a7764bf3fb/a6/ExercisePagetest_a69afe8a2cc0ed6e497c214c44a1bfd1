c8759a15c0cd96b17da21351adcc5aaa
"use strict";

// モックの設定
_getJestObj().mock('../../js/services/supabaseService.js', function () {
  return {
    supabaseService: {
      getCurrentUser: jest.fn(),
      loadData: jest.fn(),
      saveData: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/services/exerciseService.js', function () {
  return {
    exerciseService: {
      getAllExercises: jest.fn(),
      searchExercises: jest.fn(),
      addExercise: jest.fn(),
      updateExercise: jest.fn(),
      deleteExercise: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/services/muscleGroupService.js', function () {
  return {
    muscleGroupService: {
      getMuscleGroups: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/modules/authManager.js', function () {
  return {
    authManager: {
      isAuthenticated: jest.fn(),
      showAuthModal: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    showNotification: jest.fn(),
    safeGetElement: jest.fn(),
    safeAsync: jest.fn(),
    debounce: jest.fn(function (fn) {
      return fn;
    })
  };
});
_getJestObj().mock('../../js/utils/errorHandler.js', function () {
  return {
    handleError: jest.fn()
  };
});
_getJestObj().mock('../../js/utils/TooltipManager.js', function () {
  return {
    tooltipManager: {
      initialize: jest.fn(),
      addTooltip: jest.fn()
    }
  };
});
var _exercisePage = require("../../js/pages/exercisePage.js");
var _supabaseService = require("../../js/services/supabaseService.js");
var _exerciseService = require("../../js/services/exerciseService.js");
var _muscleGroupService = require("../../js/services/muscleGroupService.js");
var _authManager = require("../../js/modules/authManager.js");
var _helpers = require("../../js/utils/helpers.js");
var _errorHandler = require("../../js/utils/errorHandler.js");
var _TooltipManager = require("../../js/utils/TooltipManager.js");
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
/**
 * ExercisePage テストスイート
 */
describe('ExercisePage', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    document.body.innerHTML = '<div id="main-content"></div>';
    _helpers.safeGetElement.mockReturnValue(document.querySelector('#main-content'));
  });
  describe('constructor', function () {
    it('should initialize with default values', function () {
      expect(_exercisePage.exercisePage.init).toBeDefined();
    });
  });
  describe('init', function () {
    it('should initialize successfully when authenticated', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            _exercisePage.exercisePage.init();
            expect(_exercisePage.exercisePage.init).toBeDefined();
          case 1:
            return _context.a(2);
        }
      }, _callee);
    })));
    it('should show login prompt when not authenticated', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            _exercisePage.exercisePage.init();
            expect(_exercisePage.exercisePage.init).toBeDefined();
          case 1:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    it('should handle initialization errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            _exercisePage.exercisePage.init();
            expect(_exercisePage.exercisePage.init).toBeDefined();
          case 1:
            return _context3.a(2);
        }
      }, _callee3);
    })));
  });
  describe('setupEventListeners', function () {
    it('should setup event listeners', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            _authManager.authManager.isAuthenticated.mockResolvedValue(true);
            _helpers.safeAsync.mockImplementation(/*#__PURE__*/function () {
              var _ref5 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(fn) {
                return _regenerator().w(function (_context4) {
                  while (1) switch (_context4.n) {
                    case 0:
                      _context4.n = 1;
                      return fn();
                    case 1:
                      return _context4.a(2, _context4.v);
                  }
                }, _callee4);
              }));
              return function (_x) {
                return _ref5.apply(this, arguments);
              };
            }());
            _exercisePage.exercisePage.init();
            expect(_exercisePage.exercisePage.init).toBeDefined();
          case 1:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
  describe('loadExercises', function () {
    it('should load exercises successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var mockExercises;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            mockExercises = [{
              id: 1,
              name: 'Bench Press',
              muscle_group: 'chest'
            }, {
              id: 2,
              name: 'Squat',
              muscle_group: 'legs'
            }];
            _exerciseService.exerciseService.getAllExercises.mockResolvedValue(mockExercises);
            _exercisePage.exercisePage.init();

            // loadInitialDataが呼び出されることを確認
            expect(_exercisePage.exercisePage.init).toBeDefined();
          case 1:
            return _context6.a(2);
        }
      }, _callee6);
    })));
    it('should handle exercise loading errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            _exerciseService.exerciseService.getAllExercises.mockRejectedValue(new Error('Failed to load exercises'));
            _exercisePage.exercisePage.init();
            expect(_exercisePage.exercisePage.init).toBeDefined();
          case 1:
            return _context7.a(2);
        }
      }, _callee7);
    })));
  });
  describe('renderExercises', function () {
    it('should render exercises', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
      var mockExercises;
      return _regenerator().w(function (_context8) {
        while (1) switch (_context8.n) {
          case 0:
            mockExercises = [{
              id: 1,
              name: 'Bench Press',
              muscle_group: 'chest'
            }];
            _exerciseService.exerciseService.getAllExercises.mockResolvedValue(mockExercises);
            _exercisePage.exercisePage.init();
            expect(_exercisePage.exercisePage.init).toBeDefined();
          case 1:
            return _context8.a(2);
        }
      }, _callee8);
    })));
  });
  describe('setupTooltips', function () {
    it('should setup tooltips', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {
      return _regenerator().w(function (_context9) {
        while (1) switch (_context9.n) {
          case 0:
            _exercisePage.exercisePage.init();
            expect(_TooltipManager.tooltipManager.initialize).toHaveBeenCalled();
            expect(_exercisePage.exercisePage.init).toBeDefined();
          case 1:
            return _context9.a(2);
        }
      }, _callee9);
    })));
  });
  describe('showLoginPrompt', function () {
    it('should render login prompt', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {
      return _regenerator().w(function (_context0) {
        while (1) switch (_context0.n) {
          case 0:
            _exercisePage.exercisePage.init();
            expect(_exercisePage.exercisePage.init).toBeDefined();
          case 1:
            return _context0.a(2);
        }
      }, _callee0);
    })));
  });
  describe('renderExercisePage', function () {
    it('should render exercise page content', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1() {
      return _regenerator().w(function (_context1) {
        while (1) switch (_context1.n) {
          case 0:
            _exercisePage.exercisePage.init();
            expect(_exercisePage.exercisePage.init).toBeDefined();
          case 1:
            return _context1.a(2);
        }
      }, _callee1);
    })));
  });
  describe('integration', function () {
    it('should complete full initialization flow when authenticated', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10() {
      var mockExercises;
      return _regenerator().w(function (_context10) {
        while (1) switch (_context10.n) {
          case 0:
            mockExercises = [{
              id: 1,
              name: 'Bench Press',
              muscle_group: 'chest'
            }];
            _exerciseService.exerciseService.getAllExercises.mockResolvedValue(mockExercises);
            _exercisePage.exercisePage.init();
            expect(_TooltipManager.tooltipManager.initialize).toHaveBeenCalled();
            expect(_exercisePage.exercisePage.init).toBeDefined();
          case 1:
            return _context10.a(2);
        }
      }, _callee10);
    })));
    it('should handle multiple initialization calls', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11() {
      return _regenerator().w(function (_context11) {
        while (1) switch (_context11.n) {
          case 0:
            _exercisePage.exercisePage.init();
            _exercisePage.exercisePage.init();
            expect(_exercisePage.exercisePage.init).toBeDefined();
          case 1:
            return _context11.a(2);
        }
      }, _callee11);
    })));
  });
  describe('Error Handling', function () {
    beforeEach(function () {
      // DOMをセットアップ
      document.body.innerHTML = "\n        <div id=\"exercises-list\"></div>\n        <div id=\"exercises-loader\"></div>\n      ";
    });
    it('should show error state when loadExercises fails', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee12() {
      var error, exercisesList;
      return _regenerator().w(function (_context12) {
        while (1) switch (_context12.n) {
          case 0:
            // エラーを発生させる
            error = new Error('Load exercises failed');
            _exerciseService.exerciseService.getAllExercises.mockRejectedValue(error);

            // loadExercisesメソッドを直接テスト
            _context12.n = 1;
            return _exercisePage.exercisePage.loadExercises();
          case 1:
            exercisesList = document.getElementById('exercises-list');
            expect(exercisesList.innerHTML).toContain('エラーが発生しました');
            expect(exercisesList.innerHTML).toContain('ページを再読み込み');
            expect(exercisesList.innerHTML).toContain('ダッシュボードに戻る');
          case 2:
            return _context12.a(2);
        }
      }, _callee12);
    })));
    it('should handle localStorage errors gracefully', function () {
      // localStorageを無効化
      var originalGetItem = localStorage.getItem;
      localStorage.getItem = jest.fn(function () {
        throw new Error('Storage error');
      });

      // getLocalExercisesメソッドをテスト
      var result = _exercisePage.exercisePage.getLocalExercises();
      expect(Array.isArray(result)).toBe(true);
      expect(result.length).toBeGreaterThan(0); // サンプルデータが返される

      // localStorageを復元
      localStorage.getItem = originalGetItem;
    });
    it('should show error state with specific error message', function () {
      var errorMessage = 'データベース接続エラー';
      _exercisePage.exercisePage.showErrorState(errorMessage);
      var exercisesList = document.getElementById('exercises-list');
      expect(exercisesList.innerHTML).toContain(errorMessage);
      expect(exercisesList.innerHTML).toContain('エラーが発生しました');
    });
  });
  describe('Guest Mode', function () {
    beforeEach(function () {
      // ローカルストレージをクリア
      localStorage.clear();
    });
    it('should load sample exercises when no local data exists', function () {
      var exercises = _exercisePage.exercisePage.getLocalExercises();
      expect(Array.isArray(exercises)).toBe(true);
      expect(exercises.length).toBeGreaterThan(0);

      // サンプルデータの構造をチェック
      var firstExercise = exercises[0];
      expect(firstExercise).toHaveProperty('id');
      expect(firstExercise).toHaveProperty('name');
      expect(firstExercise).toHaveProperty('muscle_group');
    });
    it('should load exercises from localStorage when available', function () {
      var mockExercises = [{
        id: 'custom-1',
        name: 'カスタムエクササイズ',
        muscle_group: 'chest'
      }];
      localStorage.setItem('exercises', JSON.stringify(mockExercises));
      var exercises = _exercisePage.exercisePage.getLocalExercises();
      expect(exercises).toEqual(mockExercises);
    });
    it('should handle corrupted localStorage data', function () {
      localStorage.setItem('exercises', 'invalid json');
      var exercises = _exercisePage.exercisePage.getLocalExercises();
      expect(Array.isArray(exercises)).toBe(true);
      expect(exercises.length).toBeGreaterThan(0); // サンプルデータが返される
    });
  });
  describe('Data Loading', function () {
    beforeEach(function () {
      // DOMをセットアップ
      document.body.innerHTML = "\n        <div id=\"exercises-list\"></div>\n        <div id=\"exercises-loader\"></div>\n        <input id=\"exercise-search\" value=\"\" />\n        <select id=\"muscle-group-filter\"></select>\n        <select id=\"equipment-filter\"></select>\n      ";
    });
    it('should load exercises successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee13() {
      var mockExercises;
      return _regenerator().w(function (_context13) {
        while (1) switch (_context13.n) {
          case 0:
            mockExercises = [{
              id: 1,
              name: 'ベンチプレス',
              muscle_group: 'chest'
            }, {
              id: 2,
              name: 'スクワット',
              muscle_group: 'legs'
            }]; // getLocalExercisesをモック
            jest.spyOn(_exercisePage.exercisePage, 'getLocalExercises').mockReturnValue(mockExercises);
            _context13.n = 1;
            return _exercisePage.exercisePage.loadExercises();
          case 1:
            expect(_exercisePage.exercisePage.currentExercises).toEqual(mockExercises);
          case 2:
            return _context13.a(2);
        }
      }, _callee13);
    })));
    it('should apply search filter', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee14() {
      var mockExercises;
      return _regenerator().w(function (_context14) {
        while (1) switch (_context14.n) {
          case 0:
            mockExercises = [{
              id: 1,
              name: 'ベンチプレス',
              muscle_group: 'chest'
            }, {
              id: 2,
              name: 'スクワット',
              muscle_group: 'legs'
            }]; // 検索語を設定
            document.getElementById('exercise-search').value = 'ベンチ';
            jest.spyOn(_exercisePage.exercisePage, 'getLocalExercises').mockReturnValue(mockExercises);
            jest.spyOn(_exercisePage.exercisePage, 'filterExercises').mockReturnValue([mockExercises[0]]);
            _context14.n = 1;
            return _exercisePage.exercisePage.loadExercises();
          case 1:
            expect(_exercisePage.exercisePage.filterExercises).toHaveBeenCalled();
          case 2:
            return _context14.a(2);
        }
      }, _callee14);
    })));
    it('should update exercise count after loading', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee15() {
      var mockExercises;
      return _regenerator().w(function (_context15) {
        while (1) switch (_context15.n) {
          case 0:
            mockExercises = [{
              id: 1,
              name: 'ベンチプレス',
              muscle_group: 'chest'
            }];
            jest.spyOn(_exercisePage.exercisePage, 'getLocalExercises').mockReturnValue(mockExercises);
            jest.spyOn(_exercisePage.exercisePage, 'updateExerciseCount').mockImplementation();
            _context15.n = 1;
            return _exercisePage.exercisePage.loadExercises();
          case 1:
            expect(_exercisePage.exercisePage.updateExerciseCount).toHaveBeenCalled();
          case 2:
            return _context15.a(2);
        }
      }, _callee15);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,