{"version":3,"names":["_workoutDataService","require","_createForOfIteratorHelper","r","e","t","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","n","done","value","f","TypeError","o","a","u","call","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","_typeof","prototype","ownKeys","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","_regenerator","toStringTag","i","c","Generator","create","_regeneratorDefine2","p","y","G","v","d","bind","l","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","w","m","_regeneratorDefine","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","_next","_throw","_classCallCheck","_defineProperties","key","_createClass","_toPrimitive","toPrimitive","String","Number","ProgressiveOverloadService","exports","analysisCache","Map","cacheExpiry","_getExerciseProgress","_callee","exerciseName","days","cacheKey","cached","workouts","exerciseData","analysis","_args","_t","_context","undefined","concat","getCachedAnalysis","workoutDataService","loadWorkouts","limit","filterExerciseData","period","totalSessions","progressMetrics","calculateProgressMetrics","volumeProgression","calculateVolumeProgression","intensityProgression","calculateIntensityProgression","recommendations","generateRecommendations","trends","analyzeTrends","lastUpdated","Date","toISOString","setCachedAnalysis","console","error","getExerciseProgress","_x","_getMuscleGroupProgress","_callee2","muscleGroup","muscleData","_args2","_t2","_context2","filterMuscleGroupData","exercises","analyzeMuscleGroupExercises","calculateMuscleGroupVolumeProgression","frequencyAnalysis","analyzeMuscleGroupFrequency","generateMuscleGroupRecommendations","getMuscleGroupProgress","_x2","_getOverallProgress","_callee3","recentWorkouts","_args3","_t3","_t4","_t5","_t6","_t7","_t8","_t9","_t0","_t1","_context3","filterRecentWorkouts","calculateOverallMetrics","calculateAllMuscleGroupProgress","calculateAllExerciseProgress","calculateConsistencyScore","generateOverallRecommendations","totalWorkouts","overallMetrics","muscleGroupProgress","exerciseProgress","consistencyScore","getOverallProgress","cutoffDate","setDate","getDate","workout","workoutDate","date","startTime","map","exercise","toLowerCase","includes","muscleGroups","muscle_groups","some","muscle","averageWeight","averageReps","averageSets","sessions","weight","reps","sets","volume","sort","b","firstHalf","Math","ceil","secondHalf","floor","firstHalfAvgVolume","calculateAverageVolume","secondHalfAvgVolume","firstHalfAvgWeight","calculateAverageWeight","secondHalfAvgWeight","round","calculateAverageReps","calculateAverageSets","intensity","exerciseCounts","firstSession","lastSession","weightProgress","totalVolume","reduce","sum","exerciseCount","duration","averageDaysBetween","frequencyScore","lastWorkout","nextRecommended","intervals","interval","idealInterval","max","abs","totalDuration","averageDuration","muscleGroupDistribution","averageVolumePerWorkout","validWorkouts","exerciseSum","warn","muscleGroupCounts","result","log","_calculateAllMuscleGroupProgress","_callee4","progress","_iterator","_step","_t10","_t11","_context4","Set","add","_x3","_calculateAllExerciseProgress","_callee5","_iterator2","_step2","_t12","_t13","_context5","_x4","averageInterval","variance","pow","standardDeviation","sqrt","metrics","type","priority","message","action","weightTrend","volumeTrend","consistencyTrend","calculateLinearTrend","values","x","_","sumX","val","sumY","sumXY","sumXX","slope","session","get","now","timestamp","data","set","clearCache","clear","progressiveOverloadService"],"sources":["progressiveOverloadService.js"],"sourcesContent":["// js/services/progressiveOverloadService.js - プログレッシブ・オーバーロード分析サービス\n\nimport { workoutDataService } from './workoutDataService.js';\n\n/**\n * プログレッシブ・オーバーロード分析サービス\n * トレーニングの進歩を定量的に分析し、最適化提案を行う\n */\nexport class ProgressiveOverloadService {\n  constructor() {\n    this.analysisCache = new Map();\n    this.cacheExpiry = 5 * 60 * 1000; // 5分間キャッシュ\n  }\n\n  /**\n   * エクササイズ別の進歩分析を取得\n   * @param {string} exerciseName - エクササイズ名\n   * @param {number} days - 分析期間（日数）\n   * @returns {Promise<Object>} 進歩分析データ\n   */\n  async getExerciseProgress(exerciseName, days = 90) {\n    const cacheKey = `exercise_${exerciseName}_${days}`;\n    const cached = this.getCachedAnalysis(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const workouts = await workoutDataService.loadWorkouts({ limit: 1000 });\n      const exerciseData = this.filterExerciseData(\n        workouts,\n        exerciseName,\n        days\n      );\n\n      const analysis = {\n        exerciseName,\n        period: days,\n        totalSessions: exerciseData.length,\n        progressMetrics: this.calculateProgressMetrics(exerciseData),\n        volumeProgression: this.calculateVolumeProgression(exerciseData),\n        intensityProgression: this.calculateIntensityProgression(exerciseData),\n        recommendations: this.generateRecommendations(exerciseData),\n        trends: this.analyzeTrends(exerciseData),\n        lastUpdated: new Date().toISOString(),\n      };\n\n      this.setCachedAnalysis(cacheKey, analysis);\n      return analysis;\n    } catch (error) {\n      console.error('Error analyzing exercise progress:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 部位別の進歩分析を取得\n   * @param {string} muscleGroup - 筋肉部位\n   * @param {number} days - 分析期間（日数）\n   * @returns {Promise<Object>} 部位別進歩分析データ\n   */\n  async getMuscleGroupProgress(muscleGroup, days = 90) {\n    const cacheKey = `muscle_${muscleGroup}_${days}`;\n    const cached = this.getCachedAnalysis(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const workouts = await workoutDataService.loadWorkouts({ limit: 1000 });\n      const muscleData = this.filterMuscleGroupData(\n        workouts,\n        muscleGroup,\n        days\n      );\n\n      const analysis = {\n        muscleGroup,\n        period: days,\n        totalSessions: muscleData.length,\n        exercises: this.analyzeMuscleGroupExercises(muscleData),\n        volumeProgression:\n          this.calculateMuscleGroupVolumeProgression(muscleData),\n        frequencyAnalysis: this.analyzeMuscleGroupFrequency(muscleData),\n        recommendations: this.generateMuscleGroupRecommendations(muscleData),\n        lastUpdated: new Date().toISOString(),\n      };\n\n      this.setCachedAnalysis(cacheKey, analysis);\n      return analysis;\n    } catch (error) {\n      console.error('Error analyzing muscle group progress:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 総合的な進歩分析を取得\n   * @param {number} days - 分析期間（日数）\n   * @returns {Promise<Object>} 総合進歩分析データ\n   */\n  async getOverallProgress(days = 90) {\n    const cacheKey = `overall_${days}`;\n    const cached = this.getCachedAnalysis(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const workouts = await workoutDataService.loadWorkouts({ limit: 1000 });\n      const recentWorkouts = this.filterRecentWorkouts(workouts, days);\n\n      const analysis = {\n        period: days,\n        totalWorkouts: recentWorkouts.length,\n        overallMetrics: this.calculateOverallMetrics(recentWorkouts),\n        muscleGroupProgress:\n          await this.calculateAllMuscleGroupProgress(recentWorkouts),\n        exerciseProgress:\n          await this.calculateAllExerciseProgress(recentWorkouts),\n        consistencyScore: this.calculateConsistencyScore(recentWorkouts),\n        recommendations: this.generateOverallRecommendations(recentWorkouts),\n        lastUpdated: new Date().toISOString(),\n      };\n\n      this.setCachedAnalysis(cacheKey, analysis);\n      return analysis;\n    } catch (error) {\n      console.error('Error analyzing overall progress:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * エクササイズデータをフィルタリング\n   * @param {Array} workouts - ワークアウトデータ\n   * @param {string} exerciseName - エクササイズ名\n   * @param {number} days - 期間\n   * @returns {Array} フィルタされたデータ\n   */\n  filterExerciseData(workouts, exerciseName, days) {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - days);\n\n    return workouts\n      .filter((workout) => {\n        const workoutDate = new Date(workout.date || workout.startTime);\n        return workoutDate >= cutoffDate;\n      })\n      .map((workout) => ({\n        ...workout,\n        exerciseData: (workout.exercises || []).filter(\n          (exercise) =>\n            exercise.name &&\n            exercise.name.toLowerCase().includes(exerciseName.toLowerCase())\n        ),\n      }))\n      .filter((workout) => workout.exerciseData.length > 0);\n  }\n\n  /**\n   * 筋肉部位データをフィルタリング\n   * @param {Array} workouts - ワークアウトデータ\n   * @param {string} muscleGroup - 筋肉部位\n   * @param {number} days - 期間\n   * @returns {Array} フィルタされたデータ\n   */\n  filterMuscleGroupData(workouts, muscleGroup, days) {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - days);\n\n    return workouts\n      .filter((workout) => {\n        const workoutDate = new Date(workout.date || workout.startTime);\n        return workoutDate >= cutoffDate;\n      })\n      .filter((workout) => {\n        const muscleGroups = workout.muscle_groups || [];\n        return muscleGroups.some((muscle) =>\n          muscle.toLowerCase().includes(muscleGroup.toLowerCase())\n        );\n      });\n  }\n\n  /**\n   * 最近のワークアウトをフィルタリング\n   * @param {Array} workouts - ワークアウトデータ\n   * @param {number} days - 期間\n   * @returns {Array} フィルタされたデータ\n   */\n  filterRecentWorkouts(workouts, days) {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - days);\n\n    return workouts.filter((workout) => {\n      const workoutDate = new Date(workout.date || workout.startTime);\n      return workoutDate >= cutoffDate;\n    });\n  }\n\n  /**\n   * 進歩メトリクスを計算\n   * @param {Array} exerciseData - エクササイズデータ\n   * @returns {Object} 進歩メトリクス\n   */\n  calculateProgressMetrics(exerciseData) {\n    if (exerciseData.length === 0) {\n      return {\n        volumeProgression: 0,\n        intensityProgression: 0,\n        consistencyScore: 0,\n        averageWeight: 0,\n        averageReps: 0,\n        averageSets: 0,\n      };\n    }\n\n    const sessions = exerciseData\n      .map((workout) => {\n        const exercise = workout.exerciseData[0];\n        return {\n          date: new Date(workout.date || workout.startTime),\n          weight: exercise.weight || 0,\n          reps: exercise.reps || 0,\n          sets: exercise.sets || 0,\n          volume:\n            (exercise.weight || 0) *\n            (exercise.reps || 0) *\n            (exercise.sets || 0),\n        };\n      })\n      .sort((a, b) => a.date - b.date);\n\n    const firstHalf = sessions.slice(0, Math.ceil(sessions.length / 2));\n    const secondHalf = sessions.slice(Math.floor(sessions.length / 2));\n\n    const firstHalfAvgVolume = this.calculateAverageVolume(firstHalf);\n    const secondHalfAvgVolume = this.calculateAverageVolume(secondHalf);\n    const volumeProgression =\n      firstHalfAvgVolume > 0\n        ? ((secondHalfAvgVolume - firstHalfAvgVolume) / firstHalfAvgVolume) *\n          100\n        : 0;\n\n    const firstHalfAvgWeight = this.calculateAverageWeight(firstHalf);\n    const secondHalfAvgWeight = this.calculateAverageWeight(secondHalf);\n    const intensityProgression =\n      firstHalfAvgWeight > 0\n        ? ((secondHalfAvgWeight - firstHalfAvgWeight) / firstHalfAvgWeight) *\n          100\n        : 0;\n\n    return {\n      volumeProgression: Math.round(volumeProgression * 10) / 10,\n      intensityProgression: Math.round(intensityProgression * 10) / 10,\n      consistencyScore: this.calculateConsistencyScore(exerciseData),\n      averageWeight:\n        Math.round(this.calculateAverageWeight(sessions) * 10) / 10,\n      averageReps: Math.round(this.calculateAverageReps(sessions) * 10) / 10,\n      averageSets: Math.round(this.calculateAverageSets(sessions) * 10) / 10,\n      totalSessions: sessions.length,\n    };\n  }\n\n  /**\n   * ボリューム進歩を計算\n   * @param {Array} exerciseData - エクササイズデータ\n   * @returns {Array} ボリューム進歩データ\n   */\n  calculateVolumeProgression(exerciseData) {\n    return exerciseData\n      .map((workout) => {\n        const exercise = workout.exerciseData[0];\n        const volume =\n          (exercise.weight || 0) * (exercise.reps || 0) * (exercise.sets || 0);\n        return {\n          date: new Date(workout.date || workout.startTime),\n          volume,\n          weight: exercise.weight || 0,\n          reps: exercise.reps || 0,\n          sets: exercise.sets || 0,\n        };\n      })\n      .sort((a, b) => a.date - b.date);\n  }\n\n  /**\n   * 強度進歩を計算\n   * @param {Array} exerciseData - エクササイズデータ\n   * @returns {Array} 強度進歩データ\n   */\n  calculateIntensityProgression(exerciseData) {\n    return exerciseData\n      .map((workout) => {\n        const exercise = workout.exerciseData[0];\n        return {\n          date: new Date(workout.date || workout.startTime),\n          weight: exercise.weight || 0,\n          reps: exercise.reps || 0,\n          sets: exercise.sets || 0,\n          intensity: exercise.weight || 0,\n        };\n      })\n      .sort((a, b) => a.date - b.date);\n  }\n\n  /**\n   * 筋肉部位のエクササイズ分析\n   * @param {Array} muscleData - 筋肉部位データ\n   * @returns {Object} エクササイズ分析\n   */\n  analyzeMuscleGroupExercises(muscleData) {\n    const exerciseCounts = {};\n    const exerciseProgress = {};\n\n    muscleData.forEach((workout) => {\n      (workout.exercises || []).forEach((exercise) => {\n        const exerciseName = exercise.name;\n        if (!exerciseCounts[exerciseName]) {\n          exerciseCounts[exerciseName] = 0;\n          exerciseProgress[exerciseName] = [];\n        }\n        exerciseCounts[exerciseName]++;\n        exerciseProgress[exerciseName].push({\n          date: new Date(workout.date || workout.startTime),\n          weight: exercise.weight || 0,\n          reps: exercise.reps || 0,\n          sets: exercise.sets || 0,\n        });\n      });\n    });\n\n    // 各エクササイズの進歩を計算\n    Object.keys(exerciseProgress).forEach((exerciseName) => {\n      const sessions = exerciseProgress[exerciseName].sort(\n        (a, b) => a.date - b.date\n      );\n      if (sessions.length >= 2) {\n        const firstSession = sessions[0];\n        const lastSession = sessions[sessions.length - 1];\n        const weightProgress =\n          firstSession.weight > 0\n            ? ((lastSession.weight - firstSession.weight) /\n                firstSession.weight) *\n              100\n            : 0;\n\n        exerciseProgress[exerciseName] = {\n          sessions: sessions,\n          weightProgress: Math.round(weightProgress * 10) / 10,\n          totalSessions: sessions.length,\n        };\n      }\n    });\n\n    return {\n      exerciseCounts,\n      exerciseProgress,\n    };\n  }\n\n  /**\n   * 筋肉部位のボリューム進歩を計算\n   * @param {Array} muscleData - 筋肉部位データ\n   * @returns {Array} ボリューム進歩データ\n   */\n  calculateMuscleGroupVolumeProgression(muscleData) {\n    return muscleData\n      .map((workout) => {\n        const totalVolume = (workout.exercises || []).reduce(\n          (sum, exercise) => {\n            return (\n              sum +\n              (exercise.weight || 0) *\n                (exercise.reps || 0) *\n                (exercise.sets || 0)\n            );\n          },\n          0\n        );\n\n        return {\n          date: new Date(workout.date || workout.startTime),\n          volume: totalVolume,\n          exerciseCount: (workout.exercises || []).length,\n          duration: workout.duration || 0,\n        };\n      })\n      .sort((a, b) => a.date - b.date);\n  }\n\n  /**\n   * 筋肉部位の頻度分析\n   * @param {Array} muscleData - 筋肉部位データ\n   * @returns {Object} 頻度分析データ\n   */\n  analyzeMuscleGroupFrequency(muscleData) {\n    const sessions = muscleData\n      .map((workout) => ({\n        date: new Date(workout.date || workout.startTime),\n      }))\n      .sort((a, b) => a.date - b.date);\n\n    if (sessions.length === 0) {\n      return {\n        averageDaysBetween: 0,\n        frequencyScore: 0,\n        lastWorkout: null,\n        nextRecommended: null,\n      };\n    }\n\n    // セッション間隔を計算\n    const intervals = [];\n    for (let i = 1; i < sessions.length; i++) {\n      const interval =\n        (sessions[i].date - sessions[i - 1].date) / (1000 * 60 * 60 * 24);\n      intervals.push(interval);\n    }\n\n    const averageDaysBetween =\n      intervals.length > 0\n        ? intervals.reduce((sum, interval) => sum + interval, 0) /\n          intervals.length\n        : 0;\n\n    const lastWorkout = sessions[sessions.length - 1].date;\n\n    // 頻度スコア（理想的には2-3日間隔）\n    const idealInterval = 2.5;\n    const frequencyScore =\n      averageDaysBetween > 0\n        ? Math.max(0, 100 - Math.abs(averageDaysBetween - idealInterval) * 20)\n        : 0;\n\n    const nextRecommended = new Date(lastWorkout);\n    nextRecommended.setDate(\n      nextRecommended.getDate() + Math.round(averageDaysBetween)\n    );\n\n    return {\n      averageDaysBetween: Math.round(averageDaysBetween * 10) / 10,\n      frequencyScore: Math.round(frequencyScore),\n      lastWorkout,\n      nextRecommended,\n      totalSessions: sessions.length,\n    };\n  }\n\n  /**\n   * 総合メトリクスを計算\n   * @param {Array} workouts - ワークアウトデータ\n   * @returns {Object} 総合メトリクス\n   */\n  calculateOverallMetrics(workouts) {\n    try {\n      if (!workouts || !Array.isArray(workouts) || workouts.length === 0) {\n        return {\n          totalVolume: 0,\n          totalDuration: 0,\n          averageDuration: 0,\n          muscleGroupDistribution: {},\n          totalWorkouts: 0,\n          averageVolumePerWorkout: 0,\n        };\n      }\n\n      // データの検証とクリーニング\n      const validWorkouts = workouts.filter((workout) => {\n        return (\n          workout &&\n          typeof workout === 'object' &&\n          (workout.exercises ||\n            workout.muscle_groups ||\n            workout.duration !== undefined)\n        );\n      });\n\n      if (validWorkouts.length === 0) {\n        return {\n          totalVolume: 0,\n          totalDuration: 0,\n          averageDuration: 0,\n          muscleGroupDistribution: {},\n          totalWorkouts: 0,\n          averageVolumePerWorkout: 0,\n        };\n      }\n\n      const totalVolume = validWorkouts.reduce((sum, workout) => {\n        if (!workout.exercises || !Array.isArray(workout.exercises)) {\n          return sum;\n        }\n\n        return (\n          sum +\n          workout.exercises.reduce((exerciseSum, exercise) => {\n            if (!exercise || typeof exercise !== 'object') {\n              return exerciseSum;\n            }\n\n            const weight = Number(exercise.weight) || 0;\n            const reps = Number(exercise.reps) || 0;\n            const sets = Number(exercise.sets) || 0;\n\n            // 異常値のチェック（重量1000kg以上、回数100回以上、セット数20以上は除外）\n            if (weight > 1000 || reps > 100 || sets > 20) {\n              console.warn('Suspicious exercise data detected:', exercise);\n              return exerciseSum;\n            }\n\n            return exerciseSum + weight * reps * sets;\n          }, 0)\n        );\n      }, 0);\n\n      const totalDuration = validWorkouts.reduce((sum, workout) => {\n        const duration = Number(workout.duration) || 0;\n        // 異常値のチェック（5時間以上は除外）\n        if (duration > 300) {\n          console.warn('Suspicious duration detected:', duration);\n          return sum;\n        }\n        return sum + duration;\n      }, 0);\n\n      const averageDuration =\n        validWorkouts.length > 0 ? totalDuration / validWorkouts.length : 0;\n\n      const muscleGroupCounts = {};\n      validWorkouts.forEach((workout) => {\n        if (workout.muscle_groups && Array.isArray(workout.muscle_groups)) {\n          workout.muscle_groups.forEach((muscle) => {\n            if (muscle && typeof muscle === 'string') {\n              muscleGroupCounts[muscle] = (muscleGroupCounts[muscle] || 0) + 1;\n            }\n          });\n        }\n      });\n\n      const result = {\n        totalVolume: Math.round(totalVolume),\n        totalDuration: Math.round(totalDuration / 60), // 分単位\n        averageDuration: Math.round(averageDuration / 60), // 分単位\n        muscleGroupDistribution: muscleGroupCounts,\n        totalWorkouts: validWorkouts.length,\n        averageVolumePerWorkout:\n          validWorkouts.length > 0\n            ? Math.round(totalVolume / validWorkouts.length)\n            : 0,\n      };\n\n      console.log('Overall metrics calculated:', result);\n      return result;\n    } catch (error) {\n      console.error('Error calculating overall metrics:', error);\n      return {\n        totalVolume: 0,\n        totalDuration: 0,\n        averageDuration: 0,\n        muscleGroupDistribution: {},\n        totalWorkouts: 0,\n        averageVolumePerWorkout: 0,\n      };\n    }\n  }\n\n  /**\n   * 全筋肉部位の進歩を計算\n   * @param {Array} workouts - ワークアウトデータ\n   * @returns {Promise<Object>} 全筋肉部位進歩データ\n   */\n  async calculateAllMuscleGroupProgress(workouts) {\n    const muscleGroups = new Set();\n    workouts.forEach((workout) => {\n      (workout.muscle_groups || []).forEach((muscle) =>\n        muscleGroups.add(muscle)\n      );\n    });\n\n    const progress = {};\n    for (const muscleGroup of muscleGroups) {\n      try {\n        progress[muscleGroup] = await this.getMuscleGroupProgress(\n          muscleGroup,\n          90\n        );\n      } catch (error) {\n        console.warn(\n          `Error calculating progress for muscle group ${muscleGroup}:`,\n          error\n        );\n        progress[muscleGroup] = null;\n      }\n    }\n\n    return progress;\n  }\n\n  /**\n   * 全エクササイズの進歩を計算\n   * @param {Array} workouts - ワークアウトデータ\n   * @returns {Promise<Object>} 全エクササイズ進歩データ\n   */\n  async calculateAllExerciseProgress(workouts) {\n    const exercises = new Set();\n    workouts.forEach((workout) => {\n      (workout.exercises || []).forEach((exercise) => {\n        if (exercise.name) exercises.add(exercise.name);\n      });\n    });\n\n    const progress = {};\n    for (const exerciseName of exercises) {\n      try {\n        progress[exerciseName] = await this.getExerciseProgress(\n          exerciseName,\n          90\n        );\n      } catch (error) {\n        console.warn(\n          `Error calculating progress for exercise ${exerciseName}:`,\n          error\n        );\n        progress[exerciseName] = null;\n      }\n    }\n\n    return progress;\n  }\n\n  /**\n   * 一貫性スコアを計算\n   * @param {Array} workouts - ワークアウトデータ\n   * @returns {number} 一貫性スコア（0-100）\n   */\n  calculateConsistencyScore(workouts) {\n    if (workouts.length < 2) return 0;\n\n    const sessions = workouts\n      .map((workout) => ({\n        date: new Date(workout.date || workout.startTime),\n      }))\n      .sort((a, b) => a.date - b.date);\n\n    // セッション間隔の一貫性を計算\n    const intervals = [];\n    for (let i = 1; i < sessions.length; i++) {\n      const interval =\n        (sessions[i].date - sessions[i - 1].date) / (1000 * 60 * 60 * 24);\n      intervals.push(interval);\n    }\n\n    if (intervals.length === 0) return 0;\n\n    const averageInterval =\n      intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length;\n    const variance =\n      intervals.reduce(\n        (sum, interval) => sum + Math.pow(interval - averageInterval, 2),\n        0\n      ) / intervals.length;\n    const standardDeviation = Math.sqrt(variance);\n\n    // 標準偏差が小さいほど一貫性が高い\n    const consistencyScore = Math.max(0, 100 - standardDeviation * 10);\n    return Math.round(consistencyScore);\n  }\n\n  /**\n   * 推奨事項を生成\n   * @param {Array} exerciseData - エクササイズデータ\n   * @returns {Array} 推奨事項配列\n   */\n  generateRecommendations(exerciseData) {\n    const recommendations = [];\n    const metrics = this.calculateProgressMetrics(exerciseData);\n\n    if (metrics.volumeProgression < 5) {\n      recommendations.push({\n        type: 'volume',\n        priority: 'high',\n        message:\n          'ボリュームの増加が停滞しています。セット数やレップ数を増やすことを検討してください。',\n        action: 'セット数を1-2セット増やすか、レップ数を2-3回増やす',\n      });\n    }\n\n    if (metrics.intensityProgression < 2) {\n      recommendations.push({\n        type: 'intensity',\n        priority: 'medium',\n        message:\n          '重量の増加が緩やかです。より重い重量にチャレンジしてみてください。',\n        action: '重量を2.5-5kg増やすか、より重い重量でレップ数を減らす',\n      });\n    }\n\n    if (metrics.consistencyScore < 70) {\n      recommendations.push({\n        type: 'consistency',\n        priority: 'high',\n        message: 'トレーニングの一貫性を改善する必要があります。',\n        action: '定期的なスケジュールを設定し、週2-3回の頻度を維持する',\n      });\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push({\n        type: 'positive',\n        priority: 'low',\n        message: '素晴らしい進歩です！現在のトレーニングを継続してください。',\n        action: '現在のプログラムを維持し、必要に応じて微調整する',\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * 筋肉部位の推奨事項を生成\n   * @param {Array} muscleData - 筋肉部位データ\n   * @returns {Array} 推奨事項配列\n   */\n  generateMuscleGroupRecommendations(muscleData) {\n    const recommendations = [];\n    const frequencyAnalysis = this.analyzeMuscleGroupFrequency(muscleData);\n\n    if (frequencyAnalysis.frequencyScore < 60) {\n      recommendations.push({\n        type: 'frequency',\n        priority: 'high',\n        message: 'この部位のトレーニング頻度が低すぎます。',\n        action: '週1-2回の頻度でトレーニングを増やす',\n      });\n    }\n\n    if (frequencyAnalysis.averageDaysBetween > 7) {\n      recommendations.push({\n        type: 'recovery',\n        priority: 'medium',\n        message: 'トレーニング間隔が長すぎる可能性があります。',\n        action:\n          'より頻繁にトレーニングするか、他の部位との組み合わせを検討する',\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * 総合推奨事項を生成\n   * @param {Array} workouts - ワークアウトデータ\n   * @returns {Array} 推奨事項配列\n   */\n  generateOverallRecommendations(workouts) {\n    const recommendations = [];\n    const metrics = this.calculateOverallMetrics(workouts);\n    const consistencyScore = this.calculateConsistencyScore(workouts);\n\n    if (consistencyScore < 60) {\n      recommendations.push({\n        type: 'consistency',\n        priority: 'high',\n        message: 'トレーニングの一貫性を改善しましょう。',\n        action: '定期的なスケジュールを設定し、週3-4回の頻度を目標にする',\n      });\n    }\n\n    if (metrics.averageVolumePerWorkout < 1000) {\n      recommendations.push({\n        type: 'volume',\n        priority: 'medium',\n        message: 'セッションあたりのボリュームを増やすことを検討してください。',\n        action: 'エクササイズ数やセット数を増やす',\n      });\n    }\n\n    const muscleGroups = Object.keys(metrics.muscleGroupDistribution);\n    if (muscleGroups.length < 4) {\n      recommendations.push({\n        type: 'balance',\n        priority: 'medium',\n        message: 'より多くの筋肉部位をトレーニングしましょう。',\n        action: '新しいエクササイズや筋肉部位を追加する',\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * トレンドを分析\n   * @param {Array} exerciseData - エクササイズデータ\n   * @returns {Object} トレンド分析データ\n   */\n  analyzeTrends(exerciseData) {\n    const sessions = exerciseData\n      .map((workout) => {\n        const exercise = workout.exerciseData[0];\n        return {\n          date: new Date(workout.date || workout.startTime),\n          weight: exercise.weight || 0,\n          reps: exercise.reps || 0,\n          sets: exercise.sets || 0,\n          volume:\n            (exercise.weight || 0) *\n            (exercise.reps || 0) *\n            (exercise.sets || 0),\n        };\n      })\n      .sort((a, b) => a.date - b.date);\n\n    if (sessions.length < 3) {\n      return {\n        weightTrend: 'insufficient_data',\n        volumeTrend: 'insufficient_data',\n        consistencyTrend: 'insufficient_data',\n      };\n    }\n\n    // 線形回帰でトレンドを計算\n    const weightTrend = this.calculateLinearTrend(\n      sessions.map((s) => s.weight)\n    );\n    const volumeTrend = this.calculateLinearTrend(\n      sessions.map((s) => s.volume)\n    );\n\n    return {\n      weightTrend:\n        weightTrend > 0.1\n          ? 'increasing'\n          : weightTrend < -0.1\n            ? 'decreasing'\n            : 'stable',\n      volumeTrend:\n        volumeTrend > 0.1\n          ? 'increasing'\n          : volumeTrend < -0.1\n            ? 'decreasing'\n            : 'stable',\n      consistencyTrend:\n        this.calculateConsistencyScore(exerciseData) > 70\n          ? 'good'\n          : 'needs_improvement',\n    };\n  }\n\n  /**\n   * 線形トレンドを計算\n   * @param {Array} values - 値の配列\n   * @returns {number} トレンド係数\n   */\n  calculateLinearTrend(values) {\n    const n = values.length;\n    const x = Array.from({ length: n }, (_, i) => i);\n    const y = values;\n\n    const sumX = x.reduce((sum, val) => sum + val, 0);\n    const sumY = y.reduce((sum, val) => sum + val, 0);\n    const sumXY = x.reduce((sum, val, i) => sum + val * y[i], 0);\n    const sumXX = x.reduce((sum, val) => sum + val * val, 0);\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    return slope;\n  }\n\n  // ヘルパーメソッド\n  calculateAverageVolume(sessions) {\n    return sessions.length > 0\n      ? sessions.reduce((sum, session) => sum + session.volume, 0) /\n          sessions.length\n      : 0;\n  }\n\n  calculateAverageWeight(sessions) {\n    return sessions.length > 0\n      ? sessions.reduce((sum, session) => sum + session.weight, 0) /\n          sessions.length\n      : 0;\n  }\n\n  calculateAverageReps(sessions) {\n    return sessions.length > 0\n      ? sessions.reduce((sum, session) => sum + session.reps, 0) /\n          sessions.length\n      : 0;\n  }\n\n  calculateAverageSets(sessions) {\n    return sessions.length > 0\n      ? sessions.reduce((sum, session) => sum + session.sets, 0) /\n          sessions.length\n      : 0;\n  }\n\n  // キャッシュ管理\n  getCachedAnalysis(key) {\n    const cached = this.analysisCache.get(key);\n    if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {\n      return cached.data;\n    }\n    return null;\n  }\n\n  setCachedAnalysis(key, data) {\n    this.analysisCache.set(key, {\n      data,\n      timestamp: Date.now(),\n    });\n  }\n\n  /**\n   * キャッシュをクリア\n   */\n  clearCache() {\n    this.analysisCache.clear();\n  }\n}\n\n// シングルトンインスタンスをエクスポート\nexport const progressiveOverloadService = new ProgressiveOverloadService();\n"],"mappings":"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","ignoreList":[]}