cefb550606eaf33e1feb6d1163ef8d55
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.progressiveOverloadService = exports.ProgressiveOverloadService = void 0;
var _workoutDataService = require("./workoutDataService.js");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // js/services/progressiveOverloadService.js - プログレッシブ・オーバーロード分析サービス
/**
 * プログレッシブ・オーバーロード分析サービス
 * トレーニングの進歩を定量的に分析し、最適化提案を行う
 */
var ProgressiveOverloadService = exports.ProgressiveOverloadService = /*#__PURE__*/function () {
  function ProgressiveOverloadService() {
    _classCallCheck(this, ProgressiveOverloadService);
    this.analysisCache = new Map();
    this.cacheExpiry = 5 * 60 * 1000; // 5分間キャッシュ
  }

  /**
   * エクササイズ別の進歩分析を取得
   * @param {string} exerciseName - エクササイズ名
   * @param {number} days - 分析期間（日数）
   * @returns {Promise<Object>} 進歩分析データ
   */
  return _createClass(ProgressiveOverloadService, [{
    key: "getExerciseProgress",
    value: (function () {
      var _getExerciseProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(exerciseName) {
        var days,
          cacheKey,
          cached,
          workouts,
          exerciseData,
          analysis,
          _args = arguments,
          _t;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.p = _context.n) {
            case 0:
              days = _args.length > 1 && _args[1] !== undefined ? _args[1] : 90;
              cacheKey = "exercise_".concat(exerciseName, "_").concat(days);
              cached = this.getCachedAnalysis(cacheKey);
              if (!cached) {
                _context.n = 1;
                break;
              }
              return _context.a(2, cached);
            case 1:
              _context.p = 1;
              _context.n = 2;
              return _workoutDataService.workoutDataService.loadWorkouts({
                limit: 1000
              });
            case 2:
              workouts = _context.v;
              exerciseData = this.filterExerciseData(workouts, exerciseName, days);
              analysis = {
                exerciseName: exerciseName,
                period: days,
                totalSessions: exerciseData.length,
                progressMetrics: this.calculateProgressMetrics(exerciseData),
                volumeProgression: this.calculateVolumeProgression(exerciseData),
                intensityProgression: this.calculateIntensityProgression(exerciseData),
                recommendations: this.generateRecommendations(exerciseData),
                trends: this.analyzeTrends(exerciseData),
                lastUpdated: new Date().toISOString()
              };
              this.setCachedAnalysis(cacheKey, analysis);
              return _context.a(2, analysis);
            case 3:
              _context.p = 3;
              _t = _context.v;
              console.error('Error analyzing exercise progress:', _t);
              throw _t;
            case 4:
              return _context.a(2);
          }
        }, _callee, this, [[1, 3]]);
      }));
      function getExerciseProgress(_x) {
        return _getExerciseProgress.apply(this, arguments);
      }
      return getExerciseProgress;
    }()
    /**
     * 部位別の進歩分析を取得
     * @param {string} muscleGroup - 筋肉部位
     * @param {number} days - 分析期間（日数）
     * @returns {Promise<Object>} 部位別進歩分析データ
     */
    )
  }, {
    key: "getMuscleGroupProgress",
    value: (function () {
      var _getMuscleGroupProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(muscleGroup) {
        var days,
          cacheKey,
          cached,
          workouts,
          muscleData,
          analysis,
          _args2 = arguments,
          _t2;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.p = _context2.n) {
            case 0:
              days = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 90;
              cacheKey = "muscle_".concat(muscleGroup, "_").concat(days);
              cached = this.getCachedAnalysis(cacheKey);
              if (!cached) {
                _context2.n = 1;
                break;
              }
              return _context2.a(2, cached);
            case 1:
              _context2.p = 1;
              _context2.n = 2;
              return _workoutDataService.workoutDataService.loadWorkouts({
                limit: 1000
              });
            case 2:
              workouts = _context2.v;
              muscleData = this.filterMuscleGroupData(workouts, muscleGroup, days);
              analysis = {
                muscleGroup: muscleGroup,
                period: days,
                totalSessions: muscleData.length,
                exercises: this.analyzeMuscleGroupExercises(muscleData),
                volumeProgression: this.calculateMuscleGroupVolumeProgression(muscleData),
                frequencyAnalysis: this.analyzeMuscleGroupFrequency(muscleData),
                recommendations: this.generateMuscleGroupRecommendations(muscleData),
                lastUpdated: new Date().toISOString()
              };
              this.setCachedAnalysis(cacheKey, analysis);
              return _context2.a(2, analysis);
            case 3:
              _context2.p = 3;
              _t2 = _context2.v;
              console.error('Error analyzing muscle group progress:', _t2);
              throw _t2;
            case 4:
              return _context2.a(2);
          }
        }, _callee2, this, [[1, 3]]);
      }));
      function getMuscleGroupProgress(_x2) {
        return _getMuscleGroupProgress.apply(this, arguments);
      }
      return getMuscleGroupProgress;
    }()
    /**
     * 総合的な進歩分析を取得
     * @param {number} days - 分析期間（日数）
     * @returns {Promise<Object>} 総合進歩分析データ
     */
    )
  }, {
    key: "getOverallProgress",
    value: (function () {
      var _getOverallProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
        var days,
          cacheKey,
          cached,
          workouts,
          recentWorkouts,
          analysis,
          _args3 = arguments,
          _t3,
          _t4,
          _t5,
          _t6,
          _t7,
          _t8,
          _t9,
          _t0,
          _t1;
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.p = _context3.n) {
            case 0:
              days = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : 90;
              cacheKey = "overall_".concat(days);
              cached = this.getCachedAnalysis(cacheKey);
              if (!cached) {
                _context3.n = 1;
                break;
              }
              return _context3.a(2, cached);
            case 1:
              _context3.p = 1;
              _context3.n = 2;
              return _workoutDataService.workoutDataService.loadWorkouts({
                limit: 1000
              });
            case 2:
              workouts = _context3.v;
              recentWorkouts = this.filterRecentWorkouts(workouts, days);
              _t3 = days;
              _t4 = recentWorkouts.length;
              _t5 = this.calculateOverallMetrics(recentWorkouts);
              _context3.n = 3;
              return this.calculateAllMuscleGroupProgress(recentWorkouts);
            case 3:
              _t6 = _context3.v;
              _context3.n = 4;
              return this.calculateAllExerciseProgress(recentWorkouts);
            case 4:
              _t7 = _context3.v;
              _t8 = this.calculateConsistencyScore(recentWorkouts);
              _t9 = this.generateOverallRecommendations(recentWorkouts);
              _t0 = new Date().toISOString();
              analysis = {
                period: _t3,
                totalWorkouts: _t4,
                overallMetrics: _t5,
                muscleGroupProgress: _t6,
                exerciseProgress: _t7,
                consistencyScore: _t8,
                recommendations: _t9,
                lastUpdated: _t0
              };
              this.setCachedAnalysis(cacheKey, analysis);
              return _context3.a(2, analysis);
            case 5:
              _context3.p = 5;
              _t1 = _context3.v;
              console.error('Error analyzing overall progress:', _t1);
              throw _t1;
            case 6:
              return _context3.a(2);
          }
        }, _callee3, this, [[1, 5]]);
      }));
      function getOverallProgress() {
        return _getOverallProgress.apply(this, arguments);
      }
      return getOverallProgress;
    }()
    /**
     * エクササイズデータをフィルタリング
     * @param {Array} workouts - ワークアウトデータ
     * @param {string} exerciseName - エクササイズ名
     * @param {number} days - 期間
     * @returns {Array} フィルタされたデータ
     */
    )
  }, {
    key: "filterExerciseData",
    value: function filterExerciseData(workouts, exerciseName, days) {
      var cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - days);
      return workouts.filter(function (workout) {
        var workoutDate = new Date(workout.date || workout.startTime);
        return workoutDate >= cutoffDate;
      }).map(function (workout) {
        return _objectSpread(_objectSpread({}, workout), {}, {
          exerciseData: (workout.exercises || []).filter(function (exercise) {
            return exercise.name && exercise.name.toLowerCase().includes(exerciseName.toLowerCase());
          })
        });
      }).filter(function (workout) {
        return workout.exerciseData.length > 0;
      });
    }

    /**
     * 筋肉部位データをフィルタリング
     * @param {Array} workouts - ワークアウトデータ
     * @param {string} muscleGroup - 筋肉部位
     * @param {number} days - 期間
     * @returns {Array} フィルタされたデータ
     */
  }, {
    key: "filterMuscleGroupData",
    value: function filterMuscleGroupData(workouts, muscleGroup, days) {
      var cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - days);
      return workouts.filter(function (workout) {
        var workoutDate = new Date(workout.date || workout.startTime);
        return workoutDate >= cutoffDate;
      }).filter(function (workout) {
        var muscleGroups = workout.muscle_groups || [];
        return muscleGroups.some(function (muscle) {
          return muscle.toLowerCase().includes(muscleGroup.toLowerCase());
        });
      });
    }

    /**
     * 最近のワークアウトをフィルタリング
     * @param {Array} workouts - ワークアウトデータ
     * @param {number} days - 期間
     * @returns {Array} フィルタされたデータ
     */
  }, {
    key: "filterRecentWorkouts",
    value: function filterRecentWorkouts(workouts, days) {
      var cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - days);
      return workouts.filter(function (workout) {
        var workoutDate = new Date(workout.date || workout.startTime);
        return workoutDate >= cutoffDate;
      });
    }

    /**
     * 進歩メトリクスを計算
     * @param {Array} exerciseData - エクササイズデータ
     * @returns {Object} 進歩メトリクス
     */
  }, {
    key: "calculateProgressMetrics",
    value: function calculateProgressMetrics(exerciseData) {
      if (exerciseData.length === 0) {
        return {
          volumeProgression: 0,
          intensityProgression: 0,
          consistencyScore: 0,
          averageWeight: 0,
          averageReps: 0,
          averageSets: 0
        };
      }
      var sessions = exerciseData.map(function (workout) {
        var exercise = workout.exerciseData[0];
        return {
          date: new Date(workout.date || workout.startTime),
          weight: exercise.weight || 0,
          reps: exercise.reps || 0,
          sets: exercise.sets || 0,
          volume: (exercise.weight || 0) * (exercise.reps || 0) * (exercise.sets || 0)
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
      var firstHalf = sessions.slice(0, Math.ceil(sessions.length / 2));
      var secondHalf = sessions.slice(Math.floor(sessions.length / 2));
      var firstHalfAvgVolume = this.calculateAverageVolume(firstHalf);
      var secondHalfAvgVolume = this.calculateAverageVolume(secondHalf);
      var volumeProgression = firstHalfAvgVolume > 0 ? (secondHalfAvgVolume - firstHalfAvgVolume) / firstHalfAvgVolume * 100 : 0;
      var firstHalfAvgWeight = this.calculateAverageWeight(firstHalf);
      var secondHalfAvgWeight = this.calculateAverageWeight(secondHalf);
      var intensityProgression = firstHalfAvgWeight > 0 ? (secondHalfAvgWeight - firstHalfAvgWeight) / firstHalfAvgWeight * 100 : 0;
      return {
        volumeProgression: Math.round(volumeProgression * 10) / 10,
        intensityProgression: Math.round(intensityProgression * 10) / 10,
        consistencyScore: this.calculateConsistencyScore(exerciseData),
        averageWeight: Math.round(this.calculateAverageWeight(sessions) * 10) / 10,
        averageReps: Math.round(this.calculateAverageReps(sessions) * 10) / 10,
        averageSets: Math.round(this.calculateAverageSets(sessions) * 10) / 10,
        totalSessions: sessions.length
      };
    }

    /**
     * ボリューム進歩を計算
     * @param {Array} exerciseData - エクササイズデータ
     * @returns {Array} ボリューム進歩データ
     */
  }, {
    key: "calculateVolumeProgression",
    value: function calculateVolumeProgression(exerciseData) {
      return exerciseData.map(function (workout) {
        var exercise = workout.exerciseData[0];
        var volume = (exercise.weight || 0) * (exercise.reps || 0) * (exercise.sets || 0);
        return {
          date: new Date(workout.date || workout.startTime),
          volume: volume,
          weight: exercise.weight || 0,
          reps: exercise.reps || 0,
          sets: exercise.sets || 0
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
    }

    /**
     * 強度進歩を計算
     * @param {Array} exerciseData - エクササイズデータ
     * @returns {Array} 強度進歩データ
     */
  }, {
    key: "calculateIntensityProgression",
    value: function calculateIntensityProgression(exerciseData) {
      return exerciseData.map(function (workout) {
        var exercise = workout.exerciseData[0];
        return {
          date: new Date(workout.date || workout.startTime),
          weight: exercise.weight || 0,
          reps: exercise.reps || 0,
          sets: exercise.sets || 0,
          intensity: exercise.weight || 0
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
    }

    /**
     * 筋肉部位のエクササイズ分析
     * @param {Array} muscleData - 筋肉部位データ
     * @returns {Object} エクササイズ分析
     */
  }, {
    key: "analyzeMuscleGroupExercises",
    value: function analyzeMuscleGroupExercises(muscleData) {
      var exerciseCounts = {};
      var exerciseProgress = {};
      muscleData.forEach(function (workout) {
        (workout.exercises || []).forEach(function (exercise) {
          var exerciseName = exercise.name;
          if (!exerciseCounts[exerciseName]) {
            exerciseCounts[exerciseName] = 0;
            exerciseProgress[exerciseName] = [];
          }
          exerciseCounts[exerciseName]++;
          exerciseProgress[exerciseName].push({
            date: new Date(workout.date || workout.startTime),
            weight: exercise.weight || 0,
            reps: exercise.reps || 0,
            sets: exercise.sets || 0
          });
        });
      });

      // 各エクササイズの進歩を計算
      Object.keys(exerciseProgress).forEach(function (exerciseName) {
        var sessions = exerciseProgress[exerciseName].sort(function (a, b) {
          return a.date - b.date;
        });
        if (sessions.length >= 2) {
          var firstSession = sessions[0];
          var lastSession = sessions[sessions.length - 1];
          var weightProgress = firstSession.weight > 0 ? (lastSession.weight - firstSession.weight) / firstSession.weight * 100 : 0;
          exerciseProgress[exerciseName] = {
            sessions: sessions,
            weightProgress: Math.round(weightProgress * 10) / 10,
            totalSessions: sessions.length
          };
        }
      });
      return {
        exerciseCounts: exerciseCounts,
        exerciseProgress: exerciseProgress
      };
    }

    /**
     * 筋肉部位のボリューム進歩を計算
     * @param {Array} muscleData - 筋肉部位データ
     * @returns {Array} ボリューム進歩データ
     */
  }, {
    key: "calculateMuscleGroupVolumeProgression",
    value: function calculateMuscleGroupVolumeProgression(muscleData) {
      return muscleData.map(function (workout) {
        var totalVolume = (workout.exercises || []).reduce(function (sum, exercise) {
          return sum + (exercise.weight || 0) * (exercise.reps || 0) * (exercise.sets || 0);
        }, 0);
        return {
          date: new Date(workout.date || workout.startTime),
          volume: totalVolume,
          exerciseCount: (workout.exercises || []).length,
          duration: workout.duration || 0
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
    }

    /**
     * 筋肉部位の頻度分析
     * @param {Array} muscleData - 筋肉部位データ
     * @returns {Object} 頻度分析データ
     */
  }, {
    key: "analyzeMuscleGroupFrequency",
    value: function analyzeMuscleGroupFrequency(muscleData) {
      var sessions = muscleData.map(function (workout) {
        return {
          date: new Date(workout.date || workout.startTime)
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
      if (sessions.length === 0) {
        return {
          averageDaysBetween: 0,
          frequencyScore: 0,
          lastWorkout: null,
          nextRecommended: null
        };
      }

      // セッション間隔を計算
      var intervals = [];
      for (var i = 1; i < sessions.length; i++) {
        var interval = (sessions[i].date - sessions[i - 1].date) / (1000 * 60 * 60 * 24);
        intervals.push(interval);
      }
      var averageDaysBetween = intervals.length > 0 ? intervals.reduce(function (sum, interval) {
        return sum + interval;
      }, 0) / intervals.length : 0;
      var lastWorkout = sessions[sessions.length - 1].date;

      // 頻度スコア（理想的には2-3日間隔）
      var idealInterval = 2.5;
      var frequencyScore = averageDaysBetween > 0 ? Math.max(0, 100 - Math.abs(averageDaysBetween - idealInterval) * 20) : 0;
      var nextRecommended = new Date(lastWorkout);
      nextRecommended.setDate(nextRecommended.getDate() + Math.round(averageDaysBetween));
      return {
        averageDaysBetween: Math.round(averageDaysBetween * 10) / 10,
        frequencyScore: Math.round(frequencyScore),
        lastWorkout: lastWorkout,
        nextRecommended: nextRecommended,
        totalSessions: sessions.length
      };
    }

    /**
     * 総合メトリクスを計算
     * @param {Array} workouts - ワークアウトデータ
     * @returns {Object} 総合メトリクス
     */
  }, {
    key: "calculateOverallMetrics",
    value: function calculateOverallMetrics(workouts) {
      try {
        if (!workouts || !Array.isArray(workouts) || workouts.length === 0) {
          return {
            totalVolume: 0,
            totalDuration: 0,
            averageDuration: 0,
            muscleGroupDistribution: {},
            totalWorkouts: 0,
            averageVolumePerWorkout: 0
          };
        }

        // データの検証とクリーニング
        var validWorkouts = workouts.filter(function (workout) {
          return workout && _typeof(workout) === 'object' && (workout.exercises || workout.muscle_groups || workout.duration !== undefined);
        });
        if (validWorkouts.length === 0) {
          return {
            totalVolume: 0,
            totalDuration: 0,
            averageDuration: 0,
            muscleGroupDistribution: {},
            totalWorkouts: 0,
            averageVolumePerWorkout: 0
          };
        }
        var totalVolume = validWorkouts.reduce(function (sum, workout) {
          if (!workout.exercises || !Array.isArray(workout.exercises)) {
            return sum;
          }
          return sum + workout.exercises.reduce(function (exerciseSum, exercise) {
            if (!exercise || _typeof(exercise) !== 'object') {
              return exerciseSum;
            }
            var weight = Number(exercise.weight) || 0;
            var reps = Number(exercise.reps) || 0;
            var sets = Number(exercise.sets) || 0;

            // 異常値のチェック（重量1000kg以上、回数100回以上、セット数20以上は除外）
            if (weight > 1000 || reps > 100 || sets > 20) {
              console.warn('Suspicious exercise data detected:', exercise);
              return exerciseSum;
            }
            return exerciseSum + weight * reps * sets;
          }, 0);
        }, 0);
        var totalDuration = validWorkouts.reduce(function (sum, workout) {
          var duration = Number(workout.duration) || 0;
          // 異常値のチェック（5時間以上は除外）
          if (duration > 300) {
            console.warn('Suspicious duration detected:', duration);
            return sum;
          }
          return sum + duration;
        }, 0);
        var averageDuration = validWorkouts.length > 0 ? totalDuration / validWorkouts.length : 0;
        var muscleGroupCounts = {};
        validWorkouts.forEach(function (workout) {
          if (workout.muscle_groups && Array.isArray(workout.muscle_groups)) {
            workout.muscle_groups.forEach(function (muscle) {
              if (muscle && typeof muscle === 'string') {
                muscleGroupCounts[muscle] = (muscleGroupCounts[muscle] || 0) + 1;
              }
            });
          }
        });
        var result = {
          totalVolume: Math.round(totalVolume),
          totalDuration: Math.round(totalDuration / 60),
          // 分単位
          averageDuration: Math.round(averageDuration / 60),
          // 分単位
          muscleGroupDistribution: muscleGroupCounts,
          totalWorkouts: validWorkouts.length,
          averageVolumePerWorkout: validWorkouts.length > 0 ? Math.round(totalVolume / validWorkouts.length) : 0
        };
        console.log('Overall metrics calculated:', result);
        return result;
      } catch (error) {
        console.error('Error calculating overall metrics:', error);
        return {
          totalVolume: 0,
          totalDuration: 0,
          averageDuration: 0,
          muscleGroupDistribution: {},
          totalWorkouts: 0,
          averageVolumePerWorkout: 0
        };
      }
    }

    /**
     * 全筋肉部位の進歩を計算
     * @param {Array} workouts - ワークアウトデータ
     * @returns {Promise<Object>} 全筋肉部位進歩データ
     */
  }, {
    key: "calculateAllMuscleGroupProgress",
    value: (function () {
      var _calculateAllMuscleGroupProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(workouts) {
        var muscleGroups, progress, _iterator, _step, muscleGroup, _t10, _t11;
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.p = _context4.n) {
            case 0:
              muscleGroups = new Set();
              workouts.forEach(function (workout) {
                (workout.muscle_groups || []).forEach(function (muscle) {
                  return muscleGroups.add(muscle);
                });
              });
              progress = {};
              _iterator = _createForOfIteratorHelper(muscleGroups);
              _context4.p = 1;
              _iterator.s();
            case 2:
              if ((_step = _iterator.n()).done) {
                _context4.n = 7;
                break;
              }
              muscleGroup = _step.value;
              _context4.p = 3;
              _context4.n = 4;
              return this.getMuscleGroupProgress(muscleGroup, 90);
            case 4:
              progress[muscleGroup] = _context4.v;
              _context4.n = 6;
              break;
            case 5:
              _context4.p = 5;
              _t10 = _context4.v;
              console.warn("Error calculating progress for muscle group ".concat(muscleGroup, ":"), _t10);
              progress[muscleGroup] = null;
            case 6:
              _context4.n = 2;
              break;
            case 7:
              _context4.n = 9;
              break;
            case 8:
              _context4.p = 8;
              _t11 = _context4.v;
              _iterator.e(_t11);
            case 9:
              _context4.p = 9;
              _iterator.f();
              return _context4.f(9);
            case 10:
              return _context4.a(2, progress);
          }
        }, _callee4, this, [[3, 5], [1, 8, 9, 10]]);
      }));
      function calculateAllMuscleGroupProgress(_x3) {
        return _calculateAllMuscleGroupProgress.apply(this, arguments);
      }
      return calculateAllMuscleGroupProgress;
    }()
    /**
     * 全エクササイズの進歩を計算
     * @param {Array} workouts - ワークアウトデータ
     * @returns {Promise<Object>} 全エクササイズ進歩データ
     */
    )
  }, {
    key: "calculateAllExerciseProgress",
    value: (function () {
      var _calculateAllExerciseProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(workouts) {
        var exercises, progress, _iterator2, _step2, exerciseName, _t12, _t13;
        return _regenerator().w(function (_context5) {
          while (1) switch (_context5.p = _context5.n) {
            case 0:
              exercises = new Set();
              workouts.forEach(function (workout) {
                (workout.exercises || []).forEach(function (exercise) {
                  if (exercise.name) exercises.add(exercise.name);
                });
              });
              progress = {};
              _iterator2 = _createForOfIteratorHelper(exercises);
              _context5.p = 1;
              _iterator2.s();
            case 2:
              if ((_step2 = _iterator2.n()).done) {
                _context5.n = 7;
                break;
              }
              exerciseName = _step2.value;
              _context5.p = 3;
              _context5.n = 4;
              return this.getExerciseProgress(exerciseName, 90);
            case 4:
              progress[exerciseName] = _context5.v;
              _context5.n = 6;
              break;
            case 5:
              _context5.p = 5;
              _t12 = _context5.v;
              console.warn("Error calculating progress for exercise ".concat(exerciseName, ":"), _t12);
              progress[exerciseName] = null;
            case 6:
              _context5.n = 2;
              break;
            case 7:
              _context5.n = 9;
              break;
            case 8:
              _context5.p = 8;
              _t13 = _context5.v;
              _iterator2.e(_t13);
            case 9:
              _context5.p = 9;
              _iterator2.f();
              return _context5.f(9);
            case 10:
              return _context5.a(2, progress);
          }
        }, _callee5, this, [[3, 5], [1, 8, 9, 10]]);
      }));
      function calculateAllExerciseProgress(_x4) {
        return _calculateAllExerciseProgress.apply(this, arguments);
      }
      return calculateAllExerciseProgress;
    }()
    /**
     * 一貫性スコアを計算
     * @param {Array} workouts - ワークアウトデータ
     * @returns {number} 一貫性スコア（0-100）
     */
    )
  }, {
    key: "calculateConsistencyScore",
    value: function calculateConsistencyScore(workouts) {
      if (workouts.length < 2) return 0;
      var sessions = workouts.map(function (workout) {
        return {
          date: new Date(workout.date || workout.startTime)
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });

      // セッション間隔の一貫性を計算
      var intervals = [];
      for (var i = 1; i < sessions.length; i++) {
        var interval = (sessions[i].date - sessions[i - 1].date) / (1000 * 60 * 60 * 24);
        intervals.push(interval);
      }
      if (intervals.length === 0) return 0;
      var averageInterval = intervals.reduce(function (sum, interval) {
        return sum + interval;
      }, 0) / intervals.length;
      var variance = intervals.reduce(function (sum, interval) {
        return sum + Math.pow(interval - averageInterval, 2);
      }, 0) / intervals.length;
      var standardDeviation = Math.sqrt(variance);

      // 標準偏差が小さいほど一貫性が高い
      var consistencyScore = Math.max(0, 100 - standardDeviation * 10);
      return Math.round(consistencyScore);
    }

    /**
     * 推奨事項を生成
     * @param {Array} exerciseData - エクササイズデータ
     * @returns {Array} 推奨事項配列
     */
  }, {
    key: "generateRecommendations",
    value: function generateRecommendations(exerciseData) {
      var recommendations = [];
      var metrics = this.calculateProgressMetrics(exerciseData);
      if (metrics.volumeProgression < 5) {
        recommendations.push({
          type: 'volume',
          priority: 'high',
          message: 'ボリュームの増加が停滞しています。セット数やレップ数を増やすことを検討してください。',
          action: 'セット数を1-2セット増やすか、レップ数を2-3回増やす'
        });
      }
      if (metrics.intensityProgression < 2) {
        recommendations.push({
          type: 'intensity',
          priority: 'medium',
          message: '重量の増加が緩やかです。より重い重量にチャレンジしてみてください。',
          action: '重量を2.5-5kg増やすか、より重い重量でレップ数を減らす'
        });
      }
      if (metrics.consistencyScore < 70) {
        recommendations.push({
          type: 'consistency',
          priority: 'high',
          message: 'トレーニングの一貫性を改善する必要があります。',
          action: '定期的なスケジュールを設定し、週2-3回の頻度を維持する'
        });
      }
      if (recommendations.length === 0) {
        recommendations.push({
          type: 'positive',
          priority: 'low',
          message: '素晴らしい進歩です！現在のトレーニングを継続してください。',
          action: '現在のプログラムを維持し、必要に応じて微調整する'
        });
      }
      return recommendations;
    }

    /**
     * 筋肉部位の推奨事項を生成
     * @param {Array} muscleData - 筋肉部位データ
     * @returns {Array} 推奨事項配列
     */
  }, {
    key: "generateMuscleGroupRecommendations",
    value: function generateMuscleGroupRecommendations(muscleData) {
      var recommendations = [];
      var frequencyAnalysis = this.analyzeMuscleGroupFrequency(muscleData);
      if (frequencyAnalysis.frequencyScore < 60) {
        recommendations.push({
          type: 'frequency',
          priority: 'high',
          message: 'この部位のトレーニング頻度が低すぎます。',
          action: '週1-2回の頻度でトレーニングを増やす'
        });
      }
      if (frequencyAnalysis.averageDaysBetween > 7) {
        recommendations.push({
          type: 'recovery',
          priority: 'medium',
          message: 'トレーニング間隔が長すぎる可能性があります。',
          action: 'より頻繁にトレーニングするか、他の部位との組み合わせを検討する'
        });
      }
      return recommendations;
    }

    /**
     * 総合推奨事項を生成
     * @param {Array} workouts - ワークアウトデータ
     * @returns {Array} 推奨事項配列
     */
  }, {
    key: "generateOverallRecommendations",
    value: function generateOverallRecommendations(workouts) {
      var recommendations = [];
      var metrics = this.calculateOverallMetrics(workouts);
      var consistencyScore = this.calculateConsistencyScore(workouts);
      if (consistencyScore < 60) {
        recommendations.push({
          type: 'consistency',
          priority: 'high',
          message: 'トレーニングの一貫性を改善しましょう。',
          action: '定期的なスケジュールを設定し、週3-4回の頻度を目標にする'
        });
      }
      if (metrics.averageVolumePerWorkout < 1000) {
        recommendations.push({
          type: 'volume',
          priority: 'medium',
          message: 'セッションあたりのボリュームを増やすことを検討してください。',
          action: 'エクササイズ数やセット数を増やす'
        });
      }
      var muscleGroups = Object.keys(metrics.muscleGroupDistribution);
      if (muscleGroups.length < 4) {
        recommendations.push({
          type: 'balance',
          priority: 'medium',
          message: 'より多くの筋肉部位をトレーニングしましょう。',
          action: '新しいエクササイズや筋肉部位を追加する'
        });
      }
      return recommendations;
    }

    /**
     * トレンドを分析
     * @param {Array} exerciseData - エクササイズデータ
     * @returns {Object} トレンド分析データ
     */
  }, {
    key: "analyzeTrends",
    value: function analyzeTrends(exerciseData) {
      var sessions = exerciseData.map(function (workout) {
        var exercise = workout.exerciseData[0];
        return {
          date: new Date(workout.date || workout.startTime),
          weight: exercise.weight || 0,
          reps: exercise.reps || 0,
          sets: exercise.sets || 0,
          volume: (exercise.weight || 0) * (exercise.reps || 0) * (exercise.sets || 0)
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
      if (sessions.length < 3) {
        return {
          weightTrend: 'insufficient_data',
          volumeTrend: 'insufficient_data',
          consistencyTrend: 'insufficient_data'
        };
      }

      // 線形回帰でトレンドを計算
      var weightTrend = this.calculateLinearTrend(sessions.map(function (s) {
        return s.weight;
      }));
      var volumeTrend = this.calculateLinearTrend(sessions.map(function (s) {
        return s.volume;
      }));
      return {
        weightTrend: weightTrend > 0.1 ? 'increasing' : weightTrend < -0.1 ? 'decreasing' : 'stable',
        volumeTrend: volumeTrend > 0.1 ? 'increasing' : volumeTrend < -0.1 ? 'decreasing' : 'stable',
        consistencyTrend: this.calculateConsistencyScore(exerciseData) > 70 ? 'good' : 'needs_improvement'
      };
    }

    /**
     * 線形トレンドを計算
     * @param {Array} values - 値の配列
     * @returns {number} トレンド係数
     */
  }, {
    key: "calculateLinearTrend",
    value: function calculateLinearTrend(values) {
      var n = values.length;
      var x = Array.from({
        length: n
      }, function (_, i) {
        return i;
      });
      var y = values;
      var sumX = x.reduce(function (sum, val) {
        return sum + val;
      }, 0);
      var sumY = y.reduce(function (sum, val) {
        return sum + val;
      }, 0);
      var sumXY = x.reduce(function (sum, val, i) {
        return sum + val * y[i];
      }, 0);
      var sumXX = x.reduce(function (sum, val) {
        return sum + val * val;
      }, 0);
      var slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
      return slope;
    }

    // ヘルパーメソッド
  }, {
    key: "calculateAverageVolume",
    value: function calculateAverageVolume(sessions) {
      return sessions.length > 0 ? sessions.reduce(function (sum, session) {
        return sum + session.volume;
      }, 0) / sessions.length : 0;
    }
  }, {
    key: "calculateAverageWeight",
    value: function calculateAverageWeight(sessions) {
      return sessions.length > 0 ? sessions.reduce(function (sum, session) {
        return sum + session.weight;
      }, 0) / sessions.length : 0;
    }
  }, {
    key: "calculateAverageReps",
    value: function calculateAverageReps(sessions) {
      return sessions.length > 0 ? sessions.reduce(function (sum, session) {
        return sum + session.reps;
      }, 0) / sessions.length : 0;
    }
  }, {
    key: "calculateAverageSets",
    value: function calculateAverageSets(sessions) {
      return sessions.length > 0 ? sessions.reduce(function (sum, session) {
        return sum + session.sets;
      }, 0) / sessions.length : 0;
    }

    // キャッシュ管理
  }, {
    key: "getCachedAnalysis",
    value: function getCachedAnalysis(key) {
      var cached = this.analysisCache.get(key);
      if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {
        return cached.data;
      }
      return null;
    }
  }, {
    key: "setCachedAnalysis",
    value: function setCachedAnalysis(key, data) {
      this.analysisCache.set(key, {
        data: data,
        timestamp: Date.now()
      });
    }

    /**
     * キャッシュをクリア
     */
  }, {
    key: "clearCache",
    value: function clearCache() {
      this.analysisCache.clear();
    }
  }]);
}(); // シングルトンインスタンスをエクスポート
var progressiveOverloadService = exports.progressiveOverloadService = new ProgressiveOverloadService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfd29ya291dERhdGFTZXJ2aWNlIiwicmVxdWlyZSIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwiciIsImUiLCJ0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJBcnJheSIsImlzQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJsZW5ndGgiLCJfbiIsIkYiLCJzIiwibiIsImRvbmUiLCJ2YWx1ZSIsImYiLCJUeXBlRXJyb3IiLCJvIiwiYSIsInUiLCJjYWxsIiwibmV4dCIsIl9hcnJheUxpa2VUb0FycmF5IiwidG9TdHJpbmciLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3R5cGVvZiIsInByb3RvdHlwZSIsIm93bktleXMiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfcmVnZW5lcmF0b3IiLCJ0b1N0cmluZ1RhZyIsImkiLCJjIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiX3JlZ2VuZXJhdG9yRGVmaW5lMiIsInAiLCJ5IiwiRyIsInYiLCJkIiwiYmluZCIsImwiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImRpc3BsYXlOYW1lIiwidyIsIm0iLCJfcmVnZW5lcmF0b3JEZWZpbmUiLCJfaW52b2tlIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJfbmV4dCIsIl90aHJvdyIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwiX3RvUHJpbWl0aXZlIiwidG9QcmltaXRpdmUiLCJTdHJpbmciLCJOdW1iZXIiLCJQcm9ncmVzc2l2ZU92ZXJsb2FkU2VydmljZSIsImV4cG9ydHMiLCJhbmFseXNpc0NhY2hlIiwiTWFwIiwiY2FjaGVFeHBpcnkiLCJfZ2V0RXhlcmNpc2VQcm9ncmVzcyIsIl9jYWxsZWUiLCJleGVyY2lzZU5hbWUiLCJkYXlzIiwiY2FjaGVLZXkiLCJjYWNoZWQiLCJ3b3Jrb3V0cyIsImV4ZXJjaXNlRGF0YSIsImFuYWx5c2lzIiwiX2FyZ3MiLCJfdCIsIl9jb250ZXh0IiwidW5kZWZpbmVkIiwiY29uY2F0IiwiZ2V0Q2FjaGVkQW5hbHlzaXMiLCJ3b3Jrb3V0RGF0YVNlcnZpY2UiLCJsb2FkV29ya291dHMiLCJsaW1pdCIsImZpbHRlckV4ZXJjaXNlRGF0YSIsInBlcmlvZCIsInRvdGFsU2Vzc2lvbnMiLCJwcm9ncmVzc01ldHJpY3MiLCJjYWxjdWxhdGVQcm9ncmVzc01ldHJpY3MiLCJ2b2x1bWVQcm9ncmVzc2lvbiIsImNhbGN1bGF0ZVZvbHVtZVByb2dyZXNzaW9uIiwiaW50ZW5zaXR5UHJvZ3Jlc3Npb24iLCJjYWxjdWxhdGVJbnRlbnNpdHlQcm9ncmVzc2lvbiIsInJlY29tbWVuZGF0aW9ucyIsImdlbmVyYXRlUmVjb21tZW5kYXRpb25zIiwidHJlbmRzIiwiYW5hbHl6ZVRyZW5kcyIsImxhc3RVcGRhdGVkIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic2V0Q2FjaGVkQW5hbHlzaXMiLCJjb25zb2xlIiwiZXJyb3IiLCJnZXRFeGVyY2lzZVByb2dyZXNzIiwiX3giLCJfZ2V0TXVzY2xlR3JvdXBQcm9ncmVzcyIsIl9jYWxsZWUyIiwibXVzY2xlR3JvdXAiLCJtdXNjbGVEYXRhIiwiX2FyZ3MyIiwiX3QyIiwiX2NvbnRleHQyIiwiZmlsdGVyTXVzY2xlR3JvdXBEYXRhIiwiZXhlcmNpc2VzIiwiYW5hbHl6ZU11c2NsZUdyb3VwRXhlcmNpc2VzIiwiY2FsY3VsYXRlTXVzY2xlR3JvdXBWb2x1bWVQcm9ncmVzc2lvbiIsImZyZXF1ZW5jeUFuYWx5c2lzIiwiYW5hbHl6ZU11c2NsZUdyb3VwRnJlcXVlbmN5IiwiZ2VuZXJhdGVNdXNjbGVHcm91cFJlY29tbWVuZGF0aW9ucyIsImdldE11c2NsZUdyb3VwUHJvZ3Jlc3MiLCJfeDIiLCJfZ2V0T3ZlcmFsbFByb2dyZXNzIiwiX2NhbGxlZTMiLCJyZWNlbnRXb3Jrb3V0cyIsIl9hcmdzMyIsIl90MyIsIl90NCIsIl90NSIsIl90NiIsIl90NyIsIl90OCIsIl90OSIsIl90MCIsIl90MSIsIl9jb250ZXh0MyIsImZpbHRlclJlY2VudFdvcmtvdXRzIiwiY2FsY3VsYXRlT3ZlcmFsbE1ldHJpY3MiLCJjYWxjdWxhdGVBbGxNdXNjbGVHcm91cFByb2dyZXNzIiwiY2FsY3VsYXRlQWxsRXhlcmNpc2VQcm9ncmVzcyIsImNhbGN1bGF0ZUNvbnNpc3RlbmN5U2NvcmUiLCJnZW5lcmF0ZU92ZXJhbGxSZWNvbW1lbmRhdGlvbnMiLCJ0b3RhbFdvcmtvdXRzIiwib3ZlcmFsbE1ldHJpY3MiLCJtdXNjbGVHcm91cFByb2dyZXNzIiwiZXhlcmNpc2VQcm9ncmVzcyIsImNvbnNpc3RlbmN5U2NvcmUiLCJnZXRPdmVyYWxsUHJvZ3Jlc3MiLCJjdXRvZmZEYXRlIiwic2V0RGF0ZSIsImdldERhdGUiLCJ3b3Jrb3V0Iiwid29ya291dERhdGUiLCJkYXRlIiwic3RhcnRUaW1lIiwibWFwIiwiZXhlcmNpc2UiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwibXVzY2xlR3JvdXBzIiwibXVzY2xlX2dyb3VwcyIsInNvbWUiLCJtdXNjbGUiLCJhdmVyYWdlV2VpZ2h0IiwiYXZlcmFnZVJlcHMiLCJhdmVyYWdlU2V0cyIsInNlc3Npb25zIiwid2VpZ2h0IiwicmVwcyIsInNldHMiLCJ2b2x1bWUiLCJzb3J0IiwiYiIsImZpcnN0SGFsZiIsIk1hdGgiLCJjZWlsIiwic2Vjb25kSGFsZiIsImZsb29yIiwiZmlyc3RIYWxmQXZnVm9sdW1lIiwiY2FsY3VsYXRlQXZlcmFnZVZvbHVtZSIsInNlY29uZEhhbGZBdmdWb2x1bWUiLCJmaXJzdEhhbGZBdmdXZWlnaHQiLCJjYWxjdWxhdGVBdmVyYWdlV2VpZ2h0Iiwic2Vjb25kSGFsZkF2Z1dlaWdodCIsInJvdW5kIiwiY2FsY3VsYXRlQXZlcmFnZVJlcHMiLCJjYWxjdWxhdGVBdmVyYWdlU2V0cyIsImludGVuc2l0eSIsImV4ZXJjaXNlQ291bnRzIiwiZmlyc3RTZXNzaW9uIiwibGFzdFNlc3Npb24iLCJ3ZWlnaHRQcm9ncmVzcyIsInRvdGFsVm9sdW1lIiwicmVkdWNlIiwic3VtIiwiZXhlcmNpc2VDb3VudCIsImR1cmF0aW9uIiwiYXZlcmFnZURheXNCZXR3ZWVuIiwiZnJlcXVlbmN5U2NvcmUiLCJsYXN0V29ya291dCIsIm5leHRSZWNvbW1lbmRlZCIsImludGVydmFscyIsImludGVydmFsIiwiaWRlYWxJbnRlcnZhbCIsIm1heCIsImFicyIsInRvdGFsRHVyYXRpb24iLCJhdmVyYWdlRHVyYXRpb24iLCJtdXNjbGVHcm91cERpc3RyaWJ1dGlvbiIsImF2ZXJhZ2VWb2x1bWVQZXJXb3Jrb3V0IiwidmFsaWRXb3Jrb3V0cyIsImV4ZXJjaXNlU3VtIiwid2FybiIsIm11c2NsZUdyb3VwQ291bnRzIiwicmVzdWx0IiwibG9nIiwiX2NhbGN1bGF0ZUFsbE11c2NsZUdyb3VwUHJvZ3Jlc3MiLCJfY2FsbGVlNCIsInByb2dyZXNzIiwiX2l0ZXJhdG9yIiwiX3N0ZXAiLCJfdDEwIiwiX3QxMSIsIl9jb250ZXh0NCIsIlNldCIsImFkZCIsIl94MyIsIl9jYWxjdWxhdGVBbGxFeGVyY2lzZVByb2dyZXNzIiwiX2NhbGxlZTUiLCJfaXRlcmF0b3IyIiwiX3N0ZXAyIiwiX3QxMiIsIl90MTMiLCJfY29udGV4dDUiLCJfeDQiLCJhdmVyYWdlSW50ZXJ2YWwiLCJ2YXJpYW5jZSIsInBvdyIsInN0YW5kYXJkRGV2aWF0aW9uIiwic3FydCIsIm1ldHJpY3MiLCJ0eXBlIiwicHJpb3JpdHkiLCJtZXNzYWdlIiwiYWN0aW9uIiwid2VpZ2h0VHJlbmQiLCJ2b2x1bWVUcmVuZCIsImNvbnNpc3RlbmN5VHJlbmQiLCJjYWxjdWxhdGVMaW5lYXJUcmVuZCIsInZhbHVlcyIsIngiLCJfIiwic3VtWCIsInZhbCIsInN1bVkiLCJzdW1YWSIsInN1bVhYIiwic2xvcGUiLCJzZXNzaW9uIiwiZ2V0Iiwibm93IiwidGltZXN0YW1wIiwiZGF0YSIsInNldCIsImNsZWFyQ2FjaGUiLCJjbGVhciIsInByb2dyZXNzaXZlT3ZlcmxvYWRTZXJ2aWNlIl0sInNvdXJjZXMiOlsicHJvZ3Jlc3NpdmVPdmVybG9hZFNlcnZpY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8ganMvc2VydmljZXMvcHJvZ3Jlc3NpdmVPdmVybG9hZFNlcnZpY2UuanMgLSDjg5fjg63jgrDjg6zjg4Pjgrfjg5bjg7vjgqrjg7zjg5Djg7zjg63jg7zjg4nliIbmnpDjgrXjg7zjg5PjgrlcblxuaW1wb3J0IHsgd29ya291dERhdGFTZXJ2aWNlIH0gZnJvbSAnLi93b3Jrb3V0RGF0YVNlcnZpY2UuanMnO1xuXG4vKipcbiAqIOODl+ODreOCsOODrOODg+OCt+ODluODu+OCquODvOODkOODvOODreODvOODieWIhuaekOOCteODvOODk+OCuVxuICog44OI44Os44O844OL44Oz44Kw44Gu6YCy5q2p44KS5a6a6YeP55qE44Gr5YiG5p6Q44GX44CB5pyA6YGp5YyW5o+Q5qGI44KS6KGM44GGXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9ncmVzc2l2ZU92ZXJsb2FkU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYW5hbHlzaXNDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmNhY2hlRXhwaXJ5ID0gNSAqIDYwICogMTAwMDsgLy8gNeWIhumWk+OCreODo+ODg+OCt+ODpVxuICB9XG5cbiAgLyoqXG4gICAqIOOCqOOCr+OCteOCteOCpOOCuuWIpeOBrumAsuatqeWIhuaekOOCkuWPluW+l1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZXhlcmNpc2VOYW1lIC0g44Ko44Kv44K144K144Kk44K65ZCNXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkYXlzIC0g5YiG5p6Q5pyf6ZaT77yI5pel5pWw77yJXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IOmAsuatqeWIhuaekOODh+ODvOOCv1xuICAgKi9cbiAgYXN5bmMgZ2V0RXhlcmNpc2VQcm9ncmVzcyhleGVyY2lzZU5hbWUsIGRheXMgPSA5MCkge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYGV4ZXJjaXNlXyR7ZXhlcmNpc2VOYW1lfV8ke2RheXN9YDtcbiAgICBjb25zdCBjYWNoZWQgPSB0aGlzLmdldENhY2hlZEFuYWx5c2lzKGNhY2hlS2V5KTtcbiAgICBpZiAoY2FjaGVkKSByZXR1cm4gY2FjaGVkO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHdvcmtvdXRzID0gYXdhaXQgd29ya291dERhdGFTZXJ2aWNlLmxvYWRXb3Jrb3V0cyh7IGxpbWl0OiAxMDAwIH0pO1xuICAgICAgY29uc3QgZXhlcmNpc2VEYXRhID0gdGhpcy5maWx0ZXJFeGVyY2lzZURhdGEoXG4gICAgICAgIHdvcmtvdXRzLFxuICAgICAgICBleGVyY2lzZU5hbWUsXG4gICAgICAgIGRheXNcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGFuYWx5c2lzID0ge1xuICAgICAgICBleGVyY2lzZU5hbWUsXG4gICAgICAgIHBlcmlvZDogZGF5cyxcbiAgICAgICAgdG90YWxTZXNzaW9uczogZXhlcmNpc2VEYXRhLmxlbmd0aCxcbiAgICAgICAgcHJvZ3Jlc3NNZXRyaWNzOiB0aGlzLmNhbGN1bGF0ZVByb2dyZXNzTWV0cmljcyhleGVyY2lzZURhdGEpLFxuICAgICAgICB2b2x1bWVQcm9ncmVzc2lvbjogdGhpcy5jYWxjdWxhdGVWb2x1bWVQcm9ncmVzc2lvbihleGVyY2lzZURhdGEpLFxuICAgICAgICBpbnRlbnNpdHlQcm9ncmVzc2lvbjogdGhpcy5jYWxjdWxhdGVJbnRlbnNpdHlQcm9ncmVzc2lvbihleGVyY2lzZURhdGEpLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IHRoaXMuZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbnMoZXhlcmNpc2VEYXRhKSxcbiAgICAgICAgdHJlbmRzOiB0aGlzLmFuYWx5emVUcmVuZHMoZXhlcmNpc2VEYXRhKSxcbiAgICAgICAgbGFzdFVwZGF0ZWQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuc2V0Q2FjaGVkQW5hbHlzaXMoY2FjaGVLZXksIGFuYWx5c2lzKTtcbiAgICAgIHJldHVybiBhbmFseXNpcztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgYW5hbHl6aW5nIGV4ZXJjaXNlIHByb2dyZXNzOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDpg6jkvY3liKXjga7pgLLmranliIbmnpDjgpLlj5blvpdcbiAgICogQHBhcmFtIHtzdHJpbmd9IG11c2NsZUdyb3VwIC0g562L6IKJ6YOo5L2NXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkYXlzIC0g5YiG5p6Q5pyf6ZaT77yI5pel5pWw77yJXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IOmDqOS9jeWIpemAsuatqeWIhuaekOODh+ODvOOCv1xuICAgKi9cbiAgYXN5bmMgZ2V0TXVzY2xlR3JvdXBQcm9ncmVzcyhtdXNjbGVHcm91cCwgZGF5cyA9IDkwKSB7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBgbXVzY2xlXyR7bXVzY2xlR3JvdXB9XyR7ZGF5c31gO1xuICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuZ2V0Q2FjaGVkQW5hbHlzaXMoY2FjaGVLZXkpO1xuICAgIGlmIChjYWNoZWQpIHJldHVybiBjYWNoZWQ7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3Qgd29ya291dHMgPSBhd2FpdCB3b3Jrb3V0RGF0YVNlcnZpY2UubG9hZFdvcmtvdXRzKHsgbGltaXQ6IDEwMDAgfSk7XG4gICAgICBjb25zdCBtdXNjbGVEYXRhID0gdGhpcy5maWx0ZXJNdXNjbGVHcm91cERhdGEoXG4gICAgICAgIHdvcmtvdXRzLFxuICAgICAgICBtdXNjbGVHcm91cCxcbiAgICAgICAgZGF5c1xuICAgICAgKTtcblxuICAgICAgY29uc3QgYW5hbHlzaXMgPSB7XG4gICAgICAgIG11c2NsZUdyb3VwLFxuICAgICAgICBwZXJpb2Q6IGRheXMsXG4gICAgICAgIHRvdGFsU2Vzc2lvbnM6IG11c2NsZURhdGEubGVuZ3RoLFxuICAgICAgICBleGVyY2lzZXM6IHRoaXMuYW5hbHl6ZU11c2NsZUdyb3VwRXhlcmNpc2VzKG11c2NsZURhdGEpLFxuICAgICAgICB2b2x1bWVQcm9ncmVzc2lvbjpcbiAgICAgICAgICB0aGlzLmNhbGN1bGF0ZU11c2NsZUdyb3VwVm9sdW1lUHJvZ3Jlc3Npb24obXVzY2xlRGF0YSksXG4gICAgICAgIGZyZXF1ZW5jeUFuYWx5c2lzOiB0aGlzLmFuYWx5emVNdXNjbGVHcm91cEZyZXF1ZW5jeShtdXNjbGVEYXRhKSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiB0aGlzLmdlbmVyYXRlTXVzY2xlR3JvdXBSZWNvbW1lbmRhdGlvbnMobXVzY2xlRGF0YSksXG4gICAgICAgIGxhc3RVcGRhdGVkOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldENhY2hlZEFuYWx5c2lzKGNhY2hlS2V5LCBhbmFseXNpcyk7XG4gICAgICByZXR1cm4gYW5hbHlzaXM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFuYWx5emluZyBtdXNjbGUgZ3JvdXAgcHJvZ3Jlc3M6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOe3j+WQiOeahOOBqumAsuatqeWIhuaekOOCkuWPluW+l1xuICAgKiBAcGFyYW0ge251bWJlcn0gZGF5cyAtIOWIhuaekOacn+mWk++8iOaXpeaVsO+8iVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSDnt4/lkIjpgLLmranliIbmnpDjg4fjg7zjgr9cbiAgICovXG4gIGFzeW5jIGdldE92ZXJhbGxQcm9ncmVzcyhkYXlzID0gOTApIHtcbiAgICBjb25zdCBjYWNoZUtleSA9IGBvdmVyYWxsXyR7ZGF5c31gO1xuICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuZ2V0Q2FjaGVkQW5hbHlzaXMoY2FjaGVLZXkpO1xuICAgIGlmIChjYWNoZWQpIHJldHVybiBjYWNoZWQ7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3Qgd29ya291dHMgPSBhd2FpdCB3b3Jrb3V0RGF0YVNlcnZpY2UubG9hZFdvcmtvdXRzKHsgbGltaXQ6IDEwMDAgfSk7XG4gICAgICBjb25zdCByZWNlbnRXb3Jrb3V0cyA9IHRoaXMuZmlsdGVyUmVjZW50V29ya291dHMod29ya291dHMsIGRheXMpO1xuXG4gICAgICBjb25zdCBhbmFseXNpcyA9IHtcbiAgICAgICAgcGVyaW9kOiBkYXlzLFxuICAgICAgICB0b3RhbFdvcmtvdXRzOiByZWNlbnRXb3Jrb3V0cy5sZW5ndGgsXG4gICAgICAgIG92ZXJhbGxNZXRyaWNzOiB0aGlzLmNhbGN1bGF0ZU92ZXJhbGxNZXRyaWNzKHJlY2VudFdvcmtvdXRzKSxcbiAgICAgICAgbXVzY2xlR3JvdXBQcm9ncmVzczpcbiAgICAgICAgICBhd2FpdCB0aGlzLmNhbGN1bGF0ZUFsbE11c2NsZUdyb3VwUHJvZ3Jlc3MocmVjZW50V29ya291dHMpLFxuICAgICAgICBleGVyY2lzZVByb2dyZXNzOlxuICAgICAgICAgIGF3YWl0IHRoaXMuY2FsY3VsYXRlQWxsRXhlcmNpc2VQcm9ncmVzcyhyZWNlbnRXb3Jrb3V0cyksXG4gICAgICAgIGNvbnNpc3RlbmN5U2NvcmU6IHRoaXMuY2FsY3VsYXRlQ29uc2lzdGVuY3lTY29yZShyZWNlbnRXb3Jrb3V0cyksXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogdGhpcy5nZW5lcmF0ZU92ZXJhbGxSZWNvbW1lbmRhdGlvbnMocmVjZW50V29ya291dHMpLFxuICAgICAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfTtcblxuICAgICAgdGhpcy5zZXRDYWNoZWRBbmFseXNpcyhjYWNoZUtleSwgYW5hbHlzaXMpO1xuICAgICAgcmV0dXJuIGFuYWx5c2lzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhbmFseXppbmcgb3ZlcmFsbCBwcm9ncmVzczonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Ko44Kv44K144K144Kk44K644OH44O844K/44KS44OV44Kj44Or44K/44Oq44Oz44KwXG4gICAqIEBwYXJhbSB7QXJyYXl9IHdvcmtvdXRzIC0g44Ov44O844Kv44Ki44Km44OI44OH44O844K/XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleGVyY2lzZU5hbWUgLSDjgqjjgq/jgrXjgrXjgqTjgrrlkI1cbiAgICogQHBhcmFtIHtudW1iZXJ9IGRheXMgLSDmnJ/plpNcbiAgICogQHJldHVybnMge0FycmF5fSDjg5XjgqPjg6vjgr/jgZXjgozjgZ/jg4fjg7zjgr9cbiAgICovXG4gIGZpbHRlckV4ZXJjaXNlRGF0YSh3b3Jrb3V0cywgZXhlcmNpc2VOYW1lLCBkYXlzKSB7XG4gICAgY29uc3QgY3V0b2ZmRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgY3V0b2ZmRGF0ZS5zZXREYXRlKGN1dG9mZkRhdGUuZ2V0RGF0ZSgpIC0gZGF5cyk7XG5cbiAgICByZXR1cm4gd29ya291dHNcbiAgICAgIC5maWx0ZXIoKHdvcmtvdXQpID0+IHtcbiAgICAgICAgY29uc3Qgd29ya291dERhdGUgPSBuZXcgRGF0ZSh3b3Jrb3V0LmRhdGUgfHwgd29ya291dC5zdGFydFRpbWUpO1xuICAgICAgICByZXR1cm4gd29ya291dERhdGUgPj0gY3V0b2ZmRGF0ZTtcbiAgICAgIH0pXG4gICAgICAubWFwKCh3b3Jrb3V0KSA9PiAoe1xuICAgICAgICAuLi53b3Jrb3V0LFxuICAgICAgICBleGVyY2lzZURhdGE6ICh3b3Jrb3V0LmV4ZXJjaXNlcyB8fCBbXSkuZmlsdGVyKFxuICAgICAgICAgIChleGVyY2lzZSkgPT5cbiAgICAgICAgICAgIGV4ZXJjaXNlLm5hbWUgJiZcbiAgICAgICAgICAgIGV4ZXJjaXNlLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhleGVyY2lzZU5hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgKSxcbiAgICAgIH0pKVxuICAgICAgLmZpbHRlcigod29ya291dCkgPT4gd29ya291dC5leGVyY2lzZURhdGEubGVuZ3RoID4gMCk7XG4gIH1cblxuICAvKipcbiAgICog562L6IKJ6YOo5L2N44OH44O844K/44KS44OV44Kj44Or44K/44Oq44Oz44KwXG4gICAqIEBwYXJhbSB7QXJyYXl9IHdvcmtvdXRzIC0g44Ov44O844Kv44Ki44Km44OI44OH44O844K/XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtdXNjbGVHcm91cCAtIOeti+iCiemDqOS9jVxuICAgKiBAcGFyYW0ge251bWJlcn0gZGF5cyAtIOacn+mWk1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IOODleOCo+ODq+OCv+OBleOCjOOBn+ODh+ODvOOCv1xuICAgKi9cbiAgZmlsdGVyTXVzY2xlR3JvdXBEYXRhKHdvcmtvdXRzLCBtdXNjbGVHcm91cCwgZGF5cykge1xuICAgIGNvbnN0IGN1dG9mZkRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGN1dG9mZkRhdGUuc2V0RGF0ZShjdXRvZmZEYXRlLmdldERhdGUoKSAtIGRheXMpO1xuXG4gICAgcmV0dXJuIHdvcmtvdXRzXG4gICAgICAuZmlsdGVyKCh3b3Jrb3V0KSA9PiB7XG4gICAgICAgIGNvbnN0IHdvcmtvdXREYXRlID0gbmV3IERhdGUod29ya291dC5kYXRlIHx8IHdvcmtvdXQuc3RhcnRUaW1lKTtcbiAgICAgICAgcmV0dXJuIHdvcmtvdXREYXRlID49IGN1dG9mZkRhdGU7XG4gICAgICB9KVxuICAgICAgLmZpbHRlcigod29ya291dCkgPT4ge1xuICAgICAgICBjb25zdCBtdXNjbGVHcm91cHMgPSB3b3Jrb3V0Lm11c2NsZV9ncm91cHMgfHwgW107XG4gICAgICAgIHJldHVybiBtdXNjbGVHcm91cHMuc29tZSgobXVzY2xlKSA9PlxuICAgICAgICAgIG11c2NsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKG11c2NsZUdyb3VwLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmnIDov5Hjga7jg6/jg7zjgq/jgqLjgqbjg4jjgpLjg5XjgqPjg6vjgr/jg6rjg7PjgrBcbiAgICogQHBhcmFtIHtBcnJheX0gd29ya291dHMgLSDjg6/jg7zjgq/jgqLjgqbjg4jjg4fjg7zjgr9cbiAgICogQHBhcmFtIHtudW1iZXJ9IGRheXMgLSDmnJ/plpNcbiAgICogQHJldHVybnMge0FycmF5fSDjg5XjgqPjg6vjgr/jgZXjgozjgZ/jg4fjg7zjgr9cbiAgICovXG4gIGZpbHRlclJlY2VudFdvcmtvdXRzKHdvcmtvdXRzLCBkYXlzKSB7XG4gICAgY29uc3QgY3V0b2ZmRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgY3V0b2ZmRGF0ZS5zZXREYXRlKGN1dG9mZkRhdGUuZ2V0RGF0ZSgpIC0gZGF5cyk7XG5cbiAgICByZXR1cm4gd29ya291dHMuZmlsdGVyKCh3b3Jrb3V0KSA9PiB7XG4gICAgICBjb25zdCB3b3Jrb3V0RGF0ZSA9IG5ldyBEYXRlKHdvcmtvdXQuZGF0ZSB8fCB3b3Jrb3V0LnN0YXJ0VGltZSk7XG4gICAgICByZXR1cm4gd29ya291dERhdGUgPj0gY3V0b2ZmRGF0ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDpgLLmranjg6Hjg4jjg6rjgq/jgrnjgpLoqIjnrpdcbiAgICogQHBhcmFtIHtBcnJheX0gZXhlcmNpc2VEYXRhIC0g44Ko44Kv44K144K144Kk44K644OH44O844K/XG4gICAqIEByZXR1cm5zIHtPYmplY3R9IOmAsuatqeODoeODiOODquOCr+OCuVxuICAgKi9cbiAgY2FsY3VsYXRlUHJvZ3Jlc3NNZXRyaWNzKGV4ZXJjaXNlRGF0YSkge1xuICAgIGlmIChleGVyY2lzZURhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2b2x1bWVQcm9ncmVzc2lvbjogMCxcbiAgICAgICAgaW50ZW5zaXR5UHJvZ3Jlc3Npb246IDAsXG4gICAgICAgIGNvbnNpc3RlbmN5U2NvcmU6IDAsXG4gICAgICAgIGF2ZXJhZ2VXZWlnaHQ6IDAsXG4gICAgICAgIGF2ZXJhZ2VSZXBzOiAwLFxuICAgICAgICBhdmVyYWdlU2V0czogMCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3Qgc2Vzc2lvbnMgPSBleGVyY2lzZURhdGFcbiAgICAgIC5tYXAoKHdvcmtvdXQpID0+IHtcbiAgICAgICAgY29uc3QgZXhlcmNpc2UgPSB3b3Jrb3V0LmV4ZXJjaXNlRGF0YVswXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSh3b3Jrb3V0LmRhdGUgfHwgd29ya291dC5zdGFydFRpbWUpLFxuICAgICAgICAgIHdlaWdodDogZXhlcmNpc2Uud2VpZ2h0IHx8IDAsXG4gICAgICAgICAgcmVwczogZXhlcmNpc2UucmVwcyB8fCAwLFxuICAgICAgICAgIHNldHM6IGV4ZXJjaXNlLnNldHMgfHwgMCxcbiAgICAgICAgICB2b2x1bWU6XG4gICAgICAgICAgICAoZXhlcmNpc2Uud2VpZ2h0IHx8IDApICpcbiAgICAgICAgICAgIChleGVyY2lzZS5yZXBzIHx8IDApICpcbiAgICAgICAgICAgIChleGVyY2lzZS5zZXRzIHx8IDApLFxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmRhdGUgLSBiLmRhdGUpO1xuXG4gICAgY29uc3QgZmlyc3RIYWxmID0gc2Vzc2lvbnMuc2xpY2UoMCwgTWF0aC5jZWlsKHNlc3Npb25zLmxlbmd0aCAvIDIpKTtcbiAgICBjb25zdCBzZWNvbmRIYWxmID0gc2Vzc2lvbnMuc2xpY2UoTWF0aC5mbG9vcihzZXNzaW9ucy5sZW5ndGggLyAyKSk7XG5cbiAgICBjb25zdCBmaXJzdEhhbGZBdmdWb2x1bWUgPSB0aGlzLmNhbGN1bGF0ZUF2ZXJhZ2VWb2x1bWUoZmlyc3RIYWxmKTtcbiAgICBjb25zdCBzZWNvbmRIYWxmQXZnVm9sdW1lID0gdGhpcy5jYWxjdWxhdGVBdmVyYWdlVm9sdW1lKHNlY29uZEhhbGYpO1xuICAgIGNvbnN0IHZvbHVtZVByb2dyZXNzaW9uID1cbiAgICAgIGZpcnN0SGFsZkF2Z1ZvbHVtZSA+IDBcbiAgICAgICAgPyAoKHNlY29uZEhhbGZBdmdWb2x1bWUgLSBmaXJzdEhhbGZBdmdWb2x1bWUpIC8gZmlyc3RIYWxmQXZnVm9sdW1lKSAqXG4gICAgICAgICAgMTAwXG4gICAgICAgIDogMDtcblxuICAgIGNvbnN0IGZpcnN0SGFsZkF2Z1dlaWdodCA9IHRoaXMuY2FsY3VsYXRlQXZlcmFnZVdlaWdodChmaXJzdEhhbGYpO1xuICAgIGNvbnN0IHNlY29uZEhhbGZBdmdXZWlnaHQgPSB0aGlzLmNhbGN1bGF0ZUF2ZXJhZ2VXZWlnaHQoc2Vjb25kSGFsZik7XG4gICAgY29uc3QgaW50ZW5zaXR5UHJvZ3Jlc3Npb24gPVxuICAgICAgZmlyc3RIYWxmQXZnV2VpZ2h0ID4gMFxuICAgICAgICA/ICgoc2Vjb25kSGFsZkF2Z1dlaWdodCAtIGZpcnN0SGFsZkF2Z1dlaWdodCkgLyBmaXJzdEhhbGZBdmdXZWlnaHQpICpcbiAgICAgICAgICAxMDBcbiAgICAgICAgOiAwO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZvbHVtZVByb2dyZXNzaW9uOiBNYXRoLnJvdW5kKHZvbHVtZVByb2dyZXNzaW9uICogMTApIC8gMTAsXG4gICAgICBpbnRlbnNpdHlQcm9ncmVzc2lvbjogTWF0aC5yb3VuZChpbnRlbnNpdHlQcm9ncmVzc2lvbiAqIDEwKSAvIDEwLFxuICAgICAgY29uc2lzdGVuY3lTY29yZTogdGhpcy5jYWxjdWxhdGVDb25zaXN0ZW5jeVNjb3JlKGV4ZXJjaXNlRGF0YSksXG4gICAgICBhdmVyYWdlV2VpZ2h0OlxuICAgICAgICBNYXRoLnJvdW5kKHRoaXMuY2FsY3VsYXRlQXZlcmFnZVdlaWdodChzZXNzaW9ucykgKiAxMCkgLyAxMCxcbiAgICAgIGF2ZXJhZ2VSZXBzOiBNYXRoLnJvdW5kKHRoaXMuY2FsY3VsYXRlQXZlcmFnZVJlcHMoc2Vzc2lvbnMpICogMTApIC8gMTAsXG4gICAgICBhdmVyYWdlU2V0czogTWF0aC5yb3VuZCh0aGlzLmNhbGN1bGF0ZUF2ZXJhZ2VTZXRzKHNlc3Npb25zKSAqIDEwKSAvIDEwLFxuICAgICAgdG90YWxTZXNzaW9uczogc2Vzc2lvbnMubGVuZ3RoLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICog44Oc44Oq44Ol44O844Og6YCy5q2p44KS6KiI566XXG4gICAqIEBwYXJhbSB7QXJyYXl9IGV4ZXJjaXNlRGF0YSAtIOOCqOOCr+OCteOCteOCpOOCuuODh+ODvOOCv1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IOODnOODquODpeODvOODoOmAsuatqeODh+ODvOOCv1xuICAgKi9cbiAgY2FsY3VsYXRlVm9sdW1lUHJvZ3Jlc3Npb24oZXhlcmNpc2VEYXRhKSB7XG4gICAgcmV0dXJuIGV4ZXJjaXNlRGF0YVxuICAgICAgLm1hcCgod29ya291dCkgPT4ge1xuICAgICAgICBjb25zdCBleGVyY2lzZSA9IHdvcmtvdXQuZXhlcmNpc2VEYXRhWzBdO1xuICAgICAgICBjb25zdCB2b2x1bWUgPVxuICAgICAgICAgIChleGVyY2lzZS53ZWlnaHQgfHwgMCkgKiAoZXhlcmNpc2UucmVwcyB8fCAwKSAqIChleGVyY2lzZS5zZXRzIHx8IDApO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKHdvcmtvdXQuZGF0ZSB8fCB3b3Jrb3V0LnN0YXJ0VGltZSksXG4gICAgICAgICAgdm9sdW1lLFxuICAgICAgICAgIHdlaWdodDogZXhlcmNpc2Uud2VpZ2h0IHx8IDAsXG4gICAgICAgICAgcmVwczogZXhlcmNpc2UucmVwcyB8fCAwLFxuICAgICAgICAgIHNldHM6IGV4ZXJjaXNlLnNldHMgfHwgMCxcbiAgICAgICAgfTtcbiAgICAgIH0pXG4gICAgICAuc29ydCgoYSwgYikgPT4gYS5kYXRlIC0gYi5kYXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvLfluqbpgLLmranjgpLoqIjnrpdcbiAgICogQHBhcmFtIHtBcnJheX0gZXhlcmNpc2VEYXRhIC0g44Ko44Kv44K144K144Kk44K644OH44O844K/XG4gICAqIEByZXR1cm5zIHtBcnJheX0g5by35bqm6YCy5q2p44OH44O844K/XG4gICAqL1xuICBjYWxjdWxhdGVJbnRlbnNpdHlQcm9ncmVzc2lvbihleGVyY2lzZURhdGEpIHtcbiAgICByZXR1cm4gZXhlcmNpc2VEYXRhXG4gICAgICAubWFwKCh3b3Jrb3V0KSA9PiB7XG4gICAgICAgIGNvbnN0IGV4ZXJjaXNlID0gd29ya291dC5leGVyY2lzZURhdGFbMF07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGF0ZTogbmV3IERhdGUod29ya291dC5kYXRlIHx8IHdvcmtvdXQuc3RhcnRUaW1lKSxcbiAgICAgICAgICB3ZWlnaHQ6IGV4ZXJjaXNlLndlaWdodCB8fCAwLFxuICAgICAgICAgIHJlcHM6IGV4ZXJjaXNlLnJlcHMgfHwgMCxcbiAgICAgICAgICBzZXRzOiBleGVyY2lzZS5zZXRzIHx8IDAsXG4gICAgICAgICAgaW50ZW5zaXR5OiBleGVyY2lzZS53ZWlnaHQgfHwgMCxcbiAgICAgICAgfTtcbiAgICAgIH0pXG4gICAgICAuc29ydCgoYSwgYikgPT4gYS5kYXRlIC0gYi5kYXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnrYvogonpg6jkvY3jga7jgqjjgq/jgrXjgrXjgqTjgrrliIbmnpBcbiAgICogQHBhcmFtIHtBcnJheX0gbXVzY2xlRGF0YSAtIOeti+iCiemDqOS9jeODh+ODvOOCv1xuICAgKiBAcmV0dXJucyB7T2JqZWN0fSDjgqjjgq/jgrXjgrXjgqTjgrrliIbmnpBcbiAgICovXG4gIGFuYWx5emVNdXNjbGVHcm91cEV4ZXJjaXNlcyhtdXNjbGVEYXRhKSB7XG4gICAgY29uc3QgZXhlcmNpc2VDb3VudHMgPSB7fTtcbiAgICBjb25zdCBleGVyY2lzZVByb2dyZXNzID0ge307XG5cbiAgICBtdXNjbGVEYXRhLmZvckVhY2goKHdvcmtvdXQpID0+IHtcbiAgICAgICh3b3Jrb3V0LmV4ZXJjaXNlcyB8fCBbXSkuZm9yRWFjaCgoZXhlcmNpc2UpID0+IHtcbiAgICAgICAgY29uc3QgZXhlcmNpc2VOYW1lID0gZXhlcmNpc2UubmFtZTtcbiAgICAgICAgaWYgKCFleGVyY2lzZUNvdW50c1tleGVyY2lzZU5hbWVdKSB7XG4gICAgICAgICAgZXhlcmNpc2VDb3VudHNbZXhlcmNpc2VOYW1lXSA9IDA7XG4gICAgICAgICAgZXhlcmNpc2VQcm9ncmVzc1tleGVyY2lzZU5hbWVdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZXhlcmNpc2VDb3VudHNbZXhlcmNpc2VOYW1lXSsrO1xuICAgICAgICBleGVyY2lzZVByb2dyZXNzW2V4ZXJjaXNlTmFtZV0ucHVzaCh7XG4gICAgICAgICAgZGF0ZTogbmV3IERhdGUod29ya291dC5kYXRlIHx8IHdvcmtvdXQuc3RhcnRUaW1lKSxcbiAgICAgICAgICB3ZWlnaHQ6IGV4ZXJjaXNlLndlaWdodCB8fCAwLFxuICAgICAgICAgIHJlcHM6IGV4ZXJjaXNlLnJlcHMgfHwgMCxcbiAgICAgICAgICBzZXRzOiBleGVyY2lzZS5zZXRzIHx8IDAsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyDlkITjgqjjgq/jgrXjgrXjgqTjgrrjga7pgLLmranjgpLoqIjnrpdcbiAgICBPYmplY3Qua2V5cyhleGVyY2lzZVByb2dyZXNzKS5mb3JFYWNoKChleGVyY2lzZU5hbWUpID0+IHtcbiAgICAgIGNvbnN0IHNlc3Npb25zID0gZXhlcmNpc2VQcm9ncmVzc1tleGVyY2lzZU5hbWVdLnNvcnQoXG4gICAgICAgIChhLCBiKSA9PiBhLmRhdGUgLSBiLmRhdGVcbiAgICAgICk7XG4gICAgICBpZiAoc2Vzc2lvbnMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgY29uc3QgZmlyc3RTZXNzaW9uID0gc2Vzc2lvbnNbMF07XG4gICAgICAgIGNvbnN0IGxhc3RTZXNzaW9uID0gc2Vzc2lvbnNbc2Vzc2lvbnMubGVuZ3RoIC0gMV07XG4gICAgICAgIGNvbnN0IHdlaWdodFByb2dyZXNzID1cbiAgICAgICAgICBmaXJzdFNlc3Npb24ud2VpZ2h0ID4gMFxuICAgICAgICAgICAgPyAoKGxhc3RTZXNzaW9uLndlaWdodCAtIGZpcnN0U2Vzc2lvbi53ZWlnaHQpIC9cbiAgICAgICAgICAgICAgICBmaXJzdFNlc3Npb24ud2VpZ2h0KSAqXG4gICAgICAgICAgICAgIDEwMFxuICAgICAgICAgICAgOiAwO1xuXG4gICAgICAgIGV4ZXJjaXNlUHJvZ3Jlc3NbZXhlcmNpc2VOYW1lXSA9IHtcbiAgICAgICAgICBzZXNzaW9uczogc2Vzc2lvbnMsXG4gICAgICAgICAgd2VpZ2h0UHJvZ3Jlc3M6IE1hdGgucm91bmQod2VpZ2h0UHJvZ3Jlc3MgKiAxMCkgLyAxMCxcbiAgICAgICAgICB0b3RhbFNlc3Npb25zOiBzZXNzaW9ucy5sZW5ndGgsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXhlcmNpc2VDb3VudHMsXG4gICAgICBleGVyY2lzZVByb2dyZXNzLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICog562L6IKJ6YOo5L2N44Gu44Oc44Oq44Ol44O844Og6YCy5q2p44KS6KiI566XXG4gICAqIEBwYXJhbSB7QXJyYXl9IG11c2NsZURhdGEgLSDnrYvogonpg6jkvY3jg4fjg7zjgr9cbiAgICogQHJldHVybnMge0FycmF5fSDjg5zjg6rjg6Xjg7zjg6DpgLLmranjg4fjg7zjgr9cbiAgICovXG4gIGNhbGN1bGF0ZU11c2NsZUdyb3VwVm9sdW1lUHJvZ3Jlc3Npb24obXVzY2xlRGF0YSkge1xuICAgIHJldHVybiBtdXNjbGVEYXRhXG4gICAgICAubWFwKCh3b3Jrb3V0KSA9PiB7XG4gICAgICAgIGNvbnN0IHRvdGFsVm9sdW1lID0gKHdvcmtvdXQuZXhlcmNpc2VzIHx8IFtdKS5yZWR1Y2UoXG4gICAgICAgICAgKHN1bSwgZXhlcmNpc2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIHN1bSArXG4gICAgICAgICAgICAgIChleGVyY2lzZS53ZWlnaHQgfHwgMCkgKlxuICAgICAgICAgICAgICAgIChleGVyY2lzZS5yZXBzIHx8IDApICpcbiAgICAgICAgICAgICAgICAoZXhlcmNpc2Uuc2V0cyB8fCAwKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIDBcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKHdvcmtvdXQuZGF0ZSB8fCB3b3Jrb3V0LnN0YXJ0VGltZSksXG4gICAgICAgICAgdm9sdW1lOiB0b3RhbFZvbHVtZSxcbiAgICAgICAgICBleGVyY2lzZUNvdW50OiAod29ya291dC5leGVyY2lzZXMgfHwgW10pLmxlbmd0aCxcbiAgICAgICAgICBkdXJhdGlvbjogd29ya291dC5kdXJhdGlvbiB8fCAwLFxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmRhdGUgLSBiLmRhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeti+iCiemDqOS9jeOBrumgu+W6puWIhuaekFxuICAgKiBAcGFyYW0ge0FycmF5fSBtdXNjbGVEYXRhIC0g562L6IKJ6YOo5L2N44OH44O844K/XG4gICAqIEByZXR1cm5zIHtPYmplY3R9IOmgu+W6puWIhuaekOODh+ODvOOCv1xuICAgKi9cbiAgYW5hbHl6ZU11c2NsZUdyb3VwRnJlcXVlbmN5KG11c2NsZURhdGEpIHtcbiAgICBjb25zdCBzZXNzaW9ucyA9IG11c2NsZURhdGFcbiAgICAgIC5tYXAoKHdvcmtvdXQpID0+ICh7XG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKHdvcmtvdXQuZGF0ZSB8fCB3b3Jrb3V0LnN0YXJ0VGltZSksXG4gICAgICB9KSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmRhdGUgLSBiLmRhdGUpO1xuXG4gICAgaWYgKHNlc3Npb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYXZlcmFnZURheXNCZXR3ZWVuOiAwLFxuICAgICAgICBmcmVxdWVuY3lTY29yZTogMCxcbiAgICAgICAgbGFzdFdvcmtvdXQ6IG51bGwsXG4gICAgICAgIG5leHRSZWNvbW1lbmRlZDogbnVsbCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8g44K744OD44K344On44Oz6ZaT6ZqU44KS6KiI566XXG4gICAgY29uc3QgaW50ZXJ2YWxzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzZXNzaW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaW50ZXJ2YWwgPVxuICAgICAgICAoc2Vzc2lvbnNbaV0uZGF0ZSAtIHNlc3Npb25zW2kgLSAxXS5kYXRlKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KTtcbiAgICAgIGludGVydmFscy5wdXNoKGludGVydmFsKTtcbiAgICB9XG5cbiAgICBjb25zdCBhdmVyYWdlRGF5c0JldHdlZW4gPVxuICAgICAgaW50ZXJ2YWxzLmxlbmd0aCA+IDBcbiAgICAgICAgPyBpbnRlcnZhbHMucmVkdWNlKChzdW0sIGludGVydmFsKSA9PiBzdW0gKyBpbnRlcnZhbCwgMCkgL1xuICAgICAgICAgIGludGVydmFscy5sZW5ndGhcbiAgICAgICAgOiAwO1xuXG4gICAgY29uc3QgbGFzdFdvcmtvdXQgPSBzZXNzaW9uc1tzZXNzaW9ucy5sZW5ndGggLSAxXS5kYXRlO1xuXG4gICAgLy8g6aC75bqm44K544Kz44Ki77yI55CG5oOz55qE44Gr44GvMi0z5pel6ZaT6ZqU77yJXG4gICAgY29uc3QgaWRlYWxJbnRlcnZhbCA9IDIuNTtcbiAgICBjb25zdCBmcmVxdWVuY3lTY29yZSA9XG4gICAgICBhdmVyYWdlRGF5c0JldHdlZW4gPiAwXG4gICAgICAgID8gTWF0aC5tYXgoMCwgMTAwIC0gTWF0aC5hYnMoYXZlcmFnZURheXNCZXR3ZWVuIC0gaWRlYWxJbnRlcnZhbCkgKiAyMClcbiAgICAgICAgOiAwO1xuXG4gICAgY29uc3QgbmV4dFJlY29tbWVuZGVkID0gbmV3IERhdGUobGFzdFdvcmtvdXQpO1xuICAgIG5leHRSZWNvbW1lbmRlZC5zZXREYXRlKFxuICAgICAgbmV4dFJlY29tbWVuZGVkLmdldERhdGUoKSArIE1hdGgucm91bmQoYXZlcmFnZURheXNCZXR3ZWVuKVxuICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgYXZlcmFnZURheXNCZXR3ZWVuOiBNYXRoLnJvdW5kKGF2ZXJhZ2VEYXlzQmV0d2VlbiAqIDEwKSAvIDEwLFxuICAgICAgZnJlcXVlbmN5U2NvcmU6IE1hdGgucm91bmQoZnJlcXVlbmN5U2NvcmUpLFxuICAgICAgbGFzdFdvcmtvdXQsXG4gICAgICBuZXh0UmVjb21tZW5kZWQsXG4gICAgICB0b3RhbFNlc3Npb25zOiBzZXNzaW9ucy5sZW5ndGgsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnt4/lkIjjg6Hjg4jjg6rjgq/jgrnjgpLoqIjnrpdcbiAgICogQHBhcmFtIHtBcnJheX0gd29ya291dHMgLSDjg6/jg7zjgq/jgqLjgqbjg4jjg4fjg7zjgr9cbiAgICogQHJldHVybnMge09iamVjdH0g57eP5ZCI44Oh44OI44Oq44Kv44K5XG4gICAqL1xuICBjYWxjdWxhdGVPdmVyYWxsTWV0cmljcyh3b3Jrb3V0cykge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIXdvcmtvdXRzIHx8ICFBcnJheS5pc0FycmF5KHdvcmtvdXRzKSB8fCB3b3Jrb3V0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0b3RhbFZvbHVtZTogMCxcbiAgICAgICAgICB0b3RhbER1cmF0aW9uOiAwLFxuICAgICAgICAgIGF2ZXJhZ2VEdXJhdGlvbjogMCxcbiAgICAgICAgICBtdXNjbGVHcm91cERpc3RyaWJ1dGlvbjoge30sXG4gICAgICAgICAgdG90YWxXb3Jrb3V0czogMCxcbiAgICAgICAgICBhdmVyYWdlVm9sdW1lUGVyV29ya291dDogMCxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8g44OH44O844K/44Gu5qSc6Ki844Go44Kv44Oq44O844OL44Oz44KwXG4gICAgICBjb25zdCB2YWxpZFdvcmtvdXRzID0gd29ya291dHMuZmlsdGVyKCh3b3Jrb3V0KSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgd29ya291dCAmJlxuICAgICAgICAgIHR5cGVvZiB3b3Jrb3V0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICh3b3Jrb3V0LmV4ZXJjaXNlcyB8fFxuICAgICAgICAgICAgd29ya291dC5tdXNjbGVfZ3JvdXBzIHx8XG4gICAgICAgICAgICB3b3Jrb3V0LmR1cmF0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICAgICk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHZhbGlkV29ya291dHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdG90YWxWb2x1bWU6IDAsXG4gICAgICAgICAgdG90YWxEdXJhdGlvbjogMCxcbiAgICAgICAgICBhdmVyYWdlRHVyYXRpb246IDAsXG4gICAgICAgICAgbXVzY2xlR3JvdXBEaXN0cmlidXRpb246IHt9LFxuICAgICAgICAgIHRvdGFsV29ya291dHM6IDAsXG4gICAgICAgICAgYXZlcmFnZVZvbHVtZVBlcldvcmtvdXQ6IDAsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRvdGFsVm9sdW1lID0gdmFsaWRXb3Jrb3V0cy5yZWR1Y2UoKHN1bSwgd29ya291dCkgPT4ge1xuICAgICAgICBpZiAoIXdvcmtvdXQuZXhlcmNpc2VzIHx8ICFBcnJheS5pc0FycmF5KHdvcmtvdXQuZXhlcmNpc2VzKSkge1xuICAgICAgICAgIHJldHVybiBzdW07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHN1bSArXG4gICAgICAgICAgd29ya291dC5leGVyY2lzZXMucmVkdWNlKChleGVyY2lzZVN1bSwgZXhlcmNpc2UpID0+IHtcbiAgICAgICAgICAgIGlmICghZXhlcmNpc2UgfHwgdHlwZW9mIGV4ZXJjaXNlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICByZXR1cm4gZXhlcmNpc2VTdW07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHdlaWdodCA9IE51bWJlcihleGVyY2lzZS53ZWlnaHQpIHx8IDA7XG4gICAgICAgICAgICBjb25zdCByZXBzID0gTnVtYmVyKGV4ZXJjaXNlLnJlcHMpIHx8IDA7XG4gICAgICAgICAgICBjb25zdCBzZXRzID0gTnVtYmVyKGV4ZXJjaXNlLnNldHMpIHx8IDA7XG5cbiAgICAgICAgICAgIC8vIOeVsOW4uOWApOOBruODgeOCp+ODg+OCr++8iOmHjemHjzEwMDBrZ+S7peS4iuOAgeWbnuaVsDEwMOWbnuS7peS4iuOAgeOCu+ODg+ODiOaVsDIw5Lul5LiK44Gv6Zmk5aSW77yJXG4gICAgICAgICAgICBpZiAod2VpZ2h0ID4gMTAwMCB8fCByZXBzID4gMTAwIHx8IHNldHMgPiAyMCkge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1N1c3BpY2lvdXMgZXhlcmNpc2UgZGF0YSBkZXRlY3RlZDonLCBleGVyY2lzZSk7XG4gICAgICAgICAgICAgIHJldHVybiBleGVyY2lzZVN1bTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGV4ZXJjaXNlU3VtICsgd2VpZ2h0ICogcmVwcyAqIHNldHM7XG4gICAgICAgICAgfSwgMClcbiAgICAgICAgKTtcbiAgICAgIH0sIDApO1xuXG4gICAgICBjb25zdCB0b3RhbER1cmF0aW9uID0gdmFsaWRXb3Jrb3V0cy5yZWR1Y2UoKHN1bSwgd29ya291dCkgPT4ge1xuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IE51bWJlcih3b3Jrb3V0LmR1cmF0aW9uKSB8fCAwO1xuICAgICAgICAvLyDnlbDluLjlgKTjga7jg4Hjgqfjg4Pjgq/vvIg15pmC6ZaT5Lul5LiK44Gv6Zmk5aSW77yJXG4gICAgICAgIGlmIChkdXJhdGlvbiA+IDMwMCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignU3VzcGljaW91cyBkdXJhdGlvbiBkZXRlY3RlZDonLCBkdXJhdGlvbik7XG4gICAgICAgICAgcmV0dXJuIHN1bTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VtICsgZHVyYXRpb247XG4gICAgICB9LCAwKTtcblxuICAgICAgY29uc3QgYXZlcmFnZUR1cmF0aW9uID1cbiAgICAgICAgdmFsaWRXb3Jrb3V0cy5sZW5ndGggPiAwID8gdG90YWxEdXJhdGlvbiAvIHZhbGlkV29ya291dHMubGVuZ3RoIDogMDtcblxuICAgICAgY29uc3QgbXVzY2xlR3JvdXBDb3VudHMgPSB7fTtcbiAgICAgIHZhbGlkV29ya291dHMuZm9yRWFjaCgod29ya291dCkgPT4ge1xuICAgICAgICBpZiAod29ya291dC5tdXNjbGVfZ3JvdXBzICYmIEFycmF5LmlzQXJyYXkod29ya291dC5tdXNjbGVfZ3JvdXBzKSkge1xuICAgICAgICAgIHdvcmtvdXQubXVzY2xlX2dyb3Vwcy5mb3JFYWNoKChtdXNjbGUpID0+IHtcbiAgICAgICAgICAgIGlmIChtdXNjbGUgJiYgdHlwZW9mIG11c2NsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgbXVzY2xlR3JvdXBDb3VudHNbbXVzY2xlXSA9IChtdXNjbGVHcm91cENvdW50c1ttdXNjbGVdIHx8IDApICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgdG90YWxWb2x1bWU6IE1hdGgucm91bmQodG90YWxWb2x1bWUpLFxuICAgICAgICB0b3RhbER1cmF0aW9uOiBNYXRoLnJvdW5kKHRvdGFsRHVyYXRpb24gLyA2MCksIC8vIOWIhuWNmOS9jVxuICAgICAgICBhdmVyYWdlRHVyYXRpb246IE1hdGgucm91bmQoYXZlcmFnZUR1cmF0aW9uIC8gNjApLCAvLyDliIbljZjkvY1cbiAgICAgICAgbXVzY2xlR3JvdXBEaXN0cmlidXRpb246IG11c2NsZUdyb3VwQ291bnRzLFxuICAgICAgICB0b3RhbFdvcmtvdXRzOiB2YWxpZFdvcmtvdXRzLmxlbmd0aCxcbiAgICAgICAgYXZlcmFnZVZvbHVtZVBlcldvcmtvdXQ6XG4gICAgICAgICAgdmFsaWRXb3Jrb3V0cy5sZW5ndGggPiAwXG4gICAgICAgICAgICA/IE1hdGgucm91bmQodG90YWxWb2x1bWUgLyB2YWxpZFdvcmtvdXRzLmxlbmd0aClcbiAgICAgICAgICAgIDogMCxcbiAgICAgIH07XG5cbiAgICAgIGNvbnNvbGUubG9nKCdPdmVyYWxsIG1ldHJpY3MgY2FsY3VsYXRlZDonLCByZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2FsY3VsYXRpbmcgb3ZlcmFsbCBtZXRyaWNzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvdGFsVm9sdW1lOiAwLFxuICAgICAgICB0b3RhbER1cmF0aW9uOiAwLFxuICAgICAgICBhdmVyYWdlRHVyYXRpb246IDAsXG4gICAgICAgIG11c2NsZUdyb3VwRGlzdHJpYnV0aW9uOiB7fSxcbiAgICAgICAgdG90YWxXb3Jrb3V0czogMCxcbiAgICAgICAgYXZlcmFnZVZvbHVtZVBlcldvcmtvdXQ6IDAsXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDlhajnrYvogonpg6jkvY3jga7pgLLmranjgpLoqIjnrpdcbiAgICogQHBhcmFtIHtBcnJheX0gd29ya291dHMgLSDjg6/jg7zjgq/jgqLjgqbjg4jjg4fjg7zjgr9cbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0g5YWo562L6IKJ6YOo5L2N6YCy5q2p44OH44O844K/XG4gICAqL1xuICBhc3luYyBjYWxjdWxhdGVBbGxNdXNjbGVHcm91cFByb2dyZXNzKHdvcmtvdXRzKSB7XG4gICAgY29uc3QgbXVzY2xlR3JvdXBzID0gbmV3IFNldCgpO1xuICAgIHdvcmtvdXRzLmZvckVhY2goKHdvcmtvdXQpID0+IHtcbiAgICAgICh3b3Jrb3V0Lm11c2NsZV9ncm91cHMgfHwgW10pLmZvckVhY2goKG11c2NsZSkgPT5cbiAgICAgICAgbXVzY2xlR3JvdXBzLmFkZChtdXNjbGUpXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcHJvZ3Jlc3MgPSB7fTtcbiAgICBmb3IgKGNvbnN0IG11c2NsZUdyb3VwIG9mIG11c2NsZUdyb3Vwcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcHJvZ3Jlc3NbbXVzY2xlR3JvdXBdID0gYXdhaXQgdGhpcy5nZXRNdXNjbGVHcm91cFByb2dyZXNzKFxuICAgICAgICAgIG11c2NsZUdyb3VwLFxuICAgICAgICAgIDkwXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYEVycm9yIGNhbGN1bGF0aW5nIHByb2dyZXNzIGZvciBtdXNjbGUgZ3JvdXAgJHttdXNjbGVHcm91cH06YCxcbiAgICAgICAgICBlcnJvclxuICAgICAgICApO1xuICAgICAgICBwcm9ncmVzc1ttdXNjbGVHcm91cF0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcm9ncmVzcztcbiAgfVxuXG4gIC8qKlxuICAgKiDlhajjgqjjgq/jgrXjgrXjgqTjgrrjga7pgLLmranjgpLoqIjnrpdcbiAgICogQHBhcmFtIHtBcnJheX0gd29ya291dHMgLSDjg6/jg7zjgq/jgqLjgqbjg4jjg4fjg7zjgr9cbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0g5YWo44Ko44Kv44K144K144Kk44K66YCy5q2p44OH44O844K/XG4gICAqL1xuICBhc3luYyBjYWxjdWxhdGVBbGxFeGVyY2lzZVByb2dyZXNzKHdvcmtvdXRzKSB7XG4gICAgY29uc3QgZXhlcmNpc2VzID0gbmV3IFNldCgpO1xuICAgIHdvcmtvdXRzLmZvckVhY2goKHdvcmtvdXQpID0+IHtcbiAgICAgICh3b3Jrb3V0LmV4ZXJjaXNlcyB8fCBbXSkuZm9yRWFjaCgoZXhlcmNpc2UpID0+IHtcbiAgICAgICAgaWYgKGV4ZXJjaXNlLm5hbWUpIGV4ZXJjaXNlcy5hZGQoZXhlcmNpc2UubmFtZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHByb2dyZXNzID0ge307XG4gICAgZm9yIChjb25zdCBleGVyY2lzZU5hbWUgb2YgZXhlcmNpc2VzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBwcm9ncmVzc1tleGVyY2lzZU5hbWVdID0gYXdhaXQgdGhpcy5nZXRFeGVyY2lzZVByb2dyZXNzKFxuICAgICAgICAgIGV4ZXJjaXNlTmFtZSxcbiAgICAgICAgICA5MFxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBFcnJvciBjYWxjdWxhdGluZyBwcm9ncmVzcyBmb3IgZXhlcmNpc2UgJHtleGVyY2lzZU5hbWV9OmAsXG4gICAgICAgICAgZXJyb3JcbiAgICAgICAgKTtcbiAgICAgICAgcHJvZ3Jlc3NbZXhlcmNpc2VOYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2dyZXNzO1xuICB9XG5cbiAgLyoqXG4gICAqIOS4gOiyq+aAp+OCueOCs+OCouOCkuioiOeul1xuICAgKiBAcGFyYW0ge0FycmF5fSB3b3Jrb3V0cyAtIOODr+ODvOOCr+OCouOCpuODiOODh+ODvOOCv1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfSDkuIDosqvmgKfjgrnjgrPjgqLvvIgwLTEwMO+8iVxuICAgKi9cbiAgY2FsY3VsYXRlQ29uc2lzdGVuY3lTY29yZSh3b3Jrb3V0cykge1xuICAgIGlmICh3b3Jrb3V0cy5sZW5ndGggPCAyKSByZXR1cm4gMDtcblxuICAgIGNvbnN0IHNlc3Npb25zID0gd29ya291dHNcbiAgICAgIC5tYXAoKHdvcmtvdXQpID0+ICh7XG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKHdvcmtvdXQuZGF0ZSB8fCB3b3Jrb3V0LnN0YXJ0VGltZSksXG4gICAgICB9KSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmRhdGUgLSBiLmRhdGUpO1xuXG4gICAgLy8g44K744OD44K344On44Oz6ZaT6ZqU44Gu5LiA6LKr5oCn44KS6KiI566XXG4gICAgY29uc3QgaW50ZXJ2YWxzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzZXNzaW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaW50ZXJ2YWwgPVxuICAgICAgICAoc2Vzc2lvbnNbaV0uZGF0ZSAtIHNlc3Npb25zW2kgLSAxXS5kYXRlKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KTtcbiAgICAgIGludGVydmFscy5wdXNoKGludGVydmFsKTtcbiAgICB9XG5cbiAgICBpZiAoaW50ZXJ2YWxzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XG5cbiAgICBjb25zdCBhdmVyYWdlSW50ZXJ2YWwgPVxuICAgICAgaW50ZXJ2YWxzLnJlZHVjZSgoc3VtLCBpbnRlcnZhbCkgPT4gc3VtICsgaW50ZXJ2YWwsIDApIC8gaW50ZXJ2YWxzLmxlbmd0aDtcbiAgICBjb25zdCB2YXJpYW5jZSA9XG4gICAgICBpbnRlcnZhbHMucmVkdWNlKFxuICAgICAgICAoc3VtLCBpbnRlcnZhbCkgPT4gc3VtICsgTWF0aC5wb3coaW50ZXJ2YWwgLSBhdmVyYWdlSW50ZXJ2YWwsIDIpLFxuICAgICAgICAwXG4gICAgICApIC8gaW50ZXJ2YWxzLmxlbmd0aDtcbiAgICBjb25zdCBzdGFuZGFyZERldmlhdGlvbiA9IE1hdGguc3FydCh2YXJpYW5jZSk7XG5cbiAgICAvLyDmqJnmupblgY/lt67jgYzlsI/jgZXjgYTjgbvjgankuIDosqvmgKfjgYzpq5jjgYRcbiAgICBjb25zdCBjb25zaXN0ZW5jeVNjb3JlID0gTWF0aC5tYXgoMCwgMTAwIC0gc3RhbmRhcmREZXZpYXRpb24gKiAxMCk7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoY29uc2lzdGVuY3lTY29yZSk7XG4gIH1cblxuICAvKipcbiAgICog5o6o5aWo5LqL6aCF44KS55Sf5oiQXG4gICAqIEBwYXJhbSB7QXJyYXl9IGV4ZXJjaXNlRGF0YSAtIOOCqOOCr+OCteOCteOCpOOCuuODh+ODvOOCv1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IOaOqOWlqOS6i+mghemFjeWIl1xuICAgKi9cbiAgZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbnMoZXhlcmNpc2VEYXRhKSB7XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gW107XG4gICAgY29uc3QgbWV0cmljcyA9IHRoaXMuY2FsY3VsYXRlUHJvZ3Jlc3NNZXRyaWNzKGV4ZXJjaXNlRGF0YSk7XG5cbiAgICBpZiAobWV0cmljcy52b2x1bWVQcm9ncmVzc2lvbiA8IDUpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3ZvbHVtZScsXG4gICAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgJ+ODnOODquODpeODvOODoOOBruWil+WKoOOBjOWBnOa7nuOBl+OBpuOBhOOBvuOBmeOAguOCu+ODg+ODiOaVsOOChOODrOODg+ODl+aVsOOCkuWil+OChOOBmeOBk+OBqOOCkuaknOiojuOBl+OBpuOBj+OBoOOBleOBhOOAgicsXG4gICAgICAgIGFjdGlvbjogJ+OCu+ODg+ODiOaVsOOCkjEtMuOCu+ODg+ODiOWil+OChOOBmeOBi+OAgeODrOODg+ODl+aVsOOCkjItM+WbnuWil+OChOOBmScsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobWV0cmljcy5pbnRlbnNpdHlQcm9ncmVzc2lvbiA8IDIpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2ludGVuc2l0eScsXG4gICAgICAgIHByaW9yaXR5OiAnbWVkaXVtJyxcbiAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAn6YeN6YeP44Gu5aKX5Yqg44GM57ep44KE44GL44Gn44GZ44CC44KI44KK6YeN44GE6YeN6YeP44Gr44OB44Oj44Os44Oz44K444GX44Gm44G/44Gm44GP44Gg44GV44GE44CCJyxcbiAgICAgICAgYWN0aW9uOiAn6YeN6YeP44KSMi41LTVrZ+Wil+OChOOBmeOBi+OAgeOCiOOCiumHjeOBhOmHjemHj+OBp+ODrOODg+ODl+aVsOOCkua4m+OCieOBmScsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobWV0cmljcy5jb25zaXN0ZW5jeVNjb3JlIDwgNzApIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2NvbnNpc3RlbmN5JyxcbiAgICAgICAgcHJpb3JpdHk6ICdoaWdoJyxcbiAgICAgICAgbWVzc2FnZTogJ+ODiOODrOODvOODi+ODs+OCsOOBruS4gOiyq+aAp+OCkuaUueWWhOOBmeOCi+W/heimgeOBjOOBguOCiuOBvuOBmeOAgicsXG4gICAgICAgIGFjdGlvbjogJ+Wumuacn+eahOOBquOCueOCseOCuOODpeODvOODq+OCkuioreWumuOBl+OAgemAsTItM+WbnuOBrumgu+W6puOCkue2reaMgeOBmeOCiycsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVjb21tZW5kYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgICAgICB0eXBlOiAncG9zaXRpdmUnLFxuICAgICAgICBwcmlvcml0eTogJ2xvdycsXG4gICAgICAgIG1lc3NhZ2U6ICfntKDmmbTjgonjgZfjgYTpgLLmranjgafjgZnvvIHnj77lnKjjga7jg4jjg6zjg7zjg4vjg7PjgrDjgpLntpnntprjgZfjgabjgY/jgaDjgZXjgYTjgIInLFxuICAgICAgICBhY3Rpb246ICfnj77lnKjjga7jg5fjg63jgrDjg6njg6DjgpLntq3mjIHjgZfjgIHlv4XopoHjgavlv5zjgZjjgablvq7oqr/mlbTjgZnjgosnLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlY29tbWVuZGF0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiDnrYvogonpg6jkvY3jga7mjqjlpajkuovpoIXjgpLnlJ/miJBcbiAgICogQHBhcmFtIHtBcnJheX0gbXVzY2xlRGF0YSAtIOeti+iCiemDqOS9jeODh+ODvOOCv1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IOaOqOWlqOS6i+mghemFjeWIl1xuICAgKi9cbiAgZ2VuZXJhdGVNdXNjbGVHcm91cFJlY29tbWVuZGF0aW9ucyhtdXNjbGVEYXRhKSB7XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gW107XG4gICAgY29uc3QgZnJlcXVlbmN5QW5hbHlzaXMgPSB0aGlzLmFuYWx5emVNdXNjbGVHcm91cEZyZXF1ZW5jeShtdXNjbGVEYXRhKTtcblxuICAgIGlmIChmcmVxdWVuY3lBbmFseXNpcy5mcmVxdWVuY3lTY29yZSA8IDYwKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdmcmVxdWVuY3knLFxuICAgICAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgICAgICBtZXNzYWdlOiAn44GT44Gu6YOo5L2N44Gu44OI44Os44O844OL44Oz44Kw6aC75bqm44GM5L2O44GZ44GO44G+44GZ44CCJyxcbiAgICAgICAgYWN0aW9uOiAn6YCxMS0y5Zue44Gu6aC75bqm44Gn44OI44Os44O844OL44Oz44Kw44KS5aKX44KE44GZJyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChmcmVxdWVuY3lBbmFseXNpcy5hdmVyYWdlRGF5c0JldHdlZW4gPiA3KSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdyZWNvdmVyeScsXG4gICAgICAgIHByaW9yaXR5OiAnbWVkaXVtJyxcbiAgICAgICAgbWVzc2FnZTogJ+ODiOODrOODvOODi+ODs+OCsOmWk+malOOBjOmVt+OBmeOBjuOCi+WPr+iDveaAp+OBjOOBguOCiuOBvuOBmeOAgicsXG4gICAgICAgIGFjdGlvbjpcbiAgICAgICAgICAn44KI44KK6aC757mB44Gr44OI44Os44O844OL44Oz44Kw44GZ44KL44GL44CB5LuW44Gu6YOo5L2N44Go44Gu57WE44G/5ZCI44KP44Gb44KS5qSc6KiO44GZ44KLJyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZWNvbW1lbmRhdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICog57eP5ZCI5o6o5aWo5LqL6aCF44KS55Sf5oiQXG4gICAqIEBwYXJhbSB7QXJyYXl9IHdvcmtvdXRzIC0g44Ov44O844Kv44Ki44Km44OI44OH44O844K/XG4gICAqIEByZXR1cm5zIHtBcnJheX0g5o6o5aWo5LqL6aCF6YWN5YiXXG4gICAqL1xuICBnZW5lcmF0ZU92ZXJhbGxSZWNvbW1lbmRhdGlvbnMod29ya291dHMpIHtcbiAgICBjb25zdCByZWNvbW1lbmRhdGlvbnMgPSBbXTtcbiAgICBjb25zdCBtZXRyaWNzID0gdGhpcy5jYWxjdWxhdGVPdmVyYWxsTWV0cmljcyh3b3Jrb3V0cyk7XG4gICAgY29uc3QgY29uc2lzdGVuY3lTY29yZSA9IHRoaXMuY2FsY3VsYXRlQ29uc2lzdGVuY3lTY29yZSh3b3Jrb3V0cyk7XG5cbiAgICBpZiAoY29uc2lzdGVuY3lTY29yZSA8IDYwKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdjb25zaXN0ZW5jeScsXG4gICAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICAgIG1lc3NhZ2U6ICfjg4jjg6zjg7zjg4vjg7PjgrDjga7kuIDosqvmgKfjgpLmlLnlloTjgZfjgb7jgZfjgofjgYbjgIInLFxuICAgICAgICBhY3Rpb246ICflrprmnJ/nmoTjgarjgrnjgrHjgrjjg6Xjg7zjg6vjgpLoqK3lrprjgZfjgIHpgLEzLTTlm57jga7poLvluqbjgpLnm67mqJnjgavjgZnjgosnLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG1ldHJpY3MuYXZlcmFnZVZvbHVtZVBlcldvcmtvdXQgPCAxMDAwKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICd2b2x1bWUnLFxuICAgICAgICBwcmlvcml0eTogJ21lZGl1bScsXG4gICAgICAgIG1lc3NhZ2U6ICfjgrvjg4Pjgrfjg6fjg7PjgYLjgZ/jgorjga7jg5zjg6rjg6Xjg7zjg6DjgpLlopfjgoTjgZnjgZPjgajjgpLmpJzoqI7jgZfjgabjgY/jgaDjgZXjgYTjgIInLFxuICAgICAgICBhY3Rpb246ICfjgqjjgq/jgrXjgrXjgqTjgrrmlbDjgoTjgrvjg4Pjg4jmlbDjgpLlopfjgoTjgZknLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgbXVzY2xlR3JvdXBzID0gT2JqZWN0LmtleXMobWV0cmljcy5tdXNjbGVHcm91cERpc3RyaWJ1dGlvbik7XG4gICAgaWYgKG11c2NsZUdyb3Vwcy5sZW5ndGggPCA0KSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdiYWxhbmNlJyxcbiAgICAgICAgcHJpb3JpdHk6ICdtZWRpdW0nLFxuICAgICAgICBtZXNzYWdlOiAn44KI44KK5aSa44GP44Gu562L6IKJ6YOo5L2N44KS44OI44Os44O844OL44Oz44Kw44GX44G+44GX44KH44GG44CCJyxcbiAgICAgICAgYWN0aW9uOiAn5paw44GX44GE44Ko44Kv44K144K144Kk44K644KE562L6IKJ6YOo5L2N44KS6L+95Yqg44GZ44KLJyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZWNvbW1lbmRhdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICog44OI44Os44Oz44OJ44KS5YiG5p6QXG4gICAqIEBwYXJhbSB7QXJyYXl9IGV4ZXJjaXNlRGF0YSAtIOOCqOOCr+OCteOCteOCpOOCuuODh+ODvOOCv1xuICAgKiBAcmV0dXJucyB7T2JqZWN0fSDjg4jjg6zjg7Pjg4nliIbmnpDjg4fjg7zjgr9cbiAgICovXG4gIGFuYWx5emVUcmVuZHMoZXhlcmNpc2VEYXRhKSB7XG4gICAgY29uc3Qgc2Vzc2lvbnMgPSBleGVyY2lzZURhdGFcbiAgICAgIC5tYXAoKHdvcmtvdXQpID0+IHtcbiAgICAgICAgY29uc3QgZXhlcmNpc2UgPSB3b3Jrb3V0LmV4ZXJjaXNlRGF0YVswXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSh3b3Jrb3V0LmRhdGUgfHwgd29ya291dC5zdGFydFRpbWUpLFxuICAgICAgICAgIHdlaWdodDogZXhlcmNpc2Uud2VpZ2h0IHx8IDAsXG4gICAgICAgICAgcmVwczogZXhlcmNpc2UucmVwcyB8fCAwLFxuICAgICAgICAgIHNldHM6IGV4ZXJjaXNlLnNldHMgfHwgMCxcbiAgICAgICAgICB2b2x1bWU6XG4gICAgICAgICAgICAoZXhlcmNpc2Uud2VpZ2h0IHx8IDApICpcbiAgICAgICAgICAgIChleGVyY2lzZS5yZXBzIHx8IDApICpcbiAgICAgICAgICAgIChleGVyY2lzZS5zZXRzIHx8IDApLFxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmRhdGUgLSBiLmRhdGUpO1xuXG4gICAgaWYgKHNlc3Npb25zLmxlbmd0aCA8IDMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdlaWdodFRyZW5kOiAnaW5zdWZmaWNpZW50X2RhdGEnLFxuICAgICAgICB2b2x1bWVUcmVuZDogJ2luc3VmZmljaWVudF9kYXRhJyxcbiAgICAgICAgY29uc2lzdGVuY3lUcmVuZDogJ2luc3VmZmljaWVudF9kYXRhJyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8g57ea5b2i5Zue5biw44Gn44OI44Os44Oz44OJ44KS6KiI566XXG4gICAgY29uc3Qgd2VpZ2h0VHJlbmQgPSB0aGlzLmNhbGN1bGF0ZUxpbmVhclRyZW5kKFxuICAgICAgc2Vzc2lvbnMubWFwKChzKSA9PiBzLndlaWdodClcbiAgICApO1xuICAgIGNvbnN0IHZvbHVtZVRyZW5kID0gdGhpcy5jYWxjdWxhdGVMaW5lYXJUcmVuZChcbiAgICAgIHNlc3Npb25zLm1hcCgocykgPT4gcy52b2x1bWUpXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICB3ZWlnaHRUcmVuZDpcbiAgICAgICAgd2VpZ2h0VHJlbmQgPiAwLjFcbiAgICAgICAgICA/ICdpbmNyZWFzaW5nJ1xuICAgICAgICAgIDogd2VpZ2h0VHJlbmQgPCAtMC4xXG4gICAgICAgICAgICA/ICdkZWNyZWFzaW5nJ1xuICAgICAgICAgICAgOiAnc3RhYmxlJyxcbiAgICAgIHZvbHVtZVRyZW5kOlxuICAgICAgICB2b2x1bWVUcmVuZCA+IDAuMVxuICAgICAgICAgID8gJ2luY3JlYXNpbmcnXG4gICAgICAgICAgOiB2b2x1bWVUcmVuZCA8IC0wLjFcbiAgICAgICAgICAgID8gJ2RlY3JlYXNpbmcnXG4gICAgICAgICAgICA6ICdzdGFibGUnLFxuICAgICAgY29uc2lzdGVuY3lUcmVuZDpcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVDb25zaXN0ZW5jeVNjb3JlKGV4ZXJjaXNlRGF0YSkgPiA3MFxuICAgICAgICAgID8gJ2dvb2QnXG4gICAgICAgICAgOiAnbmVlZHNfaW1wcm92ZW1lbnQnLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICog57ea5b2i44OI44Os44Oz44OJ44KS6KiI566XXG4gICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyAtIOWApOOBrumFjeWIl1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfSDjg4jjg6zjg7Pjg4nkv4LmlbBcbiAgICovXG4gIGNhbGN1bGF0ZUxpbmVhclRyZW5kKHZhbHVlcykge1xuICAgIGNvbnN0IG4gPSB2YWx1ZXMubGVuZ3RoO1xuICAgIGNvbnN0IHggPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBuIH0sIChfLCBpKSA9PiBpKTtcbiAgICBjb25zdCB5ID0gdmFsdWVzO1xuXG4gICAgY29uc3Qgc3VtWCA9IHgucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsLCAwKTtcbiAgICBjb25zdCBzdW1ZID0geS5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyB2YWwsIDApO1xuICAgIGNvbnN0IHN1bVhZID0geC5yZWR1Y2UoKHN1bSwgdmFsLCBpKSA9PiBzdW0gKyB2YWwgKiB5W2ldLCAwKTtcbiAgICBjb25zdCBzdW1YWCA9IHgucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsICogdmFsLCAwKTtcblxuICAgIGNvbnN0IHNsb3BlID0gKG4gKiBzdW1YWSAtIHN1bVggKiBzdW1ZKSAvIChuICogc3VtWFggLSBzdW1YICogc3VtWCk7XG4gICAgcmV0dXJuIHNsb3BlO1xuICB9XG5cbiAgLy8g44OY44Or44OR44O844Oh44K944OD44OJXG4gIGNhbGN1bGF0ZUF2ZXJhZ2VWb2x1bWUoc2Vzc2lvbnMpIHtcbiAgICByZXR1cm4gc2Vzc2lvbnMubGVuZ3RoID4gMFxuICAgICAgPyBzZXNzaW9ucy5yZWR1Y2UoKHN1bSwgc2Vzc2lvbikgPT4gc3VtICsgc2Vzc2lvbi52b2x1bWUsIDApIC9cbiAgICAgICAgICBzZXNzaW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuXG4gIGNhbGN1bGF0ZUF2ZXJhZ2VXZWlnaHQoc2Vzc2lvbnMpIHtcbiAgICByZXR1cm4gc2Vzc2lvbnMubGVuZ3RoID4gMFxuICAgICAgPyBzZXNzaW9ucy5yZWR1Y2UoKHN1bSwgc2Vzc2lvbikgPT4gc3VtICsgc2Vzc2lvbi53ZWlnaHQsIDApIC9cbiAgICAgICAgICBzZXNzaW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuXG4gIGNhbGN1bGF0ZUF2ZXJhZ2VSZXBzKHNlc3Npb25zKSB7XG4gICAgcmV0dXJuIHNlc3Npb25zLmxlbmd0aCA+IDBcbiAgICAgID8gc2Vzc2lvbnMucmVkdWNlKChzdW0sIHNlc3Npb24pID0+IHN1bSArIHNlc3Npb24ucmVwcywgMCkgL1xuICAgICAgICAgIHNlc3Npb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG5cbiAgY2FsY3VsYXRlQXZlcmFnZVNldHMoc2Vzc2lvbnMpIHtcbiAgICByZXR1cm4gc2Vzc2lvbnMubGVuZ3RoID4gMFxuICAgICAgPyBzZXNzaW9ucy5yZWR1Y2UoKHN1bSwgc2Vzc2lvbikgPT4gc3VtICsgc2Vzc2lvbi5zZXRzLCAwKSAvXG4gICAgICAgICAgc2Vzc2lvbnMubGVuZ3RoXG4gICAgICA6IDA7XG4gIH1cblxuICAvLyDjgq3jg6Pjg4Pjgrfjg6XnrqHnkIZcbiAgZ2V0Q2FjaGVkQW5hbHlzaXMoa2V5KSB7XG4gICAgY29uc3QgY2FjaGVkID0gdGhpcy5hbmFseXNpc0NhY2hlLmdldChrZXkpO1xuICAgIGlmIChjYWNoZWQgJiYgRGF0ZS5ub3coKSAtIGNhY2hlZC50aW1lc3RhbXAgPCB0aGlzLmNhY2hlRXhwaXJ5KSB7XG4gICAgICByZXR1cm4gY2FjaGVkLmRhdGE7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgc2V0Q2FjaGVkQW5hbHlzaXMoa2V5LCBkYXRhKSB7XG4gICAgdGhpcy5hbmFseXNpc0NhY2hlLnNldChrZXksIHtcbiAgICAgIGRhdGEsXG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICog44Kt44Oj44OD44K344Ol44KS44Kv44Oq44KiXG4gICAqL1xuICBjbGVhckNhY2hlKCkge1xuICAgIHRoaXMuYW5hbHlzaXNDYWNoZS5jbGVhcigpO1xuICB9XG59XG5cbi8vIOOCt+ODs+OCsOODq+ODiOODs+OCpOODs+OCueOCv+ODs+OCueOCkuOCqOOCr+OCueODneODvOODiFxuZXhwb3J0IGNvbnN0IHByb2dyZXNzaXZlT3Zl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