{"version":3,"names":["VALIDATION_RULES","exports","WEIGHT","min","max","unit","REPS","SETS","EMAIL_MAX_LENGTH","PASSWORD_MIN_LENGTH","PASSWORD_MAX_LENGTH","NICKNAME_MAX_LENGTH","EXERCISE_NAME_MAX_LENGTH","NOTES_MAX_LENGTH","EMAIL_PATTERN","PASSWORD_PATTERN","SAFE_TEXT_PATTERN","ERROR_MESSAGES","REQUIRED","INVALID_EMAIL","INVALID_PASSWORD","INVALID_NUMBER","OUT_OF_RANGE","concat","TOO_LONG","INVALID_CHARACTERS","XSS_DETECTED","escapeHtml","str","String","escapeMap","replace","match","detectXSS","input","xssPatterns","some","pattern","test","Validator","_classCallCheck","_createClass","key","value","required","isValid","undefined","trim","errors","sanitizedData","email","sanitizedEmail","push","toLowerCase","length","password","sanitizedPassword","numberRange","arguments","sanitizedValue","numValue","Number","isNaN","weight","reps","sets","safeText","text","maxLength","sanitizedText","nickname","exerciseName","result","unshift","FormValidator","Map","clearErrors","clear","setFieldErrors","fieldName","set","getFieldErrors","get","getAllErrors","errorObj","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","_slicedToArray","field","err","e","f","size","validateField","validator","validateAuthForm","formData","validateWorkoutForm","notes","validateProfileForm","display_name","age","height","displayFieldError","errorElement","textContent","classList","remove","add","setFieldErrorState","inputElement","hasError","RealtimeValidator","formValidator","debounceTimers","setupFieldValidation","_this","debounceMs","name","id","addEventListener","has","clearTimeout","timer","setTimeout","setupAuthFormValidation","formElement","emailInput","querySelector","passwordInput","emailError","passwordError","setupWorkoutFormValidation","exerciseNameInput","weightInput","repsInput","setsInput","notesInput","globalFormValidator","globalRealtimeValidator"],"sources":["validation.js"],"sourcesContent":["// validation.js - 包括的なバリデーションシステム\n\n/**\n * バリデーション結果オブジェクト\n * @typedef {Object} ValidationResult\n * @property {boolean} isValid - バリデーション結果\n * @property {string[]} errors - エラーメッセージ配列\n * @property {Object} sanitizedData - サニタイズされたデータ\n */\n\n/**\n * バリデーションルール定義\n */\nexport const VALIDATION_RULES = {\n  // 数値範囲\n  WEIGHT: { min: 0.1, max: 500, unit: 'kg' },\n  REPS: { min: 1, max: 100, unit: '回' },\n  SETS: { min: 1, max: 10, unit: 'セット' },\n\n  // 文字列長\n  EMAIL_MAX_LENGTH: 254,\n  PASSWORD_MIN_LENGTH: 8,\n  PASSWORD_MAX_LENGTH: 128,\n  NICKNAME_MAX_LENGTH: 50,\n  EXERCISE_NAME_MAX_LENGTH: 100,\n  NOTES_MAX_LENGTH: 1000,\n\n  // 正規表現パターン\n  // eslint-disable-next-line max-len\n  EMAIL_PATTERN:\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,\n  PASSWORD_PATTERN: /^[a-zA-Z\\d@$!%*?&]{8,}$/,\n  SAFE_TEXT_PATTERN:\n    /^[a-zA-Z0-9\\u3040-\\u309F\\u30A0-\\u30FF\\u4E00-\\u9FAF\\s\\-_.()（）、。！？]*$/,\n};\n\n/**\n * エラーメッセージ定義\n */\nexport const ERROR_MESSAGES = {\n  REQUIRED: 'この項目は必須です',\n  INVALID_EMAIL: 'メールアドレスの形式が正しくありません',\n  INVALID_PASSWORD: 'パスワードは8文字以上で入力してください',\n  INVALID_NUMBER: '数値を入力してください',\n  OUT_OF_RANGE: (min, max, unit) =>\n    `${min}${unit}から${max}${unit}の範囲で入力してください`,\n  TOO_LONG: (max) => `${max}文字以内で入力してください`,\n  INVALID_CHARACTERS: '使用できない文字が含まれています',\n  XSS_DETECTED: '不正なスクリプトが検出されました',\n};\n\n/**\n * HTMLエスケープ処理\n * @param {string} str - エスケープする文字列\n * @returns {string} エスケープされた文字列\n */\nexport function escapeHtml(str) {\n  if (typeof str !== 'string') {\n    return String(str);\n  }\n\n  const escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;',\n  };\n\n  return str.replace(/[&<>\"'`=/]/g, (match) => escapeMap[match]);\n}\n\n/**\n * XSS攻撃パターンの検出\n * @param {string} input - 検査する文字列\n * @returns {boolean} XSS攻撃パターンが検出されたかどうか\n */\nexport function detectXSS(input) {\n  if (typeof input !== 'string') {\n    return false;\n  }\n\n  const xssPatterns = [\n    /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n    /javascript:/gi,\n    /on\\w+\\s*=/gi,\n    /<iframe\\b/gi,\n    /<object\\b/gi,\n    /<embed\\b/gi,\n    /<link\\b/gi,\n    /<meta\\b/gi,\n    /expression\\s*\\(/gi,\n    /url\\s*\\(/gi,\n    /vbscript:/gi,\n    /data:text\\/html/gi,\n  ];\n\n  return xssPatterns.some((pattern) => pattern.test(input));\n}\n\n/**\n * 基本バリデーター\n */\nexport class Validator {\n  /**\n   * 必須チェック\n   * @param {*} value - チェックする値\n   * @returns {ValidationResult} バリデーション結果\n   */\n  static required(value) {\n    const isValid =\n      value !== null && value !== undefined && String(value).trim() !== '';\n    return {\n      isValid,\n      errors: isValid ? [] : [ERROR_MESSAGES.REQUIRED],\n      sanitizedData: isValid ? String(value).trim() : '',\n    };\n  }\n\n  /**\n   * メールアドレスバリデーション\n   * @param {string} email - メールアドレス\n   * @returns {ValidationResult} バリデーション結果\n   */\n  static email(email) {\n    const errors = [];\n    let sanitizedEmail = '';\n\n    if (!email || typeof email !== 'string') {\n      errors.push(ERROR_MESSAGES.REQUIRED);\n    } else {\n      sanitizedEmail = email.trim().toLowerCase();\n\n      if (sanitizedEmail.length > VALIDATION_RULES.EMAIL_MAX_LENGTH) {\n        errors.push(ERROR_MESSAGES.TOO_LONG(VALIDATION_RULES.EMAIL_MAX_LENGTH));\n      }\n\n      if (!VALIDATION_RULES.EMAIL_PATTERN.test(sanitizedEmail)) {\n        errors.push(ERROR_MESSAGES.INVALID_EMAIL);\n      }\n\n      if (detectXSS(sanitizedEmail)) {\n        errors.push(ERROR_MESSAGES.XSS_DETECTED);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      sanitizedData: sanitizedEmail,\n    };\n  }\n\n  /**\n   * パスワードバリデーション\n   * @param {string} password - パスワード\n   * @returns {ValidationResult} バリデーション結果\n   */\n  static password(password) {\n    const errors = [];\n    let sanitizedPassword = '';\n\n    if (!password || typeof password !== 'string') {\n      errors.push(ERROR_MESSAGES.REQUIRED);\n    } else {\n      sanitizedPassword = password.trim();\n\n      if (sanitizedPassword.length < VALIDATION_RULES.PASSWORD_MIN_LENGTH) {\n        errors.push(ERROR_MESSAGES.INVALID_PASSWORD);\n      } else if (\n        sanitizedPassword.length > VALIDATION_RULES.PASSWORD_MAX_LENGTH\n      ) {\n        errors.push(\n          ERROR_MESSAGES.TOO_LONG(VALIDATION_RULES.PASSWORD_MAX_LENGTH)\n        );\n      } else if (!VALIDATION_RULES.PASSWORD_PATTERN.test(sanitizedPassword)) {\n        errors.push(ERROR_MESSAGES.INVALID_PASSWORD);\n      }\n\n      if (detectXSS(sanitizedPassword)) {\n        errors.push(ERROR_MESSAGES.XSS_DETECTED);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      sanitizedData: sanitizedPassword,\n    };\n  }\n\n  /**\n   * 数値範囲バリデーション\n   * @param {*} value - チェックする値\n   * @param {number} min - 最小値\n   * @param {number} max - 最大値\n   * @param {string} unit - 単位\n   * @returns {ValidationResult} バリデーション結果\n   */\n  static numberRange(value, min, max, unit = '') {\n    const errors = [];\n    let sanitizedValue = 0;\n\n    if (value === null || value === undefined || value === '') {\n      errors.push(ERROR_MESSAGES.REQUIRED);\n    } else {\n      const numValue = Number(value);\n\n      if (isNaN(numValue)) {\n        errors.push(ERROR_MESSAGES.INVALID_NUMBER);\n      } else {\n        sanitizedValue = numValue;\n\n        if (numValue < min || numValue > max) {\n          errors.push(ERROR_MESSAGES.OUT_OF_RANGE(min, max, unit));\n        }\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      sanitizedData: sanitizedValue,\n    };\n  }\n\n  /**\n   * 重量バリデーション\n   * @param {*} weight - 重量\n   * @returns {ValidationResult} バリデーション結果\n   */\n  static weight(weight) {\n    return Validator.numberRange(\n      weight,\n      VALIDATION_RULES.WEIGHT.min,\n      VALIDATION_RULES.WEIGHT.max,\n      VALIDATION_RULES.WEIGHT.unit\n    );\n  }\n\n  /**\n   * 回数バリデーション\n   * @param {*} reps - 回数\n   * @returns {ValidationResult} バリデーション結果\n   */\n  static reps(reps) {\n    return Validator.numberRange(\n      reps,\n      VALIDATION_RULES.REPS.min,\n      VALIDATION_RULES.REPS.max,\n      VALIDATION_RULES.REPS.unit\n    );\n  }\n\n  /**\n   * セット数バリデーション\n   * @param {*} sets - セット数\n   * @returns {ValidationResult} バリデーション結果\n   */\n  static sets(sets) {\n    return Validator.numberRange(\n      sets,\n      VALIDATION_RULES.SETS.min,\n      VALIDATION_RULES.SETS.max,\n      VALIDATION_RULES.SETS.unit\n    );\n  }\n\n  /**\n   * 安全なテキストバリデーション\n   * @param {string} text - テキスト\n   * @param {number} maxLength - 最大文字数\n   * @returns {ValidationResult} バリデーション結果\n   */\n  static safeText(text, maxLength = VALIDATION_RULES.NOTES_MAX_LENGTH) {\n    const errors = [];\n    let sanitizedText = '';\n\n    if (text && typeof text === 'string') {\n      sanitizedText = escapeHtml(text.trim());\n\n      if (sanitizedText.length > maxLength) {\n        errors.push(ERROR_MESSAGES.TOO_LONG(maxLength));\n      }\n\n      if (detectXSS(text)) {\n        errors.push(ERROR_MESSAGES.XSS_DETECTED);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      sanitizedData: sanitizedText,\n    };\n  }\n\n  /**\n   * ニックネームバリデーション\n   * @param {string} nickname - ニックネーム\n   * @returns {ValidationResult} バリデーション結果\n   */\n  static nickname(nickname) {\n    return Validator.safeText(nickname, VALIDATION_RULES.NICKNAME_MAX_LENGTH);\n  }\n\n  /**\n   * エクササイズ名バリデーション\n   * @param {string} exerciseName - エクササイズ名\n   * @returns {ValidationResult} バリデーション結果\n   */\n  static exerciseName(exerciseName) {\n    const result = Validator.safeText(\n      exerciseName,\n      VALIDATION_RULES.EXERCISE_NAME_MAX_LENGTH\n    );\n\n    if (!exerciseName || exerciseName.trim() === '') {\n      result.errors.unshift(ERROR_MESSAGES.REQUIRED);\n      result.isValid = false;\n    }\n\n    return result;\n  }\n}\n\n/**\n * フォームバリデーター\n */\nexport class FormValidator {\n  constructor() {\n    this.errors = new Map();\n  }\n\n  /**\n   * エラーをクリア\n   */\n  clearErrors() {\n    this.errors.clear();\n  }\n\n  /**\n   * フィールドのエラーを設定\n   * @param {string} fieldName - フィールド名\n   * @param {string[]} errors - エラーメッセージ配列\n   */\n  setFieldErrors(fieldName, errors) {\n    if (errors.length > 0) {\n      this.errors.set(fieldName, errors);\n    } else {\n      this.errors.delete(fieldName);\n    }\n  }\n\n  /**\n   * フィールドのエラーを取得\n   * @param {string} fieldName - フィールド名\n   * @returns {string[]} エラーメッセージ配列\n   */\n  getFieldErrors(fieldName) {\n    return this.errors.get(fieldName) || [];\n  }\n\n  /**\n   * 全エラーを取得\n   * @returns {Object} エラーオブジェクト\n   */\n  getAllErrors() {\n    const errorObj = {};\n    for (const [field, errors] of this.errors) {\n      errorObj[field] = errors;\n    }\n    return errorObj;\n  }\n\n  /**\n   * バリデーションが成功したかチェック\n   * @returns {boolean} 成功したかどうか\n   */\n  isValid() {\n    return this.errors.size === 0;\n  }\n\n  /**\n   * フィールドをバリデーション\n   * @param {string} fieldName - フィールド名\n   * @param {*} value - 値\n   * @param {Function} validator - バリデーター関数\n   * @returns {*} サニタイズされた値\n   */\n  validateField(fieldName, value, validator) {\n    const result = validator(value);\n    this.setFieldErrors(fieldName, result.errors);\n    return result.sanitizedData;\n  }\n\n  /**\n   * 認証フォームをバリデーション\n   * @param {Object} formData - フォームデータ\n   * @returns {Object} サニタイズされたデータ\n   */\n  validateAuthForm(formData) {\n    this.clearErrors();\n\n    const sanitizedData = {\n      email: this.validateField('email', formData.email, Validator.email),\n      password: this.validateField(\n        'password',\n        formData.password,\n        Validator.password\n      ),\n    };\n\n    return sanitizedData;\n  }\n\n  /**\n   * ワークアウトフォームをバリデーション\n   * @param {Object} formData - フォームデータ\n   * @returns {Object} サニタイズされたデータ\n   */\n  validateWorkoutForm(formData) {\n    this.clearErrors();\n\n    const sanitizedData = {\n      exerciseName: this.validateField(\n        'exerciseName',\n        formData.exerciseName,\n        Validator.exerciseName\n      ),\n      weight: this.validateField('weight', formData.weight, Validator.weight),\n      reps: this.validateField('reps', formData.reps, Validator.reps),\n      sets: this.validateField('sets', formData.sets, Validator.sets),\n      notes: this.validateField('notes', formData.notes, (value) =>\n        Validator.safeText(value)\n      ),\n    };\n\n    return sanitizedData;\n  }\n\n  /**\n   * プロフィールフォームをバリデーション\n   * @param {Object} formData - フォームデータ\n   * @returns {Object} サニタイズされたデータ\n   */\n  validateProfileForm(formData) {\n    this.clearErrors();\n\n    const sanitizedData = {\n      display_name: this.validateField(\n        'display_name',\n        formData.display_name,\n        Validator.nickname\n      ),\n      email: this.validateField('email', formData.email, (value) => {\n        // メールアドレスは空の場合はスキップ、入力がある場合はバリデーション\n        if (!value || value.trim() === '') {\n          return { isValid: true, errors: [], sanitizedData: '' };\n        }\n        return Validator.email(value);\n      }),\n      age: this.validateField('age', formData.age, (value) =>\n        Validator.numberRange(value, 10, 100, '歳')\n      ),\n      weight: this.validateField('weight', formData.weight, Validator.weight),\n      height: this.validateField('height', formData.height, (value) =>\n        Validator.numberRange(value, 100, 250, 'cm')\n      ),\n    };\n\n    return sanitizedData;\n  }\n\n  /**\n   * エラーメッセージをDOMに表示\n   * @param {string} fieldName - フィールド名\n   * @param {Element} errorElement - エラー表示要素\n   */\n  displayFieldError(fieldName, errorElement) {\n    const errors = this.getFieldErrors(fieldName);\n\n    if (errorElement) {\n      if (errors.length > 0) {\n        errorElement.textContent = errors[0]; // 最初のエラーのみ表示\n        errorElement.classList.remove('hidden');\n        errorElement.classList.add('text-red-600', 'text-sm', 'mt-1');\n      } else {\n        errorElement.textContent = '';\n        errorElement.classList.add('hidden');\n      }\n    }\n  }\n\n  /**\n   * フィールドの視覚的エラー状態を設定\n   * @param {string} fieldName - フィールド名\n   * @param {Element} inputElement - 入力要素\n   */\n  setFieldErrorState(fieldName, inputElement) {\n    const hasError = this.getFieldErrors(fieldName).length > 0;\n\n    if (inputElement) {\n      if (hasError) {\n        inputElement.classList.add('border-red-500', 'focus:border-red-500');\n        inputElement.classList.remove(\n          'border-gray-300',\n          'focus:border-blue-500'\n        );\n      } else {\n        inputElement.classList.remove('border-red-500', 'focus:border-red-500');\n        inputElement.classList.add('border-gray-300', 'focus:border-blue-500');\n      }\n    }\n  }\n}\n\n/**\n * リアルタイムバリデーション\n */\nexport class RealtimeValidator {\n  constructor(formValidator) {\n    this.formValidator = formValidator;\n    this.debounceTimers = new Map();\n  }\n\n  /**\n   * フィールドにリアルタイムバリデーションを設定\n   * @param {Element} inputElement - 入力要素\n   * @param {Element} errorElement - エラー表示要素\n   * @param {Function} validator - バリデーター関数\n   * @param {number} debounceMs - デバウンス時間\n   */\n  setupFieldValidation(\n    inputElement,\n    errorElement,\n    validator,\n    debounceMs = 300\n  ) {\n    if (!inputElement) {\n      return;\n    }\n\n    const fieldName = inputElement.name || inputElement.id;\n\n    const validateField = () => {\n      const value = inputElement.value;\n      this.formValidator.validateField(fieldName, value, validator);\n      this.formValidator.displayFieldError(fieldName, errorElement);\n      this.formValidator.setFieldErrorState(fieldName, inputElement);\n    };\n\n    // リアルタイムバリデーション（デバウンス付き）\n    inputElement.addEventListener('input', () => {\n      if (this.debounceTimers.has(fieldName)) {\n        clearTimeout(this.debounceTimers.get(fieldName));\n      }\n\n      const timer = setTimeout(validateField, debounceMs);\n      this.debounceTimers.set(fieldName, timer);\n    });\n\n    // フォーカス離脱時の即座バリデーション\n    inputElement.addEventListener('blur', validateField);\n  }\n\n  /**\n   * 認証フォームにリアルタイムバリデーションを設定\n   * @param {Element} formElement - フォーム要素\n   */\n  setupAuthFormValidation(formElement) {\n    if (!formElement) {\n      return;\n    }\n\n    const emailInput = formElement.querySelector('#auth-email, #signup-email');\n    const passwordInput = formElement.querySelector(\n      '#auth-password, #signup-password'\n    );\n    const emailError = formElement.querySelector('#email-error');\n    const passwordError = formElement.querySelector('#password-error');\n\n    this.setupFieldValidation(emailInput, emailError, Validator.email);\n    this.setupFieldValidation(passwordInput, passwordError, Validator.password);\n  }\n\n  /**\n   * ワークアウトフォームにリアルタイムバリデーションを設定\n   * @param {Element} formElement - フォーム要素\n   */\n  setupWorkoutFormValidation(formElement) {\n    if (!formElement) {\n      return;\n    }\n\n    const exerciseNameInput = formElement.querySelector(\n      '[name=\"exerciseName\"]'\n    );\n    const weightInput = formElement.querySelector('[name=\"weight\"]');\n    const repsInput = formElement.querySelector('[name=\"reps\"]');\n    const setsInput = formElement.querySelector('[name=\"sets\"]');\n    const notesInput = formElement.querySelector('[name=\"notes\"]');\n\n    this.setupFieldValidation(exerciseNameInput, null, Validator.exerciseName);\n    this.setupFieldValidation(weightInput, null, Validator.weight);\n    this.setupFieldValidation(repsInput, null, Validator.reps);\n    this.setupFieldValidation(setsInput, null, Validator.sets);\n    this.setupFieldValidation(notesInput, null, (value) =>\n      Validator.safeText(value)\n    );\n  }\n}\n\n// グローバルバリデーターインスタンス\nexport const globalFormValidator = new FormValidator();\nexport const globalRealtimeValidator = new RealtimeValidator(\n  globalFormValidator\n);\n"],"mappings":"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","ignoreList":[]}