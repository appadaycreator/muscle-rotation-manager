{"version":3,"names":["_supabaseService","require","_constants","_typeof","o","Symbol","iterator","constructor","prototype","_regenerator","e","t","r","n","toStringTag","i","c","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","w","m","defineProperty","_regeneratorDefine","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toPropertyKey","_classCallCheck","_defineProperties","key","_createClass","_toPrimitive","toPrimitive","String","Number","RecommendationService","userSettings","loadUserSettings","defaultSettings","fitnessLevel","primaryGoal","workoutFrequency","experienceMonths","recoveryPreference","sleepHoursPerNight","stressLevel","preferredWorkoutTime","preferredWorkoutDuration","preferredIntensity","trainingFrequency","restDayPreference","userProfile","JSON","parse","localStorage","getItem","legacySettings","mappedSettings","fitness_level","primary_goal","workout_frequency","experience_months","recovery_preference","sleep_hours_per_night","stress_level","preferred_workout_time","preferred_workout_duration","error","console","warn","calculateRecoveryPercentage","lastWorkoutDate","muscleGroupId","lastIntensity","undefined","percentage","status","hoursUntilRecovery","isReady","muscleGroup","MUSCLE_GROUPS","find","mg","id","Error","concat","baseRecoveryHours","recoveryHours","intensityMultiplier","INTENSITY_MULTIPLIERS","fitnessMultiplier","FITNESS_LEVEL_MULTIPLIERS","recoveryMultiplier","getRecoveryMultiplier","lifestyleMultiplier","getLifestyleMultiplier","adjustedRecoveryHours","now","Date","timeDiff","hoursElapsed","recoveryPercentage","Math","min","round","max","factors","baseHours","_getMuscleRecoveryData","_callee","_this","workoutHistory","result","localHistory","recoveryData","_t","_context","supabaseService","isAvailable","getCurrentUser","getWorkouts","Array","isArray","map","muscle","lastWorkout","findLastWorkoutForMuscle","recoveryInfo","lastTrained","nextRecommended","date","intensity","formatLastTrainedDate","formatNextRecommendedTime","recovery","recoveryStatus","recoveryColor","getRecoveryColor","recoveryClass","getRecoveryClass","recoveryFactors","getMuscleRecoveryData","muscleId","sortedHistory","workout","muscleGroups","muscle_groups_trained","includes","sort","b","dateA","workout_date","startTime","dateB","_getRecommendations","_callee2","readyMuscles","prioritizedMuscles","recommendations","_t2","_context2","prioritizeMuscles","generateRecommendationMessages","getFallbackRecommendations","getRecommendations","_this2","priority","daysSinceLastWorkout","getDaysSinceLastWorkout","category","message","bgColor","dotColor","textColor","type","scientificBasis","topMuscle","name","iconColor","replace","secondaryMuscle","fitnessAdvice","getFitnessLevelAdvice","goalAdvice","getGoalBasedAdvice","frequencyAdvice","getFrequencyAdvice","level","adviceMap","beginner","intermediate","advanced","goal","recommendedIntensity","getRecommendedIntensity","strength","muscle_gain","endurance","weight_loss","general_fitness","currentFrequency","recommendedFrequency","getRecommendedFrequency","workoutDate","diffTime","diffDays","floor","days","hours","recoveryMultipliers","fast","standard","slow","multiplier","sleepHours","intensityMap","frequencyMap","updateUserSettings","newSettings","updatedProfile","setItem","stringify","getRecommendationDetails","recoveryScience","RECOVERY_SCIENCE","muscleName","reason","fitnessLevelAdjustment","userFitnessLevel","_default","exports"],"sources":["recommendationService.js"],"sourcesContent":["// recommendationService.js - 科学的根拠に基づく推奨アルゴリズム\n\nimport { supabaseService } from './supabaseService.js';\nimport {\n    MUSCLE_GROUPS,\n    RECOVERY_SCIENCE,\n    INTENSITY_MULTIPLIERS,\n    FITNESS_LEVEL_MULTIPLIERS\n} from '../utils/constants.js';\n\n/**\n * 推奨アルゴリズムサービス\n * 科学的根拠に基づいた筋肉部位推奨システム\n */\nclass RecommendationService {\n    constructor() {\n        this.userSettings = this.loadUserSettings();\n    }\n\n    /**\n   * ユーザー設定を読み込み\n   * @returns {Object} ユーザー設定\n   */\n    loadUserSettings() {\n        const defaultSettings = {\n            // 基本設定\n            fitnessLevel: 'beginner',\n            primaryGoal: 'muscle_gain',\n            workoutFrequency: 3,\n\n            // 詳細設定\n            experienceMonths: 0,\n            recoveryPreference: 'standard',\n            sleepHoursPerNight: 7.0,\n            stressLevel: 5,\n            preferredWorkoutTime: '18:00',\n            preferredWorkoutDuration: 60,\n\n            // 旧設定（互換性のため）\n            preferredIntensity: 'moderate',\n            trainingFrequency: 3,\n            restDayPreference: 'sunday'\n        };\n\n        try {\n            // 新しい設定を優先的に読み込み\n            const userProfile = JSON.parse(\n                localStorage.getItem('userProfile') || '{}'\n            );\n            const legacySettings = JSON.parse(\n                localStorage.getItem('userFitnessSettings') || '{}'\n            );\n\n            // 新しい設定項目をマッピング\n            const mappedSettings = {\n                ...defaultSettings,\n                ...legacySettings,\n\n                // 新しい設定項目\n                fitnessLevel: userProfile.fitness_level || defaultSettings.fitnessLevel,\n                primaryGoal: userProfile.primary_goal || defaultSettings.primaryGoal,\n                workoutFrequency:\n          userProfile.workout_frequency || defaultSettings.workoutFrequency,\n                experienceMonths:\n          userProfile.experience_months || defaultSettings.experienceMonths,\n                recoveryPreference:\n          userProfile.recovery_preference || defaultSettings.recoveryPreference,\n                sleepHoursPerNight:\n          userProfile.sleep_hours_per_night ||\n          defaultSettings.sleepHoursPerNight,\n                stressLevel: userProfile.stress_level || defaultSettings.stressLevel,\n                preferredWorkoutTime:\n          userProfile.preferred_workout_time ||\n          defaultSettings.preferredWorkoutTime,\n                preferredWorkoutDuration:\n          userProfile.preferred_workout_duration ||\n          defaultSettings.preferredWorkoutDuration\n            };\n\n            return mappedSettings;\n        } catch (error) {\n            console.warn('ユーザー設定の読み込みに失敗:', error);\n            return defaultSettings;\n        }\n    }\n\n    /**\n   * 筋肉回復度を計算\n   * @param {Date} lastWorkoutDate - 最後のワークアウト日\n   * @param {string} muscleGroupId - 筋肉部位ID\n   * @param {string} lastIntensity - 前回の強度\n   * @returns {Object} 回復度情報\n   */\n    calculateRecoveryPercentage(\n        lastWorkoutDate,\n        muscleGroupId,\n        lastIntensity = 'moderate'\n    ) {\n        if (!lastWorkoutDate) {\n            return {\n                percentage: 100,\n                status: 'fully_recovered',\n                hoursUntilRecovery: 0,\n                isReady: true\n            };\n        }\n\n        const muscleGroup = MUSCLE_GROUPS.find((mg) => mg.id === muscleGroupId);\n        if (!muscleGroup) {\n            throw new Error(`筋肉部位が見つかりません: ${muscleGroupId}`);\n        }\n\n        // 基本回復時間を取得\n        const baseRecoveryHours = muscleGroup.recoveryHours;\n\n        // 強度による調整\n        const intensityMultiplier = INTENSITY_MULTIPLIERS[lastIntensity] || 1.0;\n\n        // 体力レベルによる調整\n        const fitnessMultiplier =\n      FITNESS_LEVEL_MULTIPLIERS[this.userSettings.fitnessLevel] || 1.0;\n\n        // 回復設定による調整\n        const recoveryMultiplier = this.getRecoveryMultiplier();\n\n        // ライフスタイル要因による調整\n        const lifestyleMultiplier = this.getLifestyleMultiplier();\n\n        // 調整後の回復時間\n        const adjustedRecoveryHours =\n      baseRecoveryHours *\n      intensityMultiplier *\n      fitnessMultiplier *\n      recoveryMultiplier *\n      lifestyleMultiplier;\n\n        // 経過時間を計算\n        const now = new Date();\n        const timeDiff = now - new Date(lastWorkoutDate);\n        const hoursElapsed = timeDiff / (1000 * 60 * 60);\n\n        // 回復度を計算\n        const recoveryPercentage = Math.min(\n            100,\n            Math.round((hoursElapsed / adjustedRecoveryHours) * 100)\n        );\n        const hoursUntilRecovery = Math.max(\n            0,\n            adjustedRecoveryHours - hoursElapsed\n        );\n\n        let status;\n        if (recoveryPercentage >= 100) {\n            status = 'fully_recovered';\n        } else if (recoveryPercentage >= 80) {\n            status = 'mostly_recovered';\n        } else if (recoveryPercentage >= 50) {\n            status = 'partially_recovered';\n        } else {\n            status = 'still_recovering';\n        }\n\n        return {\n            percentage: recoveryPercentage,\n            status,\n            hoursUntilRecovery: Math.round(hoursUntilRecovery * 10) / 10,\n            isReady: recoveryPercentage >= 80, // 80%以上で推奨対象\n            adjustedRecoveryHours: Math.round(adjustedRecoveryHours * 10) / 10,\n            factors: {\n                baseHours: baseRecoveryHours,\n                intensityMultiplier,\n                fitnessMultiplier,\n                lastIntensity\n            }\n        };\n    }\n\n    /**\n   * 筋肉回復データを取得\n   * @returns {Promise<Array>} 筋肉回復データ配列\n   */\n    async getMuscleRecoveryData() {\n        try {\n            // Supabaseからワークアウト履歴を取得\n            let workoutHistory = [];\n            if (supabaseService.isAvailable() && supabaseService.getCurrentUser()) {\n                const result = await supabaseService.getWorkouts(30); // 過去30件\n                // データが配列でない場合は空配列にフォールバック\n                workoutHistory = Array.isArray(result) ? result : [];\n            } else {\n                // オフライン時はローカルストレージから取得\n                const localHistory = localStorage.getItem('workoutHistory');\n                workoutHistory = localHistory ? JSON.parse(localHistory) : [];\n            }\n\n            // ワークアウト履歴が配列でない場合は空配列にフォールバック\n            if (!Array.isArray(workoutHistory)) {\n                console.warn('workoutHistory is not an array, using empty array');\n                workoutHistory = [];\n            }\n\n            // 各筋肉部位の回復データを計算\n            const recoveryData = MUSCLE_GROUPS.map((muscle) => {\n                // 該当部位の最新ワークアウトを検索\n                const lastWorkout = this.findLastWorkoutForMuscle(\n                    workoutHistory,\n                    muscle.id\n                );\n\n                let recoveryInfo = {\n                    percentage: 100,\n                    status: 'fully_recovered',\n                    hoursUntilRecovery: 0,\n                    isReady: true\n                };\n\n                let lastTrained = 'なし';\n                let nextRecommended = '今すぐ';\n\n                if (lastWorkout) {\n                    recoveryInfo = this.calculateRecoveryPercentage(\n                        lastWorkout.date,\n                        muscle.id,\n                        lastWorkout.intensity || 'moderate'\n                    );\n\n                    lastTrained = this.formatLastTrainedDate(lastWorkout.date);\n                    nextRecommended = this.formatNextRecommendedTime(\n                        recoveryInfo.hoursUntilRecovery\n                    );\n                }\n\n                return {\n                    ...muscle,\n                    lastTrained,\n                    recovery: recoveryInfo.percentage,\n                    recoveryStatus: recoveryInfo.status,\n                    hoursUntilRecovery: recoveryInfo.hoursUntilRecovery,\n                    nextRecommended,\n                    isReady: recoveryInfo.isReady,\n                    recoveryColor: this.getRecoveryColor(recoveryInfo.percentage),\n                    recoveryClass: this.getRecoveryClass(recoveryInfo.percentage),\n                    lastWorkout,\n                    recoveryFactors: recoveryInfo.factors\n                };\n            });\n\n            return recoveryData;\n        } catch (error) {\n            console.error('筋肉回復データの取得に失敗:', error);\n            // フォールバック: 基本的な回復データを返す\n            return MUSCLE_GROUPS.map((muscle) => ({\n                ...muscle,\n                lastTrained: 'なし',\n                recovery: 100,\n                recoveryStatus: 'fully_recovered',\n                hoursUntilRecovery: 0,\n                nextRecommended: '今すぐ',\n                isReady: true,\n                recoveryColor: this.getRecoveryColor(100),\n                recoveryClass: this.getRecoveryClass(100),\n                lastWorkout: null,\n                recoveryFactors: null\n            }));\n        }\n    }\n\n    /**\n   * 特定筋肉部位の最新ワークアウトを検索\n   * @param {Array} workoutHistory - ワークアウト履歴\n   * @param {string} muscleId - 筋肉部位ID\n   * @returns {Object|null} 最新ワークアウト\n   */\n    findLastWorkoutForMuscle(workoutHistory, muscleId) {\n    // ワークアウト履歴が配列でない場合はnullを返す\n        if (!Array.isArray(workoutHistory)) {\n            return null;\n        }\n\n        // ワークアウト履歴を日付順にソート（新しい順）\n        const sortedHistory = workoutHistory\n            .filter((workout) => {\n                // 筋肉部位のチェック（複数のフィールドに対応）\n                const muscleGroups =\n          workout.muscle_groups_trained || workout.muscleGroups || [];\n                return Array.isArray(muscleGroups) && muscleGroups.includes(muscleId);\n            })\n            .sort((a, b) => {\n                const dateA = new Date(a.date || a.workout_date || a.startTime);\n                const dateB = new Date(b.date || b.workout_date || b.startTime);\n                return dateB - dateA;\n            });\n\n        return sortedHistory.length > 0\n            ? {\n                ...sortedHistory[0],\n                date:\n            sortedHistory[0].date ||\n            sortedHistory[0].workout_date ||\n            sortedHistory[0].startTime\n            }\n            : null;\n    }\n\n    /**\n   * 推奨部位を取得\n   * @returns {Promise<Array>} 推奨事項配列\n   */\n    async getRecommendations() {\n        try {\n            const recoveryData = await this.getMuscleRecoveryData();\n\n            // 推奨対象の部位を抽出（回復度80%以上）\n            const readyMuscles = recoveryData.filter((muscle) => muscle.isReady);\n\n            // 優先度でソート\n            const prioritizedMuscles = this.prioritizeMuscles(\n                readyMuscles,\n                recoveryData\n            );\n\n            // 推奨メッセージを生成\n            const recommendations = this.generateRecommendationMessages(\n                prioritizedMuscles,\n                recoveryData\n            );\n\n            return recommendations;\n        } catch (error) {\n            console.error('推奨事項の取得に失敗:', error);\n            return this.getFallbackRecommendations();\n        }\n    }\n\n    /**\n   * 筋肉部位の優先度付け\n   * @param {Array} readyMuscles - 回復済み筋肉部位\n   * @param {Array} allMuscles - 全筋肉部位データ\n   * @returns {Array} 優先度付きリスト\n   */\n    prioritizeMuscles(readyMuscles) {\n        return readyMuscles\n            .map((muscle) => {\n                let priority = 0;\n\n                // 回復度による優先度（100%回復は高優先度）\n                priority += muscle.recovery;\n\n                // 最後のトレーニングからの経過時間による優先度\n                if (muscle.lastWorkout) {\n                    const daysSinceLastWorkout = this.getDaysSinceLastWorkout(\n                        muscle.lastWorkout.date\n                    );\n                    priority += Math.min(daysSinceLastWorkout * 10, 50); // 最大50ポイント\n                } else {\n                    priority += 100; // 未トレーニング部位は最高優先度\n                }\n\n                // 大筋群は優先度を上げる\n                if (muscle.category === 'large') {\n                    priority += 20;\n                }\n\n                return {\n                    ...muscle,\n                    priority: Math.round(priority)\n                };\n            })\n            .sort((a, b) => b.priority - a.priority);\n    }\n\n    /**\n   * 推奨メッセージを生成\n   * @param {Array} prioritizedMuscles - 優先度付き筋肉部位\n   * @param {Array} allMuscles - 全筋肉部位データ\n   * @returns {Array} 推奨メッセージ配列\n   */\n    generateRecommendationMessages(prioritizedMuscles) {\n        const recommendations = [];\n\n        if (prioritizedMuscles.length === 0) {\n            recommendations.push({\n                message: '全ての部位が回復中です。休息日をお勧めします',\n                bgColor: 'bg-gray-50',\n                dotColor: 'bg-gray-500',\n                textColor: 'text-gray-700',\n                type: 'rest',\n                scientificBasis: '筋肉の成長には適切な休息が必要です'\n            });\n            return recommendations;\n        }\n\n        // トップ推奨部位\n        const topMuscle = prioritizedMuscles[0];\n        recommendations.push({\n            message: `今日は${topMuscle.name}のトレーニングが最適です`,\n            bgColor: topMuscle.bgColor,\n            dotColor: topMuscle.iconColor.replace('text-', 'bg-'),\n            textColor: topMuscle.textColor,\n            type: 'primary',\n            muscleId: topMuscle.id,\n            scientificBasis: topMuscle.scientificBasis,\n            priority: topMuscle.priority,\n            recoveryPercentage: topMuscle.recovery\n        });\n\n        // 回復度情報\n        if (topMuscle.recovery === 100) {\n            recommendations.push({\n                message: `${topMuscle.name}は完全回復済み（${topMuscle.recovery}%）`,\n                bgColor: 'bg-green-50',\n                dotColor: 'bg-green-500',\n                textColor: 'text-green-700',\n                type: 'recovery_status',\n                scientificBasis: '完全回復により最大のトレーニング効果が期待できます'\n            });\n        } else if (topMuscle.recovery >= 80) {\n            recommendations.push({\n                message: `${topMuscle.name}は十分回復済み（${topMuscle.recovery}%）`,\n                bgColor: 'bg-blue-50',\n                dotColor: 'bg-blue-500',\n                textColor: 'text-blue-700',\n                type: 'recovery_status',\n                scientificBasis: '80%以上の回復で効果的なトレーニングが可能です'\n            });\n        }\n\n        // セカンダリ推奨（複数部位トレーニングの提案）\n        if (prioritizedMuscles.length > 1) {\n            const secondaryMuscle = prioritizedMuscles[1];\n            recommendations.push({\n                message: `${secondaryMuscle.name}も併せてトレーニング可能です`,\n                bgColor: 'bg-purple-50',\n                dotColor: 'bg-purple-500',\n                textColor: 'text-purple-700',\n                type: 'secondary',\n                muscleId: secondaryMuscle.id,\n                scientificBasis: '複数部位の同時トレーニングで効率性向上'\n            });\n        }\n\n        // 体力レベルに応じたアドバイス\n        const fitnessAdvice = this.getFitnessLevelAdvice();\n        if (fitnessAdvice) {\n            recommendations.push(fitnessAdvice);\n        }\n\n        // 目標に基づくアドバイス\n        const goalAdvice = this.getGoalBasedAdvice();\n        if (goalAdvice) {\n            recommendations.push(goalAdvice);\n        }\n\n        // 頻度に基づくアドバイス\n        const frequencyAdvice = this.getFrequencyAdvice();\n        if (frequencyAdvice) {\n            recommendations.push(frequencyAdvice);\n        }\n\n        return recommendations;\n    }\n\n    /**\n   * 体力レベルに応じたアドバイスを取得\n   * @returns {Object|null} アドバイス\n   */\n    getFitnessLevelAdvice() {\n        const level = this.userSettings.fitnessLevel;\n\n        const adviceMap = {\n            beginner: {\n                message: '初心者の方は週2-3回のトレーニングから始めましょう',\n                bgColor: 'bg-yellow-50',\n                dotColor: 'bg-yellow-500',\n                textColor: 'text-yellow-700',\n                type: 'fitness_advice',\n                scientificBasis: '初心者は神経系の適応と基礎体力向上が優先されます'\n            },\n            intermediate: {\n                message: '中級者は週3-4回のバランス良いトレーニングが効果的です',\n                bgColor: 'bg-indigo-50',\n                dotColor: 'bg-indigo-500',\n                textColor: 'text-indigo-700',\n                type: 'fitness_advice',\n                scientificBasis: '中級者は筋肥大と筋力向上のバランスが重要です'\n            },\n            advanced: {\n                message:\n          '上級者は高強度トレーニングと適切な回復のバランスを重視しましょう',\n                bgColor: 'bg-red-50',\n                dotColor: 'bg-red-500',\n                textColor: 'text-red-700',\n                type: 'fitness_advice',\n                scientificBasis: '上級者は高強度刺激と十分な回復時間が成長の鍵です'\n            }\n        };\n\n        return adviceMap[level] || null;\n    }\n\n    /**\n   * 目標に基づくアドバイスを取得\n   * @returns {Object|null} アドバイス\n   */\n    getGoalBasedAdvice() {\n        const goal = this.userSettings.primaryGoal;\n        const recommendedIntensity = this.getRecommendedIntensity();\n\n        const adviceMap = {\n            strength: {\n                message: `筋力向上が目標です。${recommendedIntensity === 'high' ? '高強度' : '中強度'}トレーニングを心がけましょう`,\n                bgColor: 'bg-red-50',\n                dotColor: 'bg-red-500',\n                textColor: 'text-red-700',\n                type: 'goal_advice',\n                scientificBasis: '筋力向上には高負荷・低回数のトレーニングが効果的です'\n            },\n            muscle_gain: {\n                message: '筋肥大が目標です。中強度で適切なボリュームを確保しましょう',\n                bgColor: 'bg-blue-50',\n                dotColor: 'bg-blue-500',\n                textColor: 'text-blue-700',\n                type: 'goal_advice',\n                scientificBasis: '筋肥大には中負荷・中回数でのボリューム確保が重要です'\n            },\n            endurance: {\n                message: '持久力向上が目標です。低強度・高回数を意識しましょう',\n                bgColor: 'bg-green-50',\n                dotColor: 'bg-green-500',\n                textColor: 'text-green-700',\n                type: 'goal_advice',\n                scientificBasis:\n          '筋持久力向上には低負荷・高回数のトレーニングが適しています'\n            },\n            weight_loss: {\n                message:\n          '減量が目標です。中強度で代謝を高めるトレーニングを行いましょう',\n                bgColor: 'bg-orange-50',\n                dotColor: 'bg-orange-500',\n                textColor: 'text-orange-700',\n                type: 'goal_advice',\n                scientificBasis: '減量には筋トレと有酸素運動の組み合わせが効果的です'\n            },\n            general_fitness: {\n                message: '健康維持が目標です。無理のない範囲で継続しましょう',\n                bgColor: 'bg-teal-50',\n                dotColor: 'bg-teal-500',\n                textColor: 'text-teal-700',\n                type: 'goal_advice',\n                scientificBasis: '健康維持には継続性が最も重要な要素です'\n            }\n        };\n\n        return adviceMap[goal] || null;\n    }\n\n    /**\n   * 頻度に基づくアドバイスを取得\n   * @returns {Object|null} アドバイス\n   */\n    getFrequencyAdvice() {\n        const currentFrequency = this.userSettings.workoutFrequency;\n        const recommendedFrequency = this.getRecommendedFrequency();\n\n        if (currentFrequency < recommendedFrequency) {\n            return {\n                message: `現在の頻度（週${currentFrequency}回）より、週${recommendedFrequency}回がおすすめです`,\n                bgColor: 'bg-amber-50',\n                dotColor: 'bg-amber-500',\n                textColor: 'text-amber-700',\n                type: 'frequency_advice',\n                scientificBasis: '適切な頻度でのトレーニングが効果を最大化します'\n            };\n        } else if (currentFrequency > recommendedFrequency + 1) {\n            return {\n                message: `現在の頻度（週${currentFrequency}回）は高めです。回復に注意しましょう`,\n                bgColor: 'bg-rose-50',\n                dotColor: 'bg-rose-500',\n                textColor: 'text-rose-700',\n                type: 'frequency_advice',\n                scientificBasis: '過度な頻度はオーバートレーニングのリスクがあります'\n            };\n        }\n\n        return null;\n    }\n\n    /**\n   * フォールバック推奨事項\n   * @returns {Array} デフォルト推奨事項\n   */\n    getFallbackRecommendations() {\n        return [\n            {\n                message: '今日は胸筋のトレーニングがおすすめです',\n                bgColor: 'bg-blue-50',\n                dotColor: 'bg-blue-500',\n                textColor: 'text-blue-700',\n                type: 'fallback',\n                scientificBasis: '大筋群から始めることで全身の成長を促進できます'\n            }\n        ];\n    }\n\n    /**\n   * 最後のトレーニング日をフォーマット\n   * @param {string|Date} date - 日付\n   * @returns {string} フォーマット済み文字列\n   */\n    formatLastTrainedDate(date) {\n        if (!date) {\n            return 'なし';\n        }\n\n        const workoutDate = new Date(date);\n        const now = new Date();\n        const diffTime = now - workoutDate;\n        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n\n        if (diffDays === 0) {\n            return '今日';\n        }\n        if (diffDays === 1) {\n            return '昨日';\n        }\n        if (diffDays < 7) {\n            return `${diffDays}日前`;\n        }\n        if (diffDays < 30) {\n            return `${Math.floor(diffDays / 7)}週間前`;\n        }\n        return `${Math.floor(diffDays / 30)}ヶ月前`;\n    }\n\n    /**\n   * 次回推奨時間をフォーマット\n   * @param {number} hoursUntilRecovery - 回復までの時間\n   * @returns {string} フォーマット済み文字列\n   */\n    formatNextRecommendedTime(hoursUntilRecovery) {\n        if (hoursUntilRecovery <= 0) {\n            return '今すぐ';\n        }\n        if (hoursUntilRecovery < 24) {\n            return `${Math.round(hoursUntilRecovery)}時間後`;\n        }\n\n        const days = Math.floor(hoursUntilRecovery / 24);\n        const hours = Math.round(hoursUntilRecovery % 24);\n\n        if (hours === 0) {\n            return `${days}日後`;\n        }\n        return `${days}日${hours}時間後`;\n    }\n\n    /**\n   * 最後のワークアウトからの経過日数を取得\n   * @param {string|Date} date - 日付\n   * @returns {number} 経過日数\n   */\n    getDaysSinceLastWorkout(date) {\n        if (!date) {\n            return 999;\n        }\n\n        const workoutDate = new Date(date);\n        const now = new Date();\n        const diffTime = now - workoutDate;\n        return Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    }\n\n    /**\n   * 回復度に応じた色を取得\n   * @param {number} percentage - 回復度\n   * @returns {string} CSSクラス\n   */\n    getRecoveryColor(percentage) {\n        if (percentage >= 100) {\n            return 'text-green-600';\n        }\n        if (percentage >= 80) {\n            return 'text-blue-600';\n        }\n        if (percentage >= 50) {\n            return 'text-yellow-600';\n        }\n        return 'text-red-600';\n    }\n\n    /**\n   * 回復度に応じたバークラスを取得\n   * @param {number} percentage - 回復度\n   * @returns {string} CSSクラス\n   */\n    getRecoveryClass(percentage) {\n        if (percentage >= 100) {\n            return 'bg-green-500';\n        }\n        if (percentage >= 80) {\n            return 'bg-blue-500';\n        }\n        if (percentage >= 50) {\n            return 'bg-yellow-500';\n        }\n        return 'bg-red-500';\n    }\n\n    /**\n   * 回復設定による倍率を取得\n   * @returns {number} 回復倍率\n   */\n    getRecoveryMultiplier() {\n        const recoveryMultipliers = {\n            fast: 0.8, // 20%短縮\n            standard: 1.0, // 標準\n            slow: 1.3 // 30%延長\n        };\n\n        return recoveryMultipliers[this.userSettings.recoveryPreference] || 1.0;\n    }\n\n    /**\n   * ライフスタイル要因による倍率を取得\n   * @returns {number} ライフスタイル倍率\n   */\n    getLifestyleMultiplier() {\n        let multiplier = 1.0;\n\n        // 睡眠時間による調整\n        const sleepHours = this.userSettings.sleepHoursPerNight;\n        if (sleepHours < 6) {\n            multiplier *= 1.2; // 睡眠不足は回復を遅らせる\n        } else if (sleepHours >= 8) {\n            multiplier *= 0.9; // 十分な睡眠は回復を促進\n        }\n\n        // ストレスレベルによる調整\n        const stressLevel = this.userSettings.stressLevel;\n        if (stressLevel >= 8) {\n            multiplier *= 1.15; // 高ストレスは回復を遅らせる\n        } else if (stressLevel <= 3) {\n            multiplier *= 0.95; // 低ストレスは回復を促進\n        }\n\n        return multiplier;\n    }\n\n    /**\n   * 目標に基づく推奨強度を取得\n   * @returns {string} 推奨強度\n   */\n    getRecommendedIntensity() {\n        const intensityMap = {\n            strength: 'high', // 筋力向上は高強度\n            muscle_gain: 'moderate', // 筋肥大は中強度\n            endurance: 'low', // 持久力は低強度\n            weight_loss: 'moderate', // 減量は中強度\n            general_fitness: 'low' // 健康維持は低強度\n        };\n\n        return intensityMap[this.userSettings.primaryGoal] || 'moderate';\n    }\n\n    /**\n   * 体力レベルに基づく推奨頻度を取得\n   * @returns {number} 推奨週間頻度\n   */\n    getRecommendedFrequency() {\n        const frequencyMap = {\n            beginner: 2, // 初心者は週2回\n            intermediate: 3, // 中級者は週3回\n            advanced: 4 // 上級者は週4回\n        };\n\n        return frequencyMap[this.userSettings.fitnessLevel] || 3;\n    }\n\n    /**\n   * ユーザー設定を更新\n   * @param {Object} newSettings - 新しい設定\n   */\n    updateUserSettings(newSettings) {\n        this.userSettings = { ...this.userSettings, ...newSettings };\n\n        // 新しい設定形式で保存\n        const userProfile = JSON.parse(localStorage.getItem('userProfile') || '{}');\n        const updatedProfile = {\n            ...userProfile,\n            fitness_level: newSettings.fitnessLevel || this.userSettings.fitnessLevel,\n            primary_goal: newSettings.primaryGoal || this.userSettings.primaryGoal,\n            workout_frequency:\n        newSettings.workoutFrequency || this.userSettings.workoutFrequency,\n            recovery_preference:\n        newSettings.recoveryPreference || this.userSettings.recoveryPreference,\n            sleep_hours_per_night:\n        newSettings.sleepHoursPerNight || this.userSettings.sleepHoursPerNight,\n            stress_level: newSettings.stressLevel || this.userSettings.stressLevel\n        };\n\n        localStorage.setItem('userProfile', JSON.stringify(updatedProfile));\n\n        // 互換性のため旧形式も保存\n        localStorage.setItem(\n            'userFitnessSettings',\n            JSON.stringify(this.userSettings)\n        );\n    }\n\n    /**\n   * 推奨理由の詳細を取得\n   * @param {string} muscleId - 筋肉部位ID\n   * @returns {Object} 詳細情報\n   */\n    getRecommendationDetails(muscleId) {\n        const muscle = MUSCLE_GROUPS.find((mg) => mg.id === muscleId);\n        if (!muscle) {\n            return null;\n        }\n\n        const recoveryScience = RECOVERY_SCIENCE[muscle.category];\n\n        return {\n            muscleName: muscle.name,\n            category: muscle.category,\n            recoveryHours: muscle.recoveryHours,\n            scientificBasis: muscle.scientificBasis,\n            recoveryScience: recoveryScience.reason,\n            fitnessLevelAdjustment:\n        FITNESS_LEVEL_MULTIPLIERS[this.userSettings.fitnessLevel],\n            userFitnessLevel: this.userSettings.fitnessLevel\n        };\n    }\n}\n\n// シングルトンインスタンスをエクスポート\nexport default new RecommendationService();\n"],"mappings":"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","ignoreList":[]}