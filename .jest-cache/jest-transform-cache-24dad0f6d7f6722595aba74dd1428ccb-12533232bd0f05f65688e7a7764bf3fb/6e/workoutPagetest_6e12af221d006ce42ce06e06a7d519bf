aa73d6ef95f45e5d92b96e75dd4ec66b
"use strict";

// モックの設定
_getJestObj().mock('../../js/core/BasePage.js', function () {
  return {
    BasePage: jest.fn().mockImplementation(function () {
      return {
        constructor: jest.fn(),
        checkAuthentication: jest.fn(),
        initialize: jest.fn(),
        onInitialize: jest.fn()
      };
    })
  };
});
_getJestObj().mock('../../js/components/Navigation.js', function () {
  return {
    Navigation: jest.fn().mockImplementation(function () {
      return {
        initialize: jest.fn()
      };
    })
  };
});
_getJestObj().mock('../../js/services/supabaseService.js', function () {
  return {
    supabaseService: {
      getExercises: jest.fn(),
      getMuscleGroups: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/services/workoutDataService.js', function () {
  return {
    workoutDataService: {
      saveWorkout: jest.fn(),
      loadWorkouts: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/modules/authManager.js', function () {
  return {
    authManager: {
      showAuthModal: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    showNotification: jest.fn(),
    safeGetElement: jest.fn()
  };
});
_getJestObj().mock('../../js/utils/TooltipManager.js', function () {
  return {
    tooltipManager: {
      initialize: jest.fn()
    }
  };
});
var _workoutPage = require("../../js/pages/workoutPage.js");
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
} // workoutPage.test.js - WorkoutPageクラスのテスト
describe('WorkoutPage', function () {
  var workoutPageInstance;
  var mockNavigation;
  var mockSupabaseService;
  var mockWorkoutDataService;
  var mockAuthManager;
  var mockHelpers;
  var mockTooltipManager;
  beforeEach(function () {
    // モックをリセット
    jest.clearAllMocks();

    // モジュールの取得
    var navigationModule = require('../../js/components/Navigation.js');
    var supabaseServiceModule = require('../../js/services/supabaseService.js');
    var workoutDataServiceModule = require('../../js/services/workoutDataService.js');
    var authManagerModule = require('../../js/modules/authManager.js');
    var helpersModule = require('../../js/utils/helpers.js');
    var tooltipManagerModule = require('../../js/utils/TooltipManager.js');
    mockNavigation = navigationModule.Navigation;
    mockSupabaseService = supabaseServiceModule.supabaseService;
    mockWorkoutDataService = workoutDataServiceModule.workoutDataService;
    mockAuthManager = authManagerModule.authManager;
    mockHelpers = helpersModule;
    mockTooltipManager = tooltipManagerModule.tooltipManager;

    // DOM要素のモック
    mockHelpers.safeGetElement.mockImplementation(function (id) {
      var mockElement = {
        innerHTML: '',
        addEventListener: jest.fn(),
        value: '',
        dataset: {},
        classList: {
          add: jest.fn(),
          remove: jest.fn(),
          contains: jest.fn()
        },
        style: {},
        disabled: false,
        checked: false
      };
      return mockElement;
    });

    // DOM要素のクエリセレクタをモック
    global.document.querySelectorAll = jest.fn().mockReturnValue([]);
    global.document.getElementById = jest.fn().mockReturnValue(null);

    // WorkoutPageのインスタンス作成
    workoutPageInstance = new _workoutPage.WorkoutPage();
  });
  describe('constructor', function () {
    test('should initialize with default values', function () {
      expect(workoutPageInstance.currentWorkout).toBeNull();
      expect(workoutPageInstance.workoutTimer).toBeNull();
      expect(workoutPageInstance.workoutStartTime).toBeNull();
      expect(workoutPageInstance.exercises).toEqual([]);
      expect(workoutPageInstance.muscleGroups).toEqual(['胸', '背中', '肩', '腕', '脚', '腹筋']);
      expect(workoutPageInstance.selectedMuscles).toEqual([]);
      expect(workoutPageInstance.selectedExercises).toEqual([]);
      expect(workoutPageInstance.eventListenersSetup).toBe(false);
      expect(workoutPageInstance.muscleGroupCache).toBeInstanceOf(Map);
      expect(workoutPageInstance.currentExercise).toBeNull();
      expect(workoutPageInstance.currentSet).toBe(0);
      expect(workoutPageInstance.setData).toEqual([]);
      expect(workoutPageInstance.restTimer).toBeNull();
      expect(workoutPageInstance.restStartTime).toBeNull();
    });
  });
  describe('checkAuthentication', function () {
    test('should skip authentication check', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var result;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            _context.n = 1;
            return workoutPageInstance.checkAuthentication();
          case 1:
            result = _context.v;
            expect(result).toBe(true);
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
  });
  describe('getWorkoutDuration', function () {
    test('should calculate workout duration', function () {
      var startTime = new Date();
      startTime.setMinutes(startTime.getMinutes() - 30);
      workoutPageInstance.workoutStartTime = startTime;
      var duration = workoutPageInstance.getWorkoutDuration();
      expect(duration).toBeGreaterThan(0);
    });
    test('should return 0 when no start time', function () {
      workoutPageInstance.workoutStartTime = null;
      var duration = workoutPageInstance.getWorkoutDuration();
      expect(duration).toBe(0);
    });
  });
  describe('getFilteredExercises', function () {
    test('should filter exercises by muscle group', function () {
      workoutPageInstance.exercises = [{
        name: 'ベンチプレス',
        muscle_group: 'chest'
      }, {
        name: 'スクワット',
        muscle_group: 'legs'
      }, {
        name: 'デッドリフト',
        muscle_group: 'back'
      }];
      var chestExercises = workoutPageInstance.getFilteredExercises('chest');
      var legExercises = workoutPageInstance.getFilteredExercises('legs');
      expect(chestExercises).toHaveLength(1);
      expect(chestExercises[0].name).toBe('ベンチプレス');
      expect(legExercises).toHaveLength(1);
      expect(legExercises[0].name).toBe('スクワット');
    });
    test('should return all exercises when no muscle group specified', function () {
      workoutPageInstance.exercises = [{
        name: 'ベンチプレス',
        muscle_group: 'chest'
      }, {
        name: 'スクワット',
        muscle_group: 'legs'
      }];
      var allExercises = workoutPageInstance.getFilteredExercises();
      expect(allExercises).toHaveLength(2);
    });
  });
  describe('addSet', function () {
    test('should add set data', function () {
      workoutPageInstance.currentExercise = 'ベンチプレス';
      workoutPageInstance.currentSet = 1;
      workoutPageInstance.addSet(10, 80);
      expect(workoutPageInstance.setData).toHaveLength(1);
      expect(workoutPageInstance.setData[0]).toEqual({
        exercise: 'ベンチプレス',
        sets: 1,
        reps: 10,
        weight: 80
      });
      expect(workoutPageInstance.currentSet).toBe(2);
    });
  });
  describe('toggleMuscleSelection', function () {
    test('should add muscle to selection', function () {
      var mockButton = {
        classList: {
          add: jest.fn(),
          remove: jest.fn()
        },
        dataset: {
          muscle: 'chest'
        }
      };
      workoutPageInstance.selectedMuscles = [];
      workoutPageInstance.toggleMuscleSelection(mockButton);
      expect(workoutPageInstance.selectedMuscles).toContain('chest');
      expect(mockButton.classList.add).toHaveBeenCalledWith('bg-blue-500', 'text-white');
    });
    test('should remove muscle from selection', function () {
      var mockButton = {
        classList: {
          add: jest.fn(),
          remove: jest.fn()
        },
        dataset: {
          muscle: 'chest'
        }
      };
      workoutPageInstance.selectedMuscles = ['chest'];
      workoutPageInstance.toggleMuscleSelection(mockButton);
      expect(workoutPageInstance.selectedMuscles).not.toContain('chest');
      expect(mockButton.classList.remove).toHaveBeenCalledWith('bg-blue-500', 'text-white');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,