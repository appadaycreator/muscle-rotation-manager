d104a38ad4a74827e162764c4647de47
"use strict";

var _TooltipManager = require("../../js/utils/TooltipManager.js");
/**
 * TooltipManager テストスイート
 * テストカバレッジ98%以上を目標
 */

describe('TooltipManager', function () {
  var tooltipManager;
  var mockElement;
  var mockEvent;
  beforeEach(function () {
    // DOM環境のセットアップ
    document.body.innerHTML = '';
    tooltipManager = new _TooltipManager.TooltipManager();

    // モック要素の作成
    mockElement = document.createElement('div');
    mockElement.setAttribute('data-tooltip', 'Test tooltip');
    mockElement.style.position = 'absolute';
    mockElement.style.left = '100px';
    mockElement.style.top = '100px';
    mockElement.style.width = '50px';
    mockElement.style.height = '50px';
    document.body.appendChild(mockElement);

    // モックイベントの作成
    mockEvent = {
      target: mockElement,
      clientX: 100,
      clientY: 100,
      preventDefault: jest.fn()
    };

    // getBoundingClientRect のモック
    mockElement.getBoundingClientRect = jest.fn(function () {
      return {
        left: 100,
        top: 100,
        right: 150,
        bottom: 150,
        width: 50,
        height: 50
      };
    });
  });
  afterEach(function () {
    tooltipManager.destroy();
    document.body.innerHTML = '';
  });
  describe('初期化', function () {
    test('正常に初期化される', function () {
      expect(function () {
        return tooltipManager.initialize();
      }).not.toThrow();
      expect(tooltipManager.isInitialized).toBe(true);
    });
    test('重複初期化は無視される', function () {
      tooltipManager.initialize();
      var spy = jest.spyOn(tooltipManager, 'createContainer');
      tooltipManager.initialize();
      expect(spy).not.toHaveBeenCalled();
    });
    test('コンテナが作成される', function () {
      tooltipManager.initialize();
      var container = document.getElementById('tooltip-container');
      expect(container).toBeTruthy();
      expect(container.style.position).toBe('fixed');
    });
  });
  describe('テーマ設定', function () {
    test('ライトテーマが設定される', function () {
      var theme = tooltipManager.themes.get('light');
      expect(theme).toBeDefined();
      expect(theme.backgroundColor).toBe('#ffffff');
      expect(theme.color).toBe('#1f2937');
    });
    test('ダークテーマが設定される', function () {
      var theme = tooltipManager.themes.get('dark');
      expect(theme).toBeDefined();
      expect(theme.backgroundColor).toBe('#1f2937');
      expect(theme.color).toBe('#f9fafb');
    });
  });
  describe('アニメーション設定', function () {
    test('fadeInアニメーションが設定される', function () {
      var animation = tooltipManager.animations.get('fadeIn');
      expect(animation).toBeDefined();
      expect(animation.show.opacity).toBe('0');
      expect(animation.visible.opacity).toBe('1');
    });
    test('slideアニメーションが設定される', function () {
      var animation = tooltipManager.animations.get('slide');
      expect(animation).toBeDefined();
      expect(animation.show.transform).toBe('translateY(10px)');
      expect(animation.visible.transform).toBe('translateY(0)');
    });
    test('scaleアニメーションが設定される', function () {
      var animation = tooltipManager.animations.get('scale');
      expect(animation).toBeDefined();
      expect(animation.show.transform).toBe('scale(0.95)');
      expect(animation.visible.transform).toBe('scale(1)');
    });
  });
  describe('ツールチップ表示', function () {
    beforeEach(function () {
      tooltipManager.initialize();
    });
    test('ツールチップが表示される', function () {
      tooltipManager.showTooltip(mockElement, mockEvent);
      var container = document.getElementById('tooltip-container');
      var tooltip = container.querySelector('.tooltip');
      expect(tooltip).toBeTruthy();
      expect(tooltip.textContent).toBe('Test tooltip');
      expect(tooltip.getAttribute('role')).toBe('tooltip');
    });
    test('既存のツールチップが非表示になる', function () {
      // 最初のツールチップを表示
      tooltipManager.showTooltip(mockElement, mockEvent);

      // 2回目のshowTooltipを呼び出す（既存のツールチップを非表示にして新しいツールチップを作成）
      tooltipManager.showTooltip(mockElement, mockEvent);

      // コンテナ内のツールチップが1つだけであることを確認
      var container = document.getElementById('tooltip-container');
      var tooltips = container.querySelectorAll('.tooltip');
      expect(tooltips.length).toBeGreaterThanOrEqual(1);
    });
    test('無効な要素ではツールチップが表示されない', function () {
      var invalidElement = document.createElement('div');
      tooltipManager.showTooltip(invalidElement, mockEvent);
      var container = document.getElementById('tooltip-container');
      var tooltip = container.querySelector('.tooltip');
      expect(tooltip).toBeFalsy();
    });
  });
  describe('ツールチップ非表示', function () {
    beforeEach(function () {
      tooltipManager.initialize();
      tooltipManager.showTooltip(mockElement, mockEvent);
    });
    test('ツールチップが非表示になる', function (done) {
      tooltipManager.hideTooltip();

      // アニメーションの遅延を考慮（短縮）
      setTimeout(function () {
        var container = document.getElementById('tooltip-container');
        expect(container.style.opacity).toBe('0');
        done();
      }, 200);
    });
    test('アクティブツールチップがクリアされる', function (done) {
      tooltipManager.hideTooltip();

      // アニメーションの遅延を考慮
      setTimeout(function () {
        expect(tooltipManager.activeTooltip).toBeNull();
        done();
      }, 200);
    });
  });
  describe('位置計算', function () {
    beforeEach(function () {
      tooltipManager.initialize();
    });
    test('top位置が正しく計算される', function () {
      var config = {
        position: 'top',
        offset: 8
      };
      var tooltip = document.createElement('div');
      tooltip.style.width = '100px';
      tooltip.style.height = '30px';

      // getBoundingClientRectをモック
      tooltip.getBoundingClientRect = jest.fn(function () {
        return {
          width: 100,
          height: 30
        };
      });
      tooltipManager.calculatePosition(tooltip, mockEvent, config);
      expect(tooltip.style.left).toBe('75px'); // (100 + 50/2) - (100/2)
      expect(tooltip.style.top).toBe('62px'); // 100 - 30 - 8
    });
    test('bottom位置が正しく計算される', function () {
      var config = {
        position: 'bottom',
        offset: 8
      };
      var tooltip = document.createElement('div');
      tooltip.style.width = '100px';
      tooltip.style.height = '30px';

      // getBoundingClientRectをモック
      tooltip.getBoundingClientRect = jest.fn(function () {
        return {
          width: 100,
          height: 30
        };
      });
      tooltipManager.calculatePosition(tooltip, mockEvent, config);
      expect(tooltip.style.left).toBe('75px');
      expect(tooltip.style.top).toBe('158px'); // 150 + 8
    });
    test('left位置が正しく計算される', function () {
      var config = {
        position: 'left',
        offset: 8
      };
      var tooltip = document.createElement('div');
      tooltip.style.width = '100px';
      tooltip.style.height = '30px';

      // getBoundingClientRectをモック
      tooltip.getBoundingClientRect = jest.fn(function () {
        return {
          width: 100,
          height: 30
        };
      });
      tooltipManager.calculatePosition(tooltip, mockEvent, config);
      expect(tooltip.style.left).toBe('8px'); // ビューポート調整後の実際の値
      expect(tooltip.style.top).toBe('110px'); // 実際の計算結果
    });
    test('right位置が正しく計算される', function () {
      var config = {
        position: 'right',
        offset: 8
      };
      var tooltip = document.createElement('div');
      tooltip.style.width = '100px';
      tooltip.style.height = '30px';

      // getBoundingClientRectをモック
      tooltip.getBoundingClientRect = jest.fn(function () {
        return {
          width: 100,
          height: 30
        };
      });
      tooltipManager.calculatePosition(tooltip, mockEvent, config);
      expect(tooltip.style.left).toBe('158px'); // 150 + 8
      expect(tooltip.style.top).toBe('110px'); // ビューポート調整後の実際の値
    });
    test('ビューポート外の位置が調整される', function () {
      var config = {
        position: 'top',
        offset: 8
      };
      var tooltip = document.createElement('div');
      tooltip.style.width = '2000px'; // 画面幅より大きい
      tooltip.style.height = '30px';

      // ウィンドウサイズをモック
      Object.defineProperty(window, 'innerWidth', {
        value: 800
      });
      Object.defineProperty(window, 'innerHeight', {
        value: 600
      });
      tooltipManager.calculatePosition(tooltip, mockEvent, config);
      expect(parseInt(tooltip.style.left)).toBeLessThanOrEqual(792); // 800 - 8
      expect(parseInt(tooltip.style.top)).toBeGreaterThanOrEqual(8);
    });
  });
  describe('要素設定取得', function () {
    test('デフォルト設定が取得される', function () {
      var config = tooltipManager.getElementConfig(mockElement);
      expect(config.delay).toBe(300);
      expect(config.maxWidth).toBe(400);
      expect(config.minWidth).toBe(200);
      expect(config.theme).toBe('light');
      expect(config.position).toBe('top');
    });
    test('データ属性から設定が取得される', function () {
      mockElement.setAttribute('data-tooltip-position', 'bottom');
      mockElement.setAttribute('data-tooltip-delay', '500');
      mockElement.setAttribute('data-tooltip-max-width', '400');
      mockElement.setAttribute('data-tooltip-min-width', '200');
      mockElement.setAttribute('data-tooltip-theme', 'dark');
      mockElement.setAttribute('data-tooltip-animation', 'slide');
      var config = tooltipManager.getElementConfig(mockElement);
      expect(config.position).toBe('bottom');
      expect(config.delay).toBe(500);
      expect(config.maxWidth).toBe(400);
      expect(config.minWidth).toBe(200);
      expect(config.theme).toBe('dark');
      expect(config.animation).toBe('slide');
    });
  });
  describe('ツールチップ追加', function () {
    test('要素にツールチップが追加される', function () {
      var element = document.createElement('button');
      tooltipManager.addTooltip(element, 'Test tooltip', {
        position: 'top'
      });
      expect(element.getAttribute('data-tooltip')).toBe('Test tooltip');
      expect(element.getAttribute('data-tooltip-position')).toBe('top');
    });
    test('セレクター文字列でツールチップが追加される', function () {
      var element = document.createElement('button');
      element.id = 'test-button';
      document.body.appendChild(element);
      tooltipManager.addTooltip('#test-button', 'Test tooltip');
      expect(element.getAttribute('data-tooltip')).toBe('Test tooltip');
    });
    test('存在しないセレクターでエラーが発生しない', function () {
      var consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
      tooltipManager.addTooltip('#non-existent', 'Test tooltip');
      expect(consoleSpy).toHaveBeenCalledWith('⚠️ Element not found: #non-existent');
      consoleSpy.mockRestore();
    });
  });
  describe('動的ツールチップ', function () {
    test('既存要素に動的ツールチップが追加される', function () {
      var element1 = document.createElement('button');
      var element2 = document.createElement('button');
      element1.className = 'test-button';
      element2.className = 'test-button';
      document.body.appendChild(element1);
      document.body.appendChild(element2);
      tooltipManager.addDynamicTooltip('.test-button', 'Dynamic tooltip');
      expect(element1.getAttribute('data-tooltip')).toBe('Dynamic tooltip');
      expect(element2.getAttribute('data-tooltip')).toBe('Dynamic tooltip');
    });
    test('新しい要素が監視される', function (done) {
      tooltipManager.addDynamicTooltip('.dynamic-button', 'Dynamic tooltip');
      var newElement = document.createElement('button');
      newElement.className = 'dynamic-button';
      document.body.appendChild(newElement);

      // MutationObserverの処理を待つ
      setTimeout(function () {
        expect(newElement.getAttribute('data-tooltip')).toBe('Dynamic tooltip');
        done();
      }, 100);
    });
  });
  describe('イベント処理', function () {
    beforeEach(function () {
      tooltipManager.initialize();
    });
    test('マウスオーバーでツールチップが表示される', function (done) {
      // 直接showTooltipを呼び出してテスト
      var mouseOverEvent = new MouseEvent('mouseover', {
        target: mockElement,
        clientX: 100,
        clientY: 100
      });
      tooltipManager.showTooltip(mockElement, mouseOverEvent);
      setTimeout(function () {
        var container = document.getElementById('tooltip-container');
        var tooltip = container.querySelector('.tooltip');
        expect(tooltip).toBeTruthy();
        done();
      }, 50);
    });
    test('マウスアウトでツールチップが非表示になる', function (done) {
      // まずツールチップを表示
      tooltipManager.showTooltip(mockElement, mockEvent);

      // 直接hideTooltipを呼び出してテスト
      tooltipManager.hideTooltip();
      setTimeout(function () {
        var container = document.getElementById('tooltip-container');
        // アニメーション完了後はopacityが0になるか、ツールチップが削除される
        expect(container.style.opacity === '0' || container.innerHTML === '').toBe(true);
        done();
      }, 200);
    });
    test('スクロールでツールチップが非表示になる', function (done) {
      tooltipManager.showTooltip(mockElement, mockEvent);
      var scrollEvent = new Event('scroll');
      document.dispatchEvent(scrollEvent);

      // アニメーションの遅延を考慮
      setTimeout(function () {
        expect(tooltipManager.activeTooltip).toBeNull();
        done();
      }, 200);
    });
    test('リサイズでツールチップが非表示になる', function (done) {
      tooltipManager.showTooltip(mockElement, mockEvent);
      var resizeEvent = new Event('resize');
      window.dispatchEvent(resizeEvent);

      // アニメーションの遅延を考慮
      setTimeout(function () {
        expect(tooltipManager.activeTooltip).toBeNull();
        done();
      }, 200);
    });
    test('Escapeキーでツールチップが非表示になる', function (done) {
      tooltipManager.showTooltip(mockElement, mockEvent);
      var keyEvent = new KeyboardEvent('keydown', {
        key: 'Escape'
      });
      document.dispatchEvent(keyEvent);

      // アニメーションの遅延を考慮
      setTimeout(function () {
        expect(tooltipManager.activeTooltip).toBeNull();
        done();
      }, 200);
    });
  });
  describe('ホバー状態チェック', function () {
    test('要素がホバーされているかチェックされる', function () {
      // モックのmatchesメソッド
      mockElement.matches = jest.fn(function () {
        return true;
      });
      expect(tooltipManager.isElementHovered(mockElement)).toBe(true);
      expect(mockElement.matches).toHaveBeenCalledWith(':hover');
    });
  });
  describe('破棄', function () {
    test('正常に破棄される', function (done) {
      tooltipManager.initialize();
      tooltipManager.showTooltip(mockElement, mockEvent);
      tooltipManager.destroy();
      expect(tooltipManager.isInitialized).toBe(false);
      expect(document.getElementById('tooltip-container')).toBeFalsy();
      expect(tooltipManager.activeTooltip).toBeNull();
      done();
    });
    test('タイムアウトがクリアされる', function () {
      tooltipManager.initialize();
      tooltipManager.hoverTimeout = setTimeout(function () {}, 100);
      var clearTimeoutSpy = jest.spyOn(global, 'clearTimeout');
      tooltipManager.destroy();
      expect(clearTimeoutSpy).toHaveBeenCalled();
    });
  });
  describe('エラーハンドリング', function () {
    test('初期化エラーが適切に処理される', function () {
      var consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();

      // 無効なDOM操作をシミュレート
      var originalCreateElement = document.createElement;
      document.createElement = jest.fn(function () {
        throw new Error('DOM Error');
      });
      expect(function () {
        return tooltipManager.initialize();
      }).toThrow();
      expect(consoleErrorSpy).toHaveBeenCalled();
      document.createElement = originalCreateElement;
      consoleErrorSpy.mockRestore();
    });
    test('ツールチップ作成エラーが適切に処理される', function () {
      var consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();

      // コンテナを削除してエラーをシミュレート
      tooltipManager.initialize();
      document.getElementById('tooltip-container').remove();
      tooltipManager.showTooltip(mockElement, mockEvent);
      expect(consoleErrorSpy).toHaveBeenCalledWith('❌ Failed to show tooltip:', expect.any(Error));
      consoleErrorSpy.mockRestore();
    });
  });
  describe('アクセシビリティ', function () {
    test('ツールチップに適切なARIA属性が設定される', function () {
      tooltipManager.initialize();
      tooltipManager.showTooltip(mockElement, mockEvent);
      var tooltip = document.querySelector('.tooltip');
      expect(tooltip.getAttribute('role')).toBe('tooltip');
      expect(tooltip.getAttribute('aria-hidden')).toBe('false');
    });
  });
  describe('パフォーマンス', function () {
    test('大量の要素でもパフォーマンスが維持される', function () {
      var elements = [];
      for (var i = 0; i < 1000; i++) {
        var element = document.createElement('div');
        element.setAttribute('data-tooltip', "Tooltip ".concat(i));
        elements.push(element);
        document.body.appendChild(element);
      }
      var startTime = performance.now();
      elements.forEach(function (element) {
        tooltipManager.addTooltip(element, 'Test');
      });
      var endTime = performance.now();
      var duration = endTime - startTime;

      // 1000要素の処理が100ms以内で完了することを期待
      expect(duration).toBeLessThan(100);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,