c136f758d99b321b93b3d1af1aa1945d
"use strict";

// モックの設定
_getJestObj().mock('../../js/services/supabaseService.js', function () {
  return {
    supabaseService: {
      isAvailable: jest.fn(),
      loadData: jest.fn(),
      saveData: jest.fn(),
      client: {
        from: jest.fn()
      }
    }
  };
});
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    showNotification: jest.fn()
  };
});
_getJestObj().mock('../../js/utils/errorHandler.js', function () {
  return {
    handleError: jest.fn()
  };
});
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _muscleGroupService = require("../../js/services/muscleGroupService.js");
var _supabaseService = require("../../js/services/supabaseService.js");
var _helpers = require("../../js/utils/helpers.js");
var _errorHandler = require("../../js/utils/errorHandler.js");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
/**
 * MuscleGroupService テストスイート
 */
describe('MuscleGroupService', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('constructor', function () {
    it('should initialize with default values', function () {
      expect(_muscleGroupService.muscleGroupService.muscleGroups).toBeNull();
      expect(_muscleGroupService.muscleGroupService.cache).toBeInstanceOf(Map);
      expect(_muscleGroupService.muscleGroupService.cacheExpiry).toBe(5 * 60 * 1000);
    });
  });
  describe('getMuscleGroups', function () {
    it('should load muscle groups from Supabase when available', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var mockMuscleGroups, result;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            mockMuscleGroups = [{
              id: 'chest',
              name: 'chest',
              name_ja: '胸',
              color_code: '#EF4444',
              description: 'Pectoral muscles including upper, middle, and lower chest',
              recovery_hours: 72,
              muscle_size: 'large',
              icon_name: 'chest',
              display_order: 1,
              is_active: true
            }, {
              id: 'back',
              name: 'back',
              name_ja: '背中',
              color_code: '#10B981',
              description: 'Latissimus dorsi, rhomboids, middle and lower trapezius',
              recovery_hours: 72,
              muscle_size: 'large',
              icon_name: 'back',
              display_order: 2,
              is_active: true
            }];
            _supabaseService.supabaseService.isAvailable.mockReturnValue(true);
            _supabaseService.supabaseService.client = {
              from: jest.fn().mockReturnValue({
                select: jest.fn().mockReturnValue({
                  eq: jest.fn().mockReturnValue({
                    order: jest.fn().mockResolvedValue({
                      data: mockMuscleGroups,
                      error: null
                    })
                  })
                })
              })
            };
            _context.n = 1;
            return _muscleGroupService.muscleGroupService.getMuscleGroups();
          case 1:
            result = _context.v;
            expect(result).toEqual(mockMuscleGroups);
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
    it('should load muscle groups from localStorage when Supabase unavailable', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var mockMuscleGroups, result;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            mockMuscleGroups = [{
              id: 'chest',
              name: 'chest',
              name_ja: '胸',
              color_code: '#EF4444',
              description: 'Pectoral muscles including upper, middle, and lower chest',
              recovery_hours: 72,
              muscle_size: 'large',
              icon_name: 'chest',
              display_order: 1,
              is_active: true
            }];
            _supabaseService.supabaseService.isAvailable.mockReturnValue(false);
            _context2.n = 1;
            return _muscleGroupService.muscleGroupService.getMuscleGroups();
          case 1:
            result = _context2.v;
            // フォールバックデータが返されることを確認
            expect(result).toBeInstanceOf(Array);
            expect(result.length).toBeGreaterThan(0);
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    it('should handle loading errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var result;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            _supabaseService.supabaseService.isAvailable.mockReturnValue(true);
            _supabaseService.supabaseService.client = {
              from: jest.fn().mockReturnValue({
                select: jest.fn().mockReturnValue({
                  eq: jest.fn().mockReturnValue({
                    order: jest.fn().mockRejectedValue(new Error('Database error'))
                  })
                })
              })
            };
            _context3.n = 1;
            return _muscleGroupService.muscleGroupService.getMuscleGroups();
          case 1:
            result = _context3.v;
            // エラー時はフォールバックデータを返す
            expect(result).toBeDefined();
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
  });
  describe('getMuscleGroupById', function () {
    it('should return muscle group by ID', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var mockMuscleGroups, result;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            mockMuscleGroups = [{
              id: 'chest',
              name: 'chest',
              name_ja: '胸',
              color_code: '#EF4444',
              description: 'Pectoral muscles including upper, middle, and lower chest',
              recovery_hours: 72,
              muscle_size: 'large',
              icon_name: 'chest',
              display_order: 1,
              is_active: true
            }, {
              id: 'back',
              name: 'back',
              name_ja: '背中',
              color_code: '#10B981',
              description: 'Latissimus dorsi, rhomboids, middle and lower trapezius',
              recovery_hours: 72,
              muscle_size: 'large',
              icon_name: 'back',
              display_order: 2,
              is_active: true
            }];
            _supabaseService.supabaseService.isAvailable.mockReturnValue(true);
            _supabaseService.supabaseService.client = {
              from: jest.fn().mockReturnValue({
                select: jest.fn().mockReturnValue({
                  eq: jest.fn().mockReturnValue({
                    order: jest.fn().mockResolvedValue({
                      data: mockMuscleGroups,
                      error: null
                    })
                  })
                })
              })
            };
            _context4.n = 1;
            return _muscleGroupService.muscleGroupService.getMuscleGroupById('chest');
          case 1:
            result = _context4.v;
            expect(result).toEqual({
              id: 'chest',
              name: 'chest',
              name_ja: '胸',
              color_code: '#EF4444',
              description: 'Pectoral muscles including upper, middle, and lower chest',
              recovery_hours: 72,
              muscle_size: 'large',
              icon_name: 'chest',
              display_order: 1,
              is_active: true
            });
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    it('should return null for non-existent muscle group', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var mockMuscleGroups, result;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            mockMuscleGroups = [{
              id: 'chest',
              name: 'chest',
              name_ja: '胸',
              color_code: '#EF4444',
              description: 'Pectoral muscles including upper, middle, and lower chest',
              recovery_hours: 72,
              muscle_size: 'large',
              icon_name: 'chest',
              display_order: 1,
              is_active: true
            }];
            _supabaseService.supabaseService.isAvailable.mockReturnValue(true);
            _supabaseService.supabaseService.client = {
              from: jest.fn().mockReturnValue({
                select: jest.fn().mockReturnValue({
                  eq: jest.fn().mockReturnValue({
                    order: jest.fn().mockResolvedValue({
                      data: mockMuscleGroups,
                      error: null
                    })
                  })
                })
              })
            };
            _context5.n = 1;
            return _muscleGroupService.muscleGroupService.getMuscleGroupById('non-existent');
          case 1:
            result = _context5.v;
            expect(result).toBeNull();
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
  describe('addMuscleGroup', function () {
    it('should add muscle group successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var newMuscleGroup, result;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            newMuscleGroup = {
              id: 'shoulders',
              name: '肩',
              color: '#F59E0B'
            };
            _supabaseService.supabaseService.isAvailable.mockReturnValue(true);
            _supabaseService.supabaseService.saveData.mockResolvedValue(_objectSpread({
              id: 'shoulders'
            }, newMuscleGroup));
            _context6.n = 1;
            return _muscleGroupService.muscleGroupService.addMuscleGroup(newMuscleGroup);
          case 1:
            result = _context6.v;
            expect(_supabaseService.supabaseService.saveData).toHaveBeenCalledWith('muscle_groups', newMuscleGroup);
            expect(result).toEqual(_objectSpread({
              id: 'shoulders'
            }, newMuscleGroup));
          case 2:
            return _context6.a(2);
        }
      }, _callee6);
    })));
  });
  describe('updateMuscleGroup', function () {
    it('should update muscle group successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      var updatedMuscleGroup, result;
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            updatedMuscleGroup = {
              id: 'chest',
              name: '胸（更新）',
              color: '#3B82F6'
            };
            _supabaseService.supabaseService.isAvailable.mockReturnValue(true);
            _supabaseService.supabaseService.saveData.mockResolvedValue(updatedMuscleGroup);
            _context7.n = 1;
            return _muscleGroupService.muscleGroupService.updateMuscleGroup('chest', updatedMuscleGroup);
          case 1:
            result = _context7.v;
            expect(_supabaseService.supabaseService.saveData).toHaveBeenCalledWith('muscle_groups', updatedMuscleGroup);
            expect(result).toEqual(updatedMuscleGroup);
          case 2:
            return _context7.a(2);
        }
      }, _callee7);
    })));
  });
  describe('deleteMuscleGroup', function () {
    it('should delete muscle group successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
      return _regenerator().w(function (_context8) {
        while (1) switch (_context8.n) {
          case 0:
            _supabaseService.supabaseService.isAvailable.mockReturnValue(true);
            _supabaseService.supabaseService.saveData.mockResolvedValue({});
            _context8.n = 1;
            return _muscleGroupService.muscleGroupService.deleteMuscleGroup('chest');
          case 1:
            expect(_supabaseService.supabaseService.saveData).toHaveBeenCalledWith('muscle_groups', {
              id: 'chest',
              deleted: true
            });
          case 2:
            return _context8.a(2);
        }
      }, _callee8);
    })));
  });
  describe('getMuscleGroupColor', function () {
    it('should return muscle group color', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {
      var mockMuscleGroups, result;
      return _regenerator().w(function (_context9) {
        while (1) switch (_context9.n) {
          case 0:
            mockMuscleGroups = [{
              id: 'chest',
              name: 'chest',
              name_ja: '胸',
              color_code: '#EF4444',
              description: 'Pectoral muscles including upper, middle, and lower chest',
              recovery_hours: 72,
              muscle_size: 'large',
              icon_name: 'chest',
              display_order: 1,
              is_active: true
            }];
            _supabaseService.supabaseService.isAvailable.mockReturnValue(true);
            _supabaseService.supabaseService.client = {
              from: jest.fn().mockReturnValue({
                select: jest.fn().mockReturnValue({
                  eq: jest.fn().mockReturnValue({
                    order: jest.fn().mockResolvedValue({
                      data: mockMuscleGroups,
                      error: null
                    })
                  })
                })
              })
            };
            _context9.n = 1;
            return _muscleGroupService.muscleGroupService.getMuscleGroupColor('chest');
          case 1:
            result = _context9.v;
            expect(result).toBe('#EF4444');
          case 2:
            return _context9.a(2);
        }
      }, _callee9);
    })));
    it('should return default color for non-existent muscle group', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {
      var mockMuscleGroups, result;
      return _regenerator().w(function (_context0) {
        while (1) switch (_context0.n) {
          case 0:
            mockMuscleGroups = [{
              id: 'chest',
              name: 'chest',
              name_ja: '胸',
              color_code: '#EF4444',
              description: 'Pectoral muscles including upper, middle, and lower chest',
              recovery_hours: 72,
              muscle_size: 'large',
              icon_name: 'chest',
              display_order: 1,
              is_active: true
            }];
            _supabaseService.supabaseService.isAvailable.mockReturnValue(true);
            _supabaseService.supabaseService.client = {
              from: jest.fn().mockReturnValue({
                select: jest.fn().mockReturnValue({
                  eq: jest.fn().mockReturnValue({
                    order: jest.fn().mockResolvedValue({
                      data: mockMuscleGroups,
                      error: null
                    })
                  })
                })
              })
            };
            _context0.n = 1;
            return _muscleGroupService.muscleGroupService.getMuscleGroupColor('non-existent');
          case 1:
            result = _context0.v;
            expect(result).toBe('#3B82F6'); // デフォルトカラー
          case 2:
            return _context0.a(2);
        }
      }, _callee0);
    })));
  });
  describe('integration', function () {
    it('should complete full muscle group management flow', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1() {
      var mockMuscleGroups, muscleGroup, color;
      return _regenerator().w(function (_context1) {
        while (1) switch (_context1.n) {
          case 0:
            mockMuscleGroups = [{
              id: 'chest',
              name: 'chest',
              name_ja: '胸',
              color_code: '#EF4444',
              description: 'Pectoral muscles including upper, middle, and lower chest',
              recovery_hours: 72,
              muscle_size: 'large',
              icon_name: 'chest',
              display_order: 1,
              is_active: true
            }];
            _supabaseService.supabaseService.isAvailable.mockReturnValue(true);
            _supabaseService.supabaseService.client = {
              from: jest.fn().mockReturnValue({
                select: jest.fn().mockReturnValue({
                  eq: jest.fn().mockReturnValue({
                    order: jest.fn().mockResolvedValue({
                      data: mockMuscleGroups,
                      error: null
                    })
                  })
                })
              })
            };

            // 筋肉部位を読み込み
            _context1.n = 1;
            return _muscleGroupService.muscleGroupService.getMuscleGroups();
          case 1:
            _context1.n = 2;
            return _muscleGroupService.muscleGroupService.getMuscleGroupById('chest');
          case 2:
            muscleGroup = _context1.v;
            expect(muscleGroup).toEqual({
              id: 'chest',
              name: 'chest',
              name_ja: '胸',
              color_code: '#EF4444',
              description: 'Pectoral muscles including upper, middle, and lower chest',
              recovery_hours: 72,
              muscle_size: 'large',
              icon_name: 'chest',
              display_order: 1,
              is_active: true
            });

            // 筋肉部位の色を取得
            _context1.n = 3;
            return _muscleGroupService.muscleGroupService.getMuscleGroupColor('chest');
          case 3:
            color = _context1.v;
            expect(color).toBe('#EF4444');
          case 4:
            return _context1.a(2);
        }
      }, _callee1);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,