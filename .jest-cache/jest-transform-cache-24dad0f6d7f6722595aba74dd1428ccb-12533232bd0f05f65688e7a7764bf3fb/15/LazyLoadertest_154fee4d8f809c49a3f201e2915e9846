7785ea48be792069590f937788065917
"use strict";

// モックの設定
_getJestObj().mock('../../js/utils/lazyLoader.js', function () {
  return {
    lazyLoader: {
      initialize: jest.fn(),
      loadImage: jest.fn(),
      loadScript: jest.fn(),
      loadStylesheet: jest.fn(),
      loadComponent: jest.fn(),
      preload: jest.fn(),
      isLoaded: jest.fn(),
      getLoadedResources: jest.fn(),
      clearCache: jest.fn(),
      destroy: jest.fn()
    }
  };
});
var _lazyLoader = require("../../js/utils/lazyLoader.js");
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
/**
 * LazyLoader テストスイート
 */
describe('LazyLoader', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('constructor', function () {
    it('should initialize with default values', function () {
      expect(_lazyLoader.lazyLoader.initialize).toBeDefined();
    });
  });
  describe('initialize', function () {
    it('should initialize lazy loader', function () {
      _lazyLoader.lazyLoader.initialize();
      expect(_lazyLoader.lazyLoader.initialize).toHaveBeenCalled();
    });
  });
  describe('loadImage', function () {
    it('should load image lazily', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var src, mockImage, result;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            src = 'https://example.com/image.jpg';
            mockImage = {
              src: src,
              onload: jest.fn()
            };
            _lazyLoader.lazyLoader.loadImage.mockResolvedValue(mockImage);
            _context.n = 1;
            return _lazyLoader.lazyLoader.loadImage(src);
          case 1:
            result = _context.v;
            expect(result).toBe(mockImage);
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
  });
  describe('loadScript', function () {
    it('should load script lazily', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var src, mockScript, result;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            src = 'https://example.com/script.js';
            mockScript = {
              src: src,
              onload: jest.fn()
            };
            _lazyLoader.lazyLoader.loadScript.mockResolvedValue(mockScript);
            _context2.n = 1;
            return _lazyLoader.lazyLoader.loadScript(src);
          case 1:
            result = _context2.v;
            expect(result).toBe(mockScript);
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
  });
  describe('loadStylesheet', function () {
    it('should load stylesheet lazily', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var href, mockLink, result;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            href = 'https://example.com/style.css';
            mockLink = {
              href: href,
              onload: jest.fn()
            };
            _lazyLoader.lazyLoader.loadStylesheet.mockResolvedValue(mockLink);
            _context3.n = 1;
            return _lazyLoader.lazyLoader.loadStylesheet(href);
          case 1:
            result = _context3.v;
            expect(result).toBe(mockLink);
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
  });
  describe('loadComponent', function () {
    it('should load component lazily', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var componentName, mockComponent, result;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            componentName = 'TestComponent';
            mockComponent = {
              name: componentName
            };
            _lazyLoader.lazyLoader.loadComponent.mockResolvedValue(mockComponent);
            _context4.n = 1;
            return _lazyLoader.lazyLoader.loadComponent(componentName);
          case 1:
            result = _context4.v;
            expect(result).toBe(mockComponent);
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
  });
  describe('preload', function () {
    it('should preload resource', function () {
      var resource = 'https://example.com/resource.js';
      _lazyLoader.lazyLoader.preload(resource);
      expect(_lazyLoader.lazyLoader.preload).toHaveBeenCalledWith(resource);
    });
  });
  describe('isLoaded', function () {
    it('should check if resource is loaded', function () {
      var resource = 'https://example.com/resource.js';
      _lazyLoader.lazyLoader.isLoaded.mockReturnValue(true);
      var result = _lazyLoader.lazyLoader.isLoaded(resource);
      expect(result).toBe(true);
    });
  });
  describe('getLoadedResources', function () {
    it('should return loaded resources', function () {
      var mockResources = ['https://example.com/resource1.js', 'https://example.com/resource2.js'];
      _lazyLoader.lazyLoader.getLoadedResources.mockReturnValue(mockResources);
      var result = _lazyLoader.lazyLoader.getLoadedResources();
      expect(result).toEqual(mockResources);
    });
  });
  describe('clearCache', function () {
    it('should clear cache', function () {
      _lazyLoader.lazyLoader.clearCache();
      expect(_lazyLoader.lazyLoader.clearCache).toHaveBeenCalled();
    });
  });
  describe('destroy', function () {
    it('should destroy lazy loader', function () {
      _lazyLoader.lazyLoader.destroy();
      expect(_lazyLoader.lazyLoader.destroy).toHaveBeenCalled();
    });
  });
  describe('integration', function () {
    it('should complete full lazy loading flow', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var src, mockImage, result;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            src = 'https://example.com/image.jpg';
            mockImage = {
              src: src,
              onload: jest.fn()
            };
            _lazyLoader.lazyLoader.loadImage.mockResolvedValue(mockImage);
            _context5.n = 1;
            return _lazyLoader.lazyLoader.loadImage(src);
          case 1:
            result = _context5.v;
            expect(result).toBe(mockImage);
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,