7bf060753ba1dcfe3d603e1d095fff99
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.workoutDataService = exports.WorkoutDataService = void 0;
var _supabaseService = require("./supabaseService.js");
var _helpers = require("../utils/helpers.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // js/services/workoutDataService.js - ワークアウトデータ管理サービス
/**
 * ワークアウトデータ管理サービス
 * ローカルストレージとSupabaseの両方に対応
 */
var WorkoutDataService = exports.WorkoutDataService = /*#__PURE__*/function () {
  function WorkoutDataService() {
    _classCallCheck(this, WorkoutDataService);
    this.localStorageKey = 'workoutHistory';
    this.plannedWorkoutsKey = 'plannedWorkouts';
    this.userSettingsKey = 'userSettings';
  }

  /**
   * ワークアウトデータを保存
   * @param {Object} workoutData - ワークアウトデータ
   * @returns {Promise<boolean>} 保存成功かどうか
   */
  return _createClass(WorkoutDataService, [{
    key: "saveWorkout",
    value: (function () {
      var _saveWorkout = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(workoutData) {
        var success, _t, _t2;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.p = _context.n) {
            case 0:
              _context.p = 0;
              if (this.validateWorkoutData(workoutData)) {
                _context.n = 1;
                break;
              }
              throw new Error('Invalid workout data');
            case 1:
              _context.n = 2;
              return this.saveToLocalStorage(workoutData);
            case 2:
              success = _context.v;
              if (!_supabaseService.supabaseService.isAvailable()) {
                _context.n = 6;
                break;
              }
              _context.p = 3;
              _context.n = 4;
              return this.saveToSupabase(workoutData);
            case 4:
              _context.n = 6;
              break;
            case 5:
              _context.p = 5;
              _t = _context.v;
              console.warn('Failed to save to Supabase:', _t);
              // ローカルストレージへの保存は成功しているので、エラーを無視
            case 6:
              return _context.a(2, success);
            case 7:
              _context.p = 7;
              _t2 = _context.v;
              console.error('Error saving workout:', _t2);
              (0, _helpers.showNotification)('ワークアウトの保存に失敗しました', 'error');
              return _context.a(2, false);
          }
        }, _callee, this, [[3, 5], [0, 7]]);
      }));
      function saveWorkout(_x) {
        return _saveWorkout.apply(this, arguments);
      }
      return saveWorkout;
    }()
    /**
     * ワークアウトデータを検証
     * @param {Object} workoutData - ワークアウトデータ
     * @returns {boolean} 有効かどうか
     */
    )
  }, {
    key: "validateWorkoutData",
    value: function validateWorkoutData(workoutData) {
      if (!workoutData) return false;
      if (!workoutData.date && !workoutData.startTime) return false;
      if (!workoutData.muscle_groups || !Array.isArray(workoutData.muscle_groups)) return false;
      if (!workoutData.exercises || !Array.isArray(workoutData.exercises)) return false;
      return true;
    }

    /**
     * ローカルストレージに保存
     * @param {Object} workoutData - ワークアウトデータ
     * @returns {Promise<boolean>} 保存成功かどうか
     */
  }, {
    key: "saveToLocalStorage",
    value: (function () {
      var _saveToLocalStorage = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(workoutData) {
        var existingData, newWorkout, _t3;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.p = _context2.n) {
            case 0:
              _context2.p = 0;
              // 既存のデータを取得
              existingData = JSON.parse(localStorage.getItem(this.localStorageKey) || '[]'); // 新しいデータにIDを追加
              newWorkout = _objectSpread(_objectSpread({}, workoutData), {}, {
                id: workoutData.id || "workout_".concat(Date.now(), "_").concat(Math.random().toString(36).substr(2, 9)),
                saved_at: new Date().toISOString(),
                source: 'local'
              }); // 既存のデータに追加
              existingData.push(newWorkout);

              // 日付順でソート（新しい順）
              existingData.sort(function (a, b) {
                var dateA = new Date(a.date || a.startTime);
                var dateB = new Date(b.date || b.startTime);
                return dateB - dateA;
              });

              // ローカルストレージに保存
              localStorage.setItem(this.localStorageKey, JSON.stringify(existingData));
              console.log('Workout saved to localStorage:', newWorkout);
              return _context2.a(2, true);
            case 1:
              _context2.p = 1;
              _t3 = _context2.v;
              console.error('Error saving to localStorage:', _t3);
              return _context2.a(2, false);
          }
        }, _callee2, this, [[0, 1]]);
      }));
      function saveToLocalStorage(_x2) {
        return _saveToLocalStorage.apply(this, arguments);
      }
      return saveToLocalStorage;
    }()
    /**
     * Supabaseに保存
     * @param {Object} workoutData - ワークアウトデータ
     * @returns {Promise<boolean>} 保存成功かどうか
     */
    )
  }, {
    key: "saveToSupabase",
    value: (function () {
      var _saveToSupabase = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(workoutData) {
        var user, workoutRecord, result, _t4;
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.p = _context3.n) {
            case 0:
              _context3.p = 0;
              _context3.n = 1;
              return _supabaseService.supabaseService.getCurrentUser();
            case 1:
              user = _context3.v;
              if (user) {
                _context3.n = 2;
                break;
              }
              throw new Error('User not authenticated');
            case 2:
              workoutRecord = {
                user_id: user.id,
                workout_date: workoutData.date || workoutData.startTime,
                muscle_groups: workoutData.muscle_groups,
                exercises: workoutData.exercises,
                duration: workoutData.duration || 0,
                notes: workoutData.notes || '',
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
              };
              _context3.n = 3;
              return _supabaseService.supabaseService.saveWorkout(workoutRecord);
            case 3:
              result = _context3.v;
              if (!result.success) {
                _context3.n = 4;
                break;
              }
              console.log('Workout saved to Supabase:', result.data);
              return _context3.a(2, true);
            case 4:
              throw new Error(result.error || 'Failed to save to Supabase');
            case 5:
              _context3.n = 7;
              break;
            case 6:
              _context3.p = 6;
              _t4 = _context3.v;
              console.error('Error saving to Supabase:', _t4);
              throw _t4;
            case 7:
              return _context3.a(2);
          }
        }, _callee3, null, [[0, 6]]);
      }));
      function saveToSupabase(_x3) {
        return _saveToSupabase.apply(this, arguments);
      }
      return saveToSupabase;
    }()
    /**
     * ワークアウトデータを読み込み
     * @param {Object} options - 読み込みオプション
     * @param {number} options.limit - 取得件数制限
     * @param {string} options.startDate - 開始日
     * @param {string} options.endDate - 終了日
     * @returns {Promise<Array>} ワークアウトデータ配列
     */
    )
  }, {
    key: "loadWorkouts",
    value: (function () {
      var _loadWorkouts = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
        var options,
          _options$limit,
          limit,
          startDate,
          endDate,
          localData,
          cloudData,
          mergedData,
          filteredData,
          _args4 = arguments,
          _t5,
          _t6;
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.p = _context4.n) {
            case 0:
              options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};
              _context4.p = 1;
              _options$limit = options.limit, limit = _options$limit === void 0 ? 100 : _options$limit, startDate = options.startDate, endDate = options.endDate; // ローカルストレージから読み込み
              _context4.n = 2;
              return this.loadFromLocalStorage();
            case 2:
              localData = _context4.v;
              // Supabaseが利用可能な場合はクラウドからも読み込み
              cloudData = [];
              if (!_supabaseService.supabaseService.isAvailable()) {
                _context4.n = 6;
                break;
              }
              _context4.p = 3;
              _context4.n = 4;
              return this.loadFromSupabase(options);
            case 4:
              cloudData = _context4.v;
              _context4.n = 6;
              break;
            case 5:
              _context4.p = 5;
              _t5 = _context4.v;
              console.warn('Failed to load from Supabase:', _t5);
            case 6:
              // データをマージ（重複を除去）
              mergedData = this.mergeWorkoutData(localData, cloudData); // フィルタリング
              filteredData = mergedData;
              if (startDate) {
                filteredData = filteredData.filter(function (workout) {
                  var workoutDate = new Date(workout.date || workout.startTime);
                  return workoutDate >= new Date(startDate);
                });
              }
              if (endDate) {
                filteredData = filteredData.filter(function (workout) {
                  var workoutDate = new Date(workout.date || workout.startTime);
                  return workoutDate <= new Date(endDate);
                });
              }

              // 件数制限
              if (limit > 0) {
                filteredData = filteredData.slice(0, limit);
              }
              console.log("Loaded ".concat(filteredData.length, " workouts"));
              return _context4.a(2, filteredData);
            case 7:
              _context4.p = 7;
              _t6 = _context4.v;
              console.error('Error loading workouts:', _t6);
              (0, _helpers.showNotification)('ワークアウトデータの読み込みに失敗しました', 'error');
              return _context4.a(2, []);
          }
        }, _callee4, this, [[3, 5], [1, 7]]);
      }));
      function loadWorkouts() {
        return _loadWorkouts.apply(this, arguments);
      }
      return loadWorkouts;
    }()
    /**
     * ローカルストレージから読み込み
     * @returns {Promise<Array>} ワークアウトデータ配列
     */
    )
  }, {
    key: "loadFromLocalStorage",
    value: (function () {
      var _loadFromLocalStorage = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
        var data, _t7;
        return _regenerator().w(function (_context5) {
          while (1) switch (_context5.p = _context5.n) {
            case 0:
              _context5.p = 0;
              data = localStorage.getItem(this.localStorageKey);
              return _context5.a(2, data ? JSON.parse(data) : []);
            case 1:
              _context5.p = 1;
              _t7 = _context5.v;
              console.error('Error loading from localStorage:', _t7);
              return _context5.a(2, []);
          }
        }, _callee5, this, [[0, 1]]);
      }));
      function loadFromLocalStorage() {
        return _loadFromLocalStorage.apply(this, arguments);
      }
      return loadFromLocalStorage;
    }()
    /**
     * Supabaseから読み込み
     * @param {Object} options - 読み込みオプション
     * @returns {Promise<Array>} ワークアウトデータ配列
     */
    )
  }, {
    key: "loadFromSupabase",
    value: (function () {
      var _loadFromSupabase = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
        var options,
          _options$limit2,
          limit,
          startDate,
          endDate,
          result,
          _args6 = arguments,
          _t8;
        return _regenerator().w(function (_context6) {
          while (1) switch (_context6.p = _context6.n) {
            case 0:
              options = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};
              _context6.p = 1;
              _options$limit2 = options.limit, limit = _options$limit2 === void 0 ? 100 : _options$limit2, startDate = options.startDate, endDate = options.endDate;
              _context6.n = 2;
              return _supabaseService.supabaseService.getWorkouts(limit, startDate, endDate);
            case 2:
              result = _context6.v;
              if (!result.success) {
                _context6.n = 3;
                break;
              }
              return _context6.a(2, result.data || []);
            case 3:
              throw new Error(result.error || 'Failed to load from Supabase');
            case 4:
              _context6.n = 6;
              break;
            case 5:
              _context6.p = 5;
              _t8 = _context6.v;
              console.error('Error loading from Supabase:', _t8);
              throw _t8;
            case 6:
              return _context6.a(2);
          }
        }, _callee6, null, [[1, 5]]);
      }));
      function loadFromSupabase() {
        return _loadFromSupabase.apply(this, arguments);
      }
      return loadFromSupabase;
    }()
    /**
     * ワークアウトデータをマージ（重複除去）
     * @param {Array} localData - ローカルデータ
     * @param {Array} cloudData - クラウドデータ
     * @returns {Array} マージされたデータ
     */
    )
  }, {
    key: "mergeWorkoutData",
    value: function mergeWorkoutData(localData, cloudData) {
      var mergedData = _toConsumableArray(localData);
      var localIds = new Set(localData.map(function (item) {
        return item.id;
      }));

      // クラウドデータでローカルにないものを追加
      cloudData.forEach(function (cloudItem) {
        if (!localIds.has(cloudItem.id)) {
          mergedData.push(_objectSpread(_objectSpread({}, cloudItem), {}, {
            source: 'cloud'
          }));
        }
      });

      // 日付順でソート（新しい順）
      mergedData.sort(function (a, b) {
        var dateA = new Date(a.date || a.startTime || a.workout_date);
        var dateB = new Date(b.date || b.startTime || b.workout_date);
        return dateB - dateA;
      });
      return mergedData;
    }

    /**
     * 月間統計を計算
     * @param {number} year - 年
     * @param {number} month - 月（0-11）
     * @returns {Promise<Object>} 月間統計データ
     */
  }, {
    key: "getMonthlyStats",
    value: (function () {
      var _getMonthlyStats = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(year, month) {
        var startDate, endDate, workouts, stats, _t9;
        return _regenerator().w(function (_context7) {
          while (1) switch (_context7.p = _context7.n) {
            case 0:
              _context7.p = 0;
              startDate = new Date(year, month, 1).toISOString().split('T')[0];
              endDate = new Date(year, month + 1, 0).toISOString().split('T')[0];
              _context7.n = 1;
              return this.loadWorkouts({
                startDate: startDate,
                endDate: endDate
              });
            case 1:
              workouts = _context7.v;
              stats = {
                totalWorkouts: workouts.length,
                totalDuration: 0,
                workoutDays: new Set(),
                muscleGroups: {},
                exercises: {}
              };
              workouts.forEach(function (workout) {
                // 総時間
                stats.totalDuration += workout.duration || 0;

                // トレーニング日数
                var workoutDate = workout.date || workout.startTime || workout.workout_date;
                stats.workoutDays.add(workoutDate);

                // 部位別カウント
                if (workout.muscle_groups) {
                  workout.muscle_groups.forEach(function (muscle) {
                    stats.muscleGroups[muscle] = (stats.muscleGroups[muscle] || 0) + 1;
                  });
                }

                // エクササイズ別カウント
                if (workout.exercises) {
                  workout.exercises.forEach(function (exercise) {
                    var exerciseName = exercise.name || exercise.exercise_name;
                    if (exerciseName) {
                      stats.exercises[exerciseName] = (stats.exercises[exerciseName] || 0) + 1;
                    }
                  });
                }
              });

              // 平均時間を計算
              stats.averageDuration = stats.totalWorkouts > 0 ? Math.round(stats.totalDuration / stats.totalWorkouts) : 0;

              // トレーニング日数を数値に変換
              stats.workoutDaysCount = stats.workoutDays.size;
              return _context7.a(2, stats);
            case 2:
              _context7.p = 2;
              _t9 = _context7.v;
              console.error('Error calculating monthly stats:', _t9);
              return _context7.a(2, {
                totalWorkouts: 0,
                totalDuration: 0,
                workoutDaysCount: 0,
                averageDuration: 0,
                muscleGroups: {},
                exercises: {}
              });
          }
        }, _callee7, this, [[0, 2]]);
      }));
      function getMonthlyStats(_x4, _x5) {
        return _getMonthlyStats.apply(this, arguments);
      }
      return getMonthlyStats;
    }()
    /**
     * 部位別統計を計算
     * @param {number} year - 年
     * @param {number} month - 月（0-11）
     * @returns {Promise<Object>} 部位別統計データ
     */
    )
  }, {
    key: "getMuscleGroupStats",
    value: (function () {
      var _getMuscleGroupStats = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(year, month) {
        var startDate, endDate, workouts, muscleStats, _t0;
        return _regenerator().w(function (_context8) {
          while (1) switch (_context8.p = _context8.n) {
            case 0:
              _context8.p = 0;
              startDate = new Date(year, month, 1).toISOString().split('T')[0];
              endDate = new Date(year, month + 1, 0).toISOString().split('T')[0];
              _context8.n = 1;
              return this.loadWorkouts({
                startDate: startDate,
                endDate: endDate
              });
            case 1:
              workouts = _context8.v;
              muscleStats = {};
              workouts.forEach(function (workout) {
                if (workout.muscle_groups) {
                  workout.muscle_groups.forEach(function (muscle) {
                    if (!muscleStats[muscle]) {
                      muscleStats[muscle] = {
                        count: 0,
                        totalDuration: 0,
                        exercises: new Set()
                      };
                    }
                    muscleStats[muscle].count++;
                    muscleStats[muscle].totalDuration += workout.duration || 0;

                    // エクササイズを記録
                    if (workout.exercises) {
                      workout.exercises.forEach(function (exercise) {
                        var exerciseName = exercise.name || exercise.exercise_name;
                        if (exerciseName) {
                          muscleStats[muscle].exercises.add(exerciseName);
                        }
                      });
                    }
                  });
                }
              });

              // Setを配列に変換
              Object.keys(muscleStats).forEach(function (muscle) {
                muscleStats[muscle].exercises = Array.from(muscleStats[muscle].exercises);
              });
              return _context8.a(2, muscleStats);
            case 2:
              _context8.p = 2;
              _t0 = _context8.v;
              console.error('Error calculating muscle group stats:', _t0);
              return _context8.a(2, {});
          }
        }, _callee8, this, [[0, 2]]);
      }));
      function getMuscleGroupStats(_x6, _x7) {
        return _getMuscleGroupStats.apply(this, arguments);
      }
      return getMuscleGroupStats;
    }()
    /**
     * ワークアウトデータを削除
     * @param {string} workoutId - ワークアウトID
     * @returns {Promise<boolean>} 削除成功かどうか
     */
    )
  }, {
    key: "deleteWorkout",
    value: (function () {
      var _deleteWorkout = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9(workoutId) {
        var success, _t1, _t10;
        return _regenerator().w(function (_context9) {
          while (1) switch (_context9.p = _context9.n) {
            case 0:
              _context9.p = 0;
              _context9.n = 1;
              return this.deleteFromLocalStorage(workoutId);
            case 1:
              success = _context9.v;
              if (!_supabaseService.supabaseService.isAvailable()) {
                _context9.n = 5;
                break;
              }
              _context9.p = 2;
              _context9.n = 3;
              return this.deleteFromSupabase(workoutId);
            case 3:
              _context9.n = 5;
              break;
            case 4:
              _context9.p = 4;
              _t1 = _context9.v;
              console.warn('Failed to delete from Supabase:', _t1);
            case 5:
              return _context9.a(2, success);
            case 6:
              _context9.p = 6;
              _t10 = _context9.v;
              console.error('Error deleting workout:', _t10);
              (0, _helpers.showNotification)('ワークアウトの削除に失敗しました', 'error');
              return _context9.a(2, false);
          }
        }, _callee9, this, [[2, 4], [0, 6]]);
      }));
      function deleteWorkout(_x8) {
        return _deleteWorkout.apply(this, arguments);
      }
      return deleteWorkout;
    }()
    /**
     * ローカルストレージから削除
     * @param {string} workoutId - ワークアウトID
     * @returns {Promise<boolean>} 削除成功かどうか
     */
    )
  }, {
    key: "deleteFromLocalStorage",
    value: (function () {
      var _deleteFromLocalStorage = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0(workoutId) {
        var existingData, filteredData, _t11;
        return _regenerator().w(function (_context0) {
          while (1) switch (_context0.p = _context0.n) {
            case 0:
              _context0.p = 0;
              existingData = JSON.parse(localStorage.getItem(this.localStorageKey) || '[]');
              filteredData = existingData.filter(function (workout) {
                return workout.id !== workoutId;
              });
              localStorage.setItem(this.localStorageKey, JSON.stringify(filteredData));
              console.log('Workout deleted from localStorage:', workoutId);
              return _context0.a(2, true);
            case 1:
              _context0.p = 1;
              _t11 = _context0.v;
              console.error('Error deleting from localStorage:', _t11);
              return _context0.a(2, false);
          }
        }, _callee0, this, [[0, 1]]);
      }));
      function deleteFromLocalStorage(_x9) {
        return _deleteFromLocalStorage.apply(this, arguments);
      }
      return deleteFromLocalStorage;
    }()
    /**
     * Supabaseから削除
     * @param {string} workoutId - ワークアウトID
     * @returns {Promise<boolean>} 削除成功かどうか
     */
    )
  }, {
    key: "deleteFromSupabase",
    value: (function () {
      var _deleteFromSupabase = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1(workoutId) {
        var result, _t12;
        return _regenerator().w(function (_context1) {
          while (1) switch (_context1.p = _context1.n) {
            case 0:
              _context1.p = 0;
              _context1.n = 1;
              return _supabaseService.supabaseService.deleteWorkout(workoutId);
            case 1:
              result = _context1.v;
              if (!result.success) {
                _context1.n = 2;
                break;
              }
              console.log('Workout deleted from Supabase:', workoutId);
              return _context1.a(2, true);
            case 2:
              throw new Error(result.error || 'Failed to delete from Supabase');
            case 3:
              _context1.n = 5;
              break;
            case 4:
              _context1.p = 4;
              _t12 = _context1.v;
              console.error('Error deleting from Supabase:', _t12);
              throw _t12;
            case 5:
              return _context1.a(2);
          }
        }, _callee1, null, [[0, 4]]);
      }));
      function deleteFromSupabase(_x0) {
        return _deleteFromSupabase.apply(this, arguments);
      }
      return deleteFromSupabase;
    }()
    /**
     * データをエクスポート
     * @returns {Promise<string>} エクスポートされたJSON文字列
     */
    )
  }, {
    key: "exportData",
    value: (function () {
      var _exportData = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10() {
        var workouts, plannedWorkouts, _exportData2, _t13;
        return _regenerator().w(function (_context10) {
          while (1) switch (_context10.p = _context10.n) {
            case 0:
              _context10.p = 0;
              _context10.n = 1;
              return this.loadWorkouts({
                limit: 1000
              });
            case 1:
              workouts = _context10.v;
              plannedWorkouts = JSON.parse(localStorage.getItem(this.plannedWorkoutsKey) || '[]');
              _exportData2 = {
                version: '1.0',
                exportDate: new Date().toISOString(),
                workouts: workouts,
                plannedWorkouts: plannedWorkouts,
                metadata: {
                  totalWorkouts: workouts.length,
                  totalPlannedWorkouts: plannedWorkouts.length
                }
              };
              return _context10.a(2, JSON.stringify(_exportData2, null, 2));
            case 2:
              _context10.p = 2;
              _t13 = _context10.v;
              console.error('Error exporting data:', _t13);
              throw _t13;
            case 3:
              return _context10.a(2);
          }
        }, _callee10, this, [[0, 2]]);
      }));
      function exportData() {
        return _exportData.apply(this, arguments);
      }
      return exportData;
    }()
    /**
     * データをインポート
     * @param {string} jsonData - インポートするJSON文字列
     * @returns {Promise<boolean>} インポート成功かどうか
     */
    )
  }, {
    key: "importData",
    value: (function () {
      var _importData = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11(jsonData) {
        var _importData2, existingData, _t14;
        return _regenerator().w(function (_context11) {
          while (1) switch (_context11.p = _context11.n) {
            case 0:
              _context11.p = 0;
              _importData2 = JSON.parse(jsonData);
              if (!(!_importData2.workouts || !Array.isArray(_importData2.workouts))) {
                _context11.n = 1;
                break;
              }
              throw new Error('Invalid import data format');
            case 1:
              _context11.n = 2;
              return this.loadFromLocalStorage();
            case 2:
              existingData = _context11.v;
              localStorage.setItem("".concat(this.localStorageKey, "_backup"), JSON.stringify(existingData));

              // 新しいデータを保存
              localStorage.setItem(this.localStorageKey, JSON.stringify(_importData2.workouts));
              if (_importData2.plannedWorkouts) {
                localStorage.setItem(this.plannedWorkoutsKey, JSON.stringify(_importData2.plannedWorkouts));
              }
              console.log('Data imported successfully:', _importData2.metadata);
              (0, _helpers.showNotification)('データのインポートが完了しました', 'success');
              return _context11.a(2, true);
            case 3:
              _context11.p = 3;
              _t14 = _context11.v;
              console.error('Error importing data:', _t14);
              (0, _helpers.showNotification)('データのインポートに失敗しました', 'error');
              return _context11.a(2, false);
          }
        }, _callee11, this, [[0, 3]]);
      }));
      function importData(_x1) {
        return _importData.apply(this, arguments);
      }
      return importData;
    }())
  }]);
}(); // シングルトンインスタンスをエクスポート
var workoutDataService = exports.workoutDataService = new WorkoutDataService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,