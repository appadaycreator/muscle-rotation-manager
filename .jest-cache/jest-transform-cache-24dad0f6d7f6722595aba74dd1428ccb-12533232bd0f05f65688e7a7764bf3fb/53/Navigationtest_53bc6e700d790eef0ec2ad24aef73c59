fc09ffcf0c59f91681a823d7613db498
"use strict";

// authManagerモジュールをモック
_getJestObj().mock('../../js/modules/authManager.js', function () {
  return {
    authManager: {
      isAuthenticated: jest.fn(),
      getCurrentUser: jest.fn(),
      logout: jest.fn()
    }
  };
});

// showNotificationをモック
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    showNotification: jest.fn()
  };
});

// tooltipManagerをモック
_getJestObj().mock('../../js/utils/TooltipManager.js', function () {
  return {
    tooltipManager: {
      initialize: jest.fn(),
      addTooltip: jest.fn(),
      addDynamicTooltip: jest.fn()
    }
  };
});
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _Navigation = require("../../js/components/Navigation.js");
var _jsdomNavigationFix = require("../utils/jsdom-navigation-fix.js");
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _getJestObj() {
  var _require0 = require("@jest/globals"),
    jest = _require0.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
} // tests/unit/Navigation.test.js - Navigation コンポーネントのテスト
// モックの設定
var mockAuthManager;
var mockElement;
describe('Navigation', function () {
  beforeEach(function () {
    // JSDOMナビゲーション修正を適用
    (0, _jsdomNavigationFix.setupJSDOMNavigationFix)();

    // DOM要素のモック設定
    mockElement = {
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      click: jest.fn(),
      classList: {
        add: jest.fn(),
        remove: jest.fn(),
        contains: jest.fn(),
        toggle: jest.fn()
      },
      style: {},
      textContent: '',
      innerHTML: '',
      insertAdjacentHTML: jest.fn(),
      appendChild: jest.fn(),
      removeChild: jest.fn(),
      setAttribute: jest.fn(),
      getAttribute: jest.fn()
    };

    // モックの設定
    mockAuthManager = {
      isAuthenticated: jest.fn().mockResolvedValue(true),
      getCurrentUser: jest.fn().mockReturnValue({
        email: 'test@example.com'
      }),
      logout: jest.fn().mockResolvedValue()
    };

    // モックされたauthManagerを設定
    var _require = require('../../js/modules/authManager.js'),
      authManager = _require.authManager;
    authManager.isAuthenticated = mockAuthManager.isAuthenticated;
    authManager.getCurrentUser = mockAuthManager.getCurrentUser;
    authManager.logout = mockAuthManager.logout;

    // showNotificationのモックを設定
    var _require2 = require('../../js/utils/helpers.js'),
      showNotification = _require2.showNotification;
    global.showNotification = showNotification;

    // window.location は setup.js で設定済み

    // document.getElementById のモック
    document.getElementById = jest.fn(function (id) {
      if (id === 'mobile-sidebar') {
        return _objectSpread(_objectSpread({}, mockElement), {}, {
          classList: _objectSpread(_objectSpread({}, mockElement.classList), {}, {
            contains: jest.fn().mockReturnValue(false),
            add: jest.fn(),
            remove: jest.fn(),
            toggle: jest.fn()
          })
        });
      }
      if (id === 'user-info') {
        return _objectSpread(_objectSpread({}, mockElement), {}, {
          style: {
            display: 'none'
          }
        });
      }
      if (id === 'logout-btn') {
        return _objectSpread(_objectSpread({}, mockElement), {}, {
          style: {
            display: 'none'
          }
        });
      }
      return mockElement;
    });

    // document.querySelector のモック
    document.querySelector = jest.fn(function () {
      return mockElement;
    });
    document.querySelectorAll = jest.fn(function () {
      return [mockElement];
    });
  });
  describe('constructor', function () {
    test('should initialize with default values', function () {
      var navigation = new _Navigation.Navigation();
      expect(navigation.isInitialized).toBe(false);
      expect(navigation.navigationItems).toBeDefined();
    });
  });
  describe('getCurrentPage', function () {
    test('should return current page from URL', function () {
      var navigation = new _Navigation.Navigation();

      // getCurrentPageメソッドを直接テストするために、内部実装を確認
      // 実際のwindow.location.pathnameを使用してテスト
      var currentPage = navigation.getCurrentPage();

      // 現在のパスに基づいて期待値を設定
      var expectedPage = window.location.pathname.split('/').pop().replace('.html', '') || 'index';
      expect(currentPage).toBe(expectedPage);
    });
    test('should return index for root path', function () {
      var navigation = new _Navigation.Navigation();

      // 現在のパスに基づいてテスト
      var currentPage = navigation.getCurrentPage();

      // 現在のパスがルートまたはindex.htmlの場合
      var expectedPage = window.location.pathname === '/' || window.location.pathname === '/index.html' ? 'index' : window.location.pathname.split('/').pop().replace('.html', '') || 'index';
      expect(currentPage).toBe(expectedPage);
    });
  });
  describe('initialize', function () {
    test('should initialize successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var navigation, consoleSpy;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            navigation = new _Navigation.Navigation();
            consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            _context.n = 1;
            return navigation.initialize();
          case 1:
            expect(consoleSpy).toHaveBeenCalledWith('🔄 Initializing navigation...');
            expect(navigation.isInitialized).toBe(true);
            consoleSpy.mockRestore();
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
    test('should not initialize if already initialized', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var navigation, consoleSpy1, consoleSpy2;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            navigation = new _Navigation.Navigation(); // 1回目の初期化
            consoleSpy1 = jest.spyOn(console, 'log').mockImplementation();
            _context2.n = 1;
            return navigation.initialize();
          case 1:
            expect(consoleSpy1).toHaveBeenCalledWith('🔄 Initializing navigation...');
            consoleSpy1.mockRestore();

            // 2回目の初期化ではログが出力されないことを確認
            consoleSpy2 = jest.spyOn(console, 'log').mockImplementation();
            _context2.n = 2;
            return navigation.initialize();
          case 2:
            // 初期化ログが2回目に出力されないことを確認
            expect(consoleSpy2).not.toHaveBeenCalledWith('🔄 Initializing navigation...');
            consoleSpy2.mockRestore();
          case 3:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    test('should handle initialization errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var navigation, _require3, authManager;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            navigation = new _Navigation.Navigation(); // authManagerを無効にしてエラーを発生させる
            _require3 = require('../../js/modules/authManager.js'), authManager = _require3.authManager;
            authManager.isAuthenticated = jest.fn().mockRejectedValue(new Error('Auth error'));
            _context3.n = 1;
            return expect(navigation.initialize()).rejects.toThrow();
          case 1:
            return _context3.a(2);
        }
      }, _callee3);
    })));
  });
  describe('generateBasicHeader', function () {
    test('should generate header HTML', function () {
      var navigation = new _Navigation.Navigation();
      var headerHTML = navigation.generateBasicHeader();
      expect(headerHTML).toContain('header');
      expect(headerHTML).toContain('MuscleRotationManager');
    });
  });
  describe('generateBasicSidebar', function () {
    test('should generate sidebar HTML', function () {
      var navigation = new _Navigation.Navigation();
      var sidebarHTML = navigation.generateBasicSidebar();
      expect(sidebarHTML).toContain('sidebar');
      expect(sidebarHTML).toContain('nav');
    });
  });
  describe('toggleMobileSidebar', function () {
    test('should toggle mobile sidebar visibility', function () {
      var navigation = new _Navigation.Navigation();

      // モバイルサイドバーのモックを設定
      var mockMobileSidebar = {
        classList: {
          toggle: jest.fn()
        }
      };
      document.getElementById = jest.fn().mockReturnValue(mockMobileSidebar);
      navigation.toggleMobileSidebar();
      expect(mockMobileSidebar.classList.toggle).toHaveBeenCalledWith('hidden');
    });
  });
  describe('closeMobileSidebar', function () {
    test('should close mobile sidebar', function () {
      var navigation = new _Navigation.Navigation();

      // モバイルサイドバーのモックを設定
      var mockMobileSidebar = {
        classList: {
          add: jest.fn()
        }
      };
      document.getElementById = jest.fn().mockReturnValue(mockMobileSidebar);
      navigation.closeMobileSidebar();
      expect(mockMobileSidebar.classList.add).toHaveBeenCalledWith('hidden');
    });
  });
  describe('handleNavigationClick', function () {
    test('should handle navigation click for authenticated user', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var navigation, navLink, event;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            navigation = new _Navigation.Navigation();
            navLink = {
              getAttribute: jest.fn().mockReturnValue('/dashboard.html'),
              preventDefault: jest.fn()
            };
            event = {
              preventDefault: jest.fn()
            };
            _context4.n = 1;
            return navigation.handleNavigationClick(navLink, event);
          case 1:
            expect(event.preventDefault).not.toHaveBeenCalled();
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    test('should prevent navigation for unauthenticated user', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var navigation, navLink, event, _require4, authManager;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            navigation = new _Navigation.Navigation();
            navLink = {
              getAttribute: jest.fn().mockReturnValue('/dashboard.html'),
              preventDefault: jest.fn()
            };
            event = {
              preventDefault: jest.fn(),
              stopPropagation: jest.fn()
            }; // 認証されていない状態をモック
            _require4 = require('../../js/modules/authManager.js'), authManager = _require4.authManager;
            authManager.isAuthenticated = jest.fn().mockResolvedValue(false);
            _context5.n = 1;
            return navigation.handleNavigationClick(navLink, event);
          case 1:
            expect(event.preventDefault).toHaveBeenCalled();
            expect(event.stopPropagation).toHaveBeenCalled();
            expect(global.showNotification).toHaveBeenCalledWith('ログインが必要です', 'warning');
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
  describe('handleLogout', function () {
    test('should handle logout successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var navigation, originalLocation, consoleWarnSpy, _require5, authManager;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            navigation = new _Navigation.Navigation(); // window.location.hrefをモック（JSDOMエラーを回避）
            originalLocation = window.location; // JSDOMの制限を回避するため、安全なモック方法を使用
            if (window.location) {
              // hrefは設定可能
              window.location.href = '';

              // メソッドが既に存在する場合はスキップ
              if (typeof window.location.assign !== 'function') {
                window.location.assign = jest.fn();
              }
              if (typeof window.location.replace !== 'function') {
                window.location.replace = jest.fn();
              }
              if (typeof window.location.reload !== 'function') {
                window.location.reload = jest.fn();
              }
            }

            // console.warnをモックしてJSDOMエラーを抑制
            consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();
            _context6.n = 1;
            return navigation.handleLogout();
          case 1:
            _require5 = require('../../js/modules/authManager.js'), authManager = _require5.authManager;
            expect(authManager.logout).toHaveBeenCalled();
            expect(global.showNotification).toHaveBeenCalledWith('ログアウトしました', 'success');
            consoleWarnSpy.mockRestore();

            // 元のlocationを復元
            window.location = originalLocation;
          case 2:
            return _context6.a(2);
        }
      }, _callee6);
    })));
    test('should handle logout errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      var navigation, error, _require6, authManager, originalLocation, consoleErrorSpy, consoleWarnSpy;
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            navigation = new _Navigation.Navigation();
            error = new Error('Logout failed');
            _require6 = require('../../js/modules/authManager.js'), authManager = _require6.authManager;
            authManager.logout = jest.fn().mockRejectedValue(error);

            // window.location.hrefをモック（JSDOMエラーを回避）
            originalLocation = window.location; // JSDOMの制限を回避するため、安全なモック方法を使用
            if (window.location) {
              // hrefは設定可能
              window.location.href = '';

              // メソッドが既に存在する場合はスキップ
              if (typeof window.location.assign !== 'function') {
                window.location.assign = jest.fn();
              }
              if (typeof window.location.replace !== 'function') {
                window.location.replace = jest.fn();
              }
              if (typeof window.location.reload !== 'function') {
                window.location.reload = jest.fn();
              }
            }
            consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();
            _context7.n = 1;
            return navigation.handleLogout();
          case 1:
            expect(consoleErrorSpy).toHaveBeenCalledWith('Logout failed:', error);
            expect(global.showNotification).toHaveBeenCalledWith('ログアウトに失敗しました', 'error');
            consoleErrorSpy.mockRestore();
            consoleWarnSpy.mockRestore();

            // 元のlocationを復元
            window.location = originalLocation;
          case 2:
            return _context7.a(2);
        }
      }, _callee7);
    })));
  });
  describe('updateNavigationForAuth', function () {
    test('should update navigation for authenticated user', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
      var navigation, _require7, authManager;
      return _regenerator().w(function (_context8) {
        while (1) switch (_context8.n) {
          case 0:
            navigation = new _Navigation.Navigation();
            _context8.n = 1;
            return navigation.updateNavigationForAuth();
          case 1:
            _require7 = require('../../js/modules/authManager.js'), authManager = _require7.authManager;
            expect(authManager.isAuthenticated).toHaveBeenCalled();
          case 2:
            return _context8.a(2);
        }
      }, _callee8);
    })));
    test('should update navigation for unauthenticated user', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {
      var navigation, _require8, authManager;
      return _regenerator().w(function (_context9) {
        while (1) switch (_context9.n) {
          case 0:
            navigation = new _Navigation.Navigation();
            _require8 = require('../../js/modules/authManager.js'), authManager = _require8.authManager;
            authManager.isAuthenticated = jest.fn().mockResolvedValue(false);
            _context9.n = 1;
            return navigation.updateNavigationForAuth();
          case 1:
            expect(authManager.isAuthenticated).toHaveBeenCalled();
          case 2:
            return _context9.a(2);
        }
      }, _callee9);
    })));
  });
  describe('addEventListener', function () {
    test('should add event listener to element', function () {
      var navigation = new _Navigation.Navigation();
      var element = mockElement;
      var event = 'click';
      var handler = jest.fn();
      navigation.addEventListener(element, event, handler);
      expect(element.addEventListener).toHaveBeenCalledWith(event, handler);
    });
    test('should not add listener if element is null', function () {
      var navigation = new _Navigation.Navigation();
      var handler = jest.fn();
      navigation.addEventListener(null, 'click', handler);

      // エラーが発生しないことを確認
      expect(true).toBe(true);
    });
  });
  describe('setupTooltips', function () {
    test('should setup tooltips for navigation elements', function () {
      var navigation = new _Navigation.Navigation();
      var _require9 = require('../../js/utils/TooltipManager.js'),
        tooltipManager = _require9.tooltipManager;

      // デスクトップサイドバーのモックを設定
      var mockSidebar = {
        querySelectorAll: jest.fn(function () {
          return [];
        })
      };
      document.getElementById = jest.fn().mockReturnValue(mockSidebar);
      navigation.setupTooltips();
      expect(tooltipManager.addDynamicTooltip).toHaveBeenCalled();
    });
  });
  describe('destroy', function () {
    test('should destroy navigation', function () {
      var navigation = new _Navigation.Navigation();
      navigation.isInitialized = true;
      navigation.destroy();
      expect(navigation.isInitialized).toBe(false);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJhdXRoTWFuYWdlciIsImlzQXV0aGVudGljYXRlZCIsImplc3QiLCJmbiIsImdldEN1cnJlbnRVc2VyIiwibG9nb3V0Iiwic2hvd05vdGlmaWNhdGlvbiIsInRvb2x0aXBNYW5hZ2VyIiwiaW5pdGlhbGl6ZSIsImFkZFRvb2x0aXAiLCJhZGREeW5hbWljVG9vbHRpcCIsIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9OYXZpZ2F0aW9uIiwicmVxdWlyZSIsIl9qc2RvbU5hdmlnYXRpb25GaXgiLCJfcmVnZW5lcmF0b3IiLCJlIiwidCIsInIiLCJuIiwidG9TdHJpbmdUYWciLCJpIiwiYyIsIkdlbmVyYXRvciIsInUiLCJPYmplY3QiLCJjcmVhdGUiLCJfcmVnZW5lcmF0b3JEZWZpbmUyIiwiZiIsInAiLCJ5IiwiRyIsInYiLCJhIiwiZCIsImJpbmQiLCJsZW5ndGgiLCJsIiwiVHlwZUVycm9yIiwiY2FsbCIsImRvbmUiLCJ2YWx1ZSIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiZGlzcGxheU5hbWUiLCJ3IiwibSIsImRlZmluZVByb3BlcnR5IiwiX3JlZ2VuZXJhdG9yRGVmaW5lIiwiX2ludm9rZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFzeW5jR2VuZXJhdG9yU3RlcCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsIl9hc3luY1RvR2VuZXJhdG9yIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJfbmV4dCIsIl90aHJvdyIsIm93bktleXMiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwicHVzaCIsIl9vYmplY3RTcHJlYWQiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJfdG9Qcm9wZXJ0eUtleSIsIl90b1ByaW1pdGl2ZSIsInRvUHJpbWl0aXZlIiwiU3RyaW5nIiwiTnVtYmVyIiwiX3JlcXVpcmUwIiwibW9ja0F1dGhNYW5hZ2VyIiwibW9ja0VsZW1lbnQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJzZXR1cEpTRE9NTmF2aWdhdGlvbkZpeCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2xpY2siLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJjb250YWlucyIsInRvZ2dsZSIsInN0eWxlIiwidGV4dENvbnRlbnQiLCJpbm5lckhUTUwiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwic2V0QXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJtb2NrUmV0dXJuVmFsdWUiLCJlbWFpbCIsIl9yZXF1aXJlIiwiX3JlcXVpcmUyIiwiZ2xvYmFsIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZGlzcGxheSIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwidGVzdCIsIm5hdmlnYXRpb24iLCJOYXZpZ2F0aW9uIiwiZXhwZWN0IiwiaXNJbml0aWFsaXplZCIsInRvQmUiLCJuYXZpZ2F0aW9uSXRlbXMiLCJ0b0JlRGVmaW5lZCIsImN1cnJlbnRQYWdlIiwiZ2V0Q3VycmVudFBhZ2UiLCJleHBlY3RlZFBhZ2UiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwic3BsaXQiLCJwb3AiLCJyZXBsYWNlIiwiX2NhbGxlZSIsImNvbnNvbGVTcHkiLCJfY29udGV4dCIsInNweU9uIiwiY29uc29sZSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwibW9ja1Jlc3RvcmUiLCJfY2FsbGVlMiIsImNvbnNvbGVTcHkxIiwiY29uc29sZVNweTIiLCJfY29udGV4dDIiLCJub3QiLCJfY2FsbGVlMyIsIl9yZXF1aXJlMyIsIl9jb250ZXh0MyIsIm1vY2tSZWplY3RlZFZhbHVlIiwiRXJyb3IiLCJyZWplY3RzIiwidG9UaHJvdyIsImhlYWRlckhUTUwiLCJnZW5lcmF0ZUJhc2ljSGVhZGVyIiwidG9Db250YWluIiwic2lkZWJhckhUTUwiLCJnZW5lcmF0ZUJhc2ljU2lkZWJhciIsIm1vY2tNb2JpbGVTaWRlYmFyIiwidG9nZ2xlTW9iaWxlU2lkZWJhciIsImNsb3NlTW9iaWxlU2lkZWJhciIsIl9jYWxsZWU0IiwibmF2TGluayIsImV2ZW50IiwiX2NvbnRleHQ0IiwicHJldmVudERlZmF1bHQiLCJoYW5kbGVOYXZpZ2F0aW9uQ2xpY2siLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX2NhbGxlZTUiLCJfcmVxdWlyZTQiLCJfY29udGV4dDUiLCJzdG9wUHJvcGFnYXRpb24iLCJfY2FsbGVlNiIsIm9yaWdpbmFsTG9jYXRpb24iLCJjb25zb2xlV2FyblNweSIsIl9yZXF1aXJlNSIsIl9jb250ZXh0NiIsImhyZWYiLCJhc3NpZ24iLCJyZWxvYWQiLCJoYW5kbGVMb2dvdXQiLCJfY2FsbGVlNyIsImVycm9yIiwiX3JlcXVpcmU2IiwiY29uc29sZUVycm9yU3B5IiwiX2NvbnRleHQ3IiwiX2NhbGxlZTgiLCJfcmVxdWlyZTciLCJfY29udGV4dDgiLCJ1cGRhdGVOYXZpZ2F0aW9uRm9yQXV0aCIsIl9jYWxsZWU5IiwiX3JlcXVpcmU4IiwiX2NvbnRleHQ5IiwiZWxlbWVudCIsImhhbmRsZXIiLCJfcmVxdWlyZTkiLCJtb2NrU2lkZWJhciIsInNldHVwVG9vbHRpcHMiLCJkZXN0cm95Il0sInNvdXJjZXMiOlsiTmF2aWdhdGlvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRlc3RzL3VuaXQvTmF2aWdhdGlvbi50ZXN0LmpzIC0gTmF2aWdhdGlvbiDjgrPjg7Pjg53jg7zjg43jg7Pjg4jjga7jg4bjgrnjg4hcblxuaW1wb3J0IHsgTmF2aWdhdGlvbiB9IGZyb20gJy4uLy4uL2pzL2NvbXBvbmVudHMvTmF2aWdhdGlvbi5qcyc7XG5pbXBvcnQgeyBzZXR1cEpTRE9NTmF2aWdhdGlvbkZpeCB9IGZyb20gJy4uL3V0aWxzL2pzZG9tLW5hdmlnYXRpb24tZml4LmpzJztcblxuLy8g44Oi44OD44Kv44Gu6Kit5a6aXG5sZXQgbW9ja0F1dGhNYW5hZ2VyO1xubGV0IG1vY2tFbGVtZW50O1xuXG4vLyBhdXRoTWFuYWdlcuODouOCuOODpeODvOODq+OCkuODouODg+OCr1xuamVzdC5tb2NrKCcuLi8uLi9qcy9tb2R1bGVzL2F1dGhNYW5hZ2VyLmpzJywgKCkgPT4gKHtcbiAgYXV0aE1hbmFnZXI6IHtcbiAgICBpc0F1dGhlbnRpY2F0ZWQ6IGplc3QuZm4oKSxcbiAgICBnZXRDdXJyZW50VXNlcjogamVzdC5mbigpLFxuICAgIGxvZ291dDogamVzdC5mbigpLFxuICB9LFxufSkpO1xuXG4vLyBzaG93Tm90aWZpY2F0aW9u44KS44Oi44OD44KvXG5qZXN0Lm1vY2soJy4uLy4uL2pzL3V0aWxzL2hlbHBlcnMuanMnLCAoKSA9PiAoe1xuICBzaG93Tm90aWZpY2F0aW9uOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIHRvb2x0aXBNYW5hZ2Vy44KS44Oi44OD44KvXG5qZXN0Lm1vY2soJy4uLy4uL2pzL3V0aWxzL1Rvb2x0aXBNYW5hZ2VyLmpzJywgKCkgPT4gKHtcbiAgdG9vbHRpcE1hbmFnZXI6IHtcbiAgICBpbml0aWFsaXplOiBqZXN0LmZuKCksXG4gICAgYWRkVG9vbHRpcDogamVzdC5mbigpLFxuICAgIGFkZER5bmFtaWNUb29sdGlwOiBqZXN0LmZuKCksXG4gIH0sXG59KSk7XG5cbmRlc2NyaWJlKCdOYXZpZ2F0aW9uJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAvLyBKU0RPTeODiuODk+OCsuODvOOCt+ODp+ODs+S/ruato+OCkumBqeeUqFxuICAgIHNldHVwSlNET01OYXZpZ2F0aW9uRml4KCk7XG5cbiAgICAvLyBET03opoHntKDjga7jg6Ljg4Pjgq/oqK3lrppcbiAgICBtb2NrRWxlbWVudCA9IHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIGNsaWNrOiBqZXN0LmZuKCksXG4gICAgICBjbGFzc0xpc3Q6IHtcbiAgICAgICAgYWRkOiBqZXN0LmZuKCksXG4gICAgICAgIHJlbW92ZTogamVzdC5mbigpLFxuICAgICAgICBjb250YWluczogamVzdC5mbigpLFxuICAgICAgICB0b2dnbGU6IGplc3QuZm4oKSxcbiAgICAgIH0sXG4gICAgICBzdHlsZToge30sXG4gICAgICB0ZXh0Q29udGVudDogJycsXG4gICAgICBpbm5lckhUTUw6ICcnLFxuICAgICAgaW5zZXJ0QWRqYWNlbnRIVE1MOiBqZXN0LmZuKCksXG4gICAgICBhcHBlbmRDaGlsZDogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlQ2hpbGQ6IGplc3QuZm4oKSxcbiAgICAgIHNldEF0dHJpYnV0ZTogamVzdC5mbigpLFxuICAgICAgZ2V0QXR0cmlidXRlOiBqZXN0LmZuKCksXG4gICAgfTtcblxuICAgIC8vIOODouODg+OCr+OBruioreWumlxuICAgIG1vY2tBdXRoTWFuYWdlciA9IHtcbiAgICAgIGlzQXV0aGVudGljYXRlZDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxuICAgICAgZ2V0Q3VycmVudFVzZXI6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoeyBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nIH0pLFxuICAgICAgbG9nb3V0OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoKSxcbiAgICB9O1xuXG4gICAgLy8g44Oi44OD44Kv44GV44KM44GfYXV0aE1hbmFnZXLjgpLoqK3lrppcbiAgICBjb25zdCB7IGF1dGhNYW5hZ2VyIH0gPSByZXF1aXJlKCcuLi8uLi9qcy9tb2R1bGVzL2F1dGhNYW5hZ2VyLmpzJyk7XG4gICAgYXV0aE1hbmFnZXIuaXNBdXRoZW50aWNhdGVkID0gbW9ja0F1dGhNYW5hZ2VyLmlzQXV0aGVudGljYXRlZDtcbiAgICBhdXRoTWFuYWdlci5nZXRDdXJyZW50VXNlciA9IG1vY2tBdXRoTWFuYWdlci5nZXRDdXJyZW50VXNlcjtcbiAgICBhdXRoTWFuYWdlci5sb2dvdXQgPSBtb2NrQXV0aE1hbmFnZXIubG9nb3V0O1xuXG4gICAgLy8gc2hvd05vdGlmaWNhdGlvbuOBruODouODg+OCr+OCkuioreWumlxuICAgIGNvbnN0IHsgc2hvd05vdGlmaWNhdGlvbiB9ID0gcmVxdWlyZSgnLi4vLi4vanMvdXRpbHMvaGVscGVycy5qcycpO1xuICAgIGdsb2JhbC5zaG93Tm90aWZpY2F0aW9uID0gc2hvd05vdGlmaWNhdGlvbjtcblxuICAgIC8vIHdpbmRvdy5sb2NhdGlvbiDjga8gc2V0dXAuanMg44Gn6Kit5a6a5riI44G/XG5cbiAgICAvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCDjga7jg6Ljg4Pjgq9cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCA9IGplc3QuZm4oKGlkKSA9PiB7XG4gICAgICBpZiAoaWQgPT09ICdtb2JpbGUtc2lkZWJhcicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5tb2NrRWxlbWVudCxcbiAgICAgICAgICBjbGFzc0xpc3Q6IHtcbiAgICAgICAgICAgIC4uLm1vY2tFbGVtZW50LmNsYXNzTGlzdCxcbiAgICAgICAgICAgIGNvbnRhaW5zOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKGZhbHNlKSxcbiAgICAgICAgICAgIGFkZDogamVzdC5mbigpLFxuICAgICAgICAgICAgcmVtb3ZlOiBqZXN0LmZuKCksXG4gICAgICAgICAgICB0b2dnbGU6IGplc3QuZm4oKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKGlkID09PSAndXNlci1pbmZvJykge1xuICAgICAgICByZXR1cm4geyAuLi5tb2NrRWxlbWVudCwgc3R5bGU6IHsgZGlzcGxheTogJ25vbmUnIH0gfTtcbiAgICAgIH1cbiAgICAgIGlmIChpZCA9PT0gJ2xvZ291dC1idG4nKSB7XG4gICAgICAgIHJldHVybiB7IC4uLm1vY2tFbGVtZW50LCBzdHlsZTogeyBkaXNwbGF5OiAnbm9uZScgfSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1vY2tFbGVtZW50O1xuICAgIH0pO1xuXG4gICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvciDjga7jg6Ljg4Pjgq9cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yID0gamVzdC5mbigoKSA9PiBtb2NrRWxlbWVudCk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCA9IGplc3QuZm4oKCkgPT4gW21vY2tFbGVtZW50XSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdjb25zdHJ1Y3RvcicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIGRlZmF1bHQgdmFsdWVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgbmF2aWdhdGlvbiA9IG5ldyBOYXZpZ2F0aW9uKCk7XG4gICAgICBleHBlY3QobmF2aWdhdGlvbi5pc0luaXRpYWxpemVkKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChuYXZpZ2F0aW9uLm5hdmlnYXRpb25JdGVtcykudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldEN1cnJlbnRQYWdlJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCByZXR1cm4gY3VycmVudCBwYWdlIGZyb20gVVJMJywgKCkgPT4ge1xuICAgICAgY29uc3QgbmF2aWdhdGlvbiA9IG5ldyBOYXZpZ2F0aW9uKCk7XG5cbiAgICAgIC8vIGdldEN1cnJlbnRQYWdl44Oh44K944OD44OJ44KS55u05o6l44OG44K544OI44GZ44KL44Gf44KB44Gr44CB5YaF6YOo5a6f6KOF44KS56K66KqNXG4gICAgICAvLyDlrp/pmpvjga53aW5kb3cubG9jYXRpb24ucGF0aG5hbWXjgpLkvb/nlKjjgZfjgabjg4bjgrnjg4hcbiAgICAgIGNvbnN0IGN1cnJlbnRQYWdlID0gbmF2aWdhdGlvbi5nZXRDdXJyZW50UGFnZSgpO1xuXG4gICAgICAvLyDnj77lnKjjga7jg5Hjgrnjgavln7rjgaXjgYTjgabmnJ/lvoXlgKTjgpLoqK3lrppcbiAgICAgIGNvbnN0IGV4cGVjdGVkUGFnZSA9XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgnLycpLnBvcCgpLnJlcGxhY2UoJy5odG1sJywgJycpIHx8XG4gICAgICAgICdpbmRleCc7XG4gICAgICBleHBlY3QoY3VycmVudFBhZ2UpLnRvQmUoZXhwZWN0ZWRQYWdlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCByZXR1cm4gaW5kZXggZm9yIHJvb3QgcGF0aCcsICgpID0+IHtcbiAgICAgIGNvbnN0IG5hdmlnYXRpb24gPSBuZXcgTmF2aWdhdGlvbigpO1xuXG4gICAgICAvLyDnj77lnKjjga7jg5Hjgrnjgavln7rjgaXjgYTjgabjg4bjgrnjg4hcbiAgICAgIGNvbnN0IGN1cnJlbnRQYWdlID0gbmF2aWdhdGlvbi5nZXRDdXJyZW50UGFnZSgpO1xuXG4gICAgICAvLyDnj77lnKjjga7jg5HjgrnjgYzjg6vjg7zjg4jjgb7jgZ/jga9pbmRleC5odG1s44Gu5aC05ZCIXG4gICAgICBjb25zdCBleHBlY3RlZFBhZ2UgPVxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgPT09ICcvJyB8fFxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgPT09ICcvaW5kZXguaHRtbCdcbiAgICAgICAgICA/ICdpbmRleCdcbiAgICAgICAgICA6IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgnLycpLnBvcCgpLnJlcGxhY2UoJy5odG1sJywgJycpIHx8XG4gICAgICAgICAgICAnaW5kZXgnO1xuICAgICAgZXhwZWN0KGN1cnJlbnRQYWdlKS50b0JlKGV4cGVjdGVkUGFnZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpbml0aWFsaXplJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBpbml0aWFsaXplIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG5hdmlnYXRpb24gPSBuZXcgTmF2aWdhdGlvbigpO1xuICAgICAgY29uc3QgY29uc29sZVNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ2xvZycpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgICBhd2FpdCBuYXZpZ2F0aW9uLmluaXRpYWxpemUoKTtcblxuICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCfwn5SEIEluaXRpYWxpemluZyBuYXZpZ2F0aW9uLi4uJyk7XG4gICAgICBleHBlY3QobmF2aWdhdGlvbi5pc0luaXRpYWxpemVkKS50b0JlKHRydWUpO1xuICAgICAgY29uc29sZVNweS5tb2NrUmVzdG9yZSgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIG5vdCBpbml0aWFsaXplIGlmIGFscmVhZHkgaW5pdGlhbGl6ZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBuYXZpZ2F0aW9uID0gbmV3IE5hdmlnYXRpb24oKTtcblxuICAgICAgLy8gMeWbnuebruOBruWIneacn+WMllxuICAgICAgY29uc3QgY29uc29sZVNweTEgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdsb2cnKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcbiAgICAgIGF3YWl0IG5hdmlnYXRpb24uaW5pdGlhbGl6ZSgpO1xuICAgICAgZXhwZWN0KGNvbnNvbGVTcHkxKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgn8J+UhCBJbml0aWFsaXppbmcgbmF2aWdhdGlvbi4uLicpO1xuICAgICAgY29uc29sZVNweTEubW9ja1Jlc3RvcmUoKTtcblxuICAgICAgLy8gMuWbnuebruOBruWIneacn+WMluOBp+OBr+ODreOCsOOBjOWHuuWKm+OBleOCjOOBquOBhOOBk+OBqOOCkueiuuiqjVxuICAgICAgY29uc3QgY29uc29sZVNweTIgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdsb2cnKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcbiAgICAgIGF3YWl0IG5hdmlnYXRpb24uaW5pdGlhbGl6ZSgpO1xuXG4gICAgICAvLyDliJ3mnJ/ljJbjg63jgrDjgYwy5Zue55uu44Gr5Ye65Yqb44GV44KM44Gq44GE44GT44Go44KS56K66KqNXG4gICAgICBleHBlY3QoY29uc29sZVNweTIpLm5vdC50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJ/CflIQgSW5pdGlhbGl6aW5nIG5hdmlnYXRpb24uLi4nXG4gICAgICApO1xuICAgICAgY29uc29sZVNweTIubW9ja1Jlc3RvcmUoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgaW5pdGlhbGl6YXRpb24gZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbmF2aWdhdGlvbiA9IG5ldyBOYXZpZ2F0aW9uKCk7XG5cbiAgICAgIC8vIGF1dGhNYW5hZ2Vy44KS54Sh5Yq544Gr44GX44Gm44Ko44Op44O844KS55m655Sf44GV44Gb44KLXG4gICAgICBjb25zdCB7IGF1dGhNYW5hZ2VyIH0gPSByZXF1aXJlKCcuLi8uLi9qcy9tb2R1bGVzL2F1dGhNYW5hZ2VyLmpzJyk7XG4gICAgICBhdXRoTWFuYWdlci5pc0F1dGhlbnRpY2F0ZWQgPSBqZXN0XG4gICAgICAgIC5mbigpXG4gICAgICAgIC5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0F1dGggZXJyb3InKSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChuYXZpZ2F0aW9uLmluaXRpYWxpemUoKSkucmVqZWN0cy50b1Rocm93KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZW5lcmF0ZUJhc2ljSGVhZGVyJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBnZW5lcmF0ZSBoZWFkZXIgSFRNTCcsICgpID0+IHtcbiAgICAgIGNvbnN0IG5hdmlnYXRpb24gPSBuZXcgTmF2aWdhdGlvbigpO1xuICAgICAgY29uc3QgaGVhZGVySFRNTCA9IG5hdmlnYXRpb24uZ2VuZXJhdGVCYXNpY0hlYWRlcigpO1xuXG4gICAgICBleHBlY3QoaGVhZGVySFRNTCkudG9Db250YWluKCdoZWFkZXInKTtcbiAgICAgIGV4cGVjdChoZWFkZXJIVE1MKS50b0NvbnRhaW4oJ011c2NsZVJvdGF0aW9uTWFuYWdlcicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2VuZXJhdGVCYXNpY1NpZGViYXInLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGdlbmVyYXRlIHNpZGViYXIgSFRNTCcsICgpID0+IHtcbiAgICAgIGNvbnN0IG5hdmlnYXRpb24gPSBuZXcgTmF2aWdhdGlvbigpO1xuICAgICAgY29uc3Qgc2lkZWJhckhUTUwgPSBuYXZpZ2F0aW9uLmdlbmVyYXRlQmFzaWNTaWRlYmFyKCk7XG5cbiAgICAgIGV4cGVjdChzaWRlYmFySFRNTCkudG9Db250YWluKCdzaWRlYmFyJyk7XG4gICAgICBleHBlY3Qoc2lkZWJhckhUTUwpLnRvQ29udGFpbignbmF2Jyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd0b2dnbGVNb2JpbGVTaWRlYmFyJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCB0b2dnbGUgbW9iaWxlIHNpZGViYXIgdmlzaWJpbGl0eScsICgpID0+IHtcbiAgICAgIGNvbnN0IG5hdmlnYXRpb24gPSBuZXcgTmF2aWdhdGlvbigpO1xuXG4gICAgICAvLyDjg6Ljg5DjgqTjg6vjgrXjgqTjg4njg5Djg7zjga7jg6Ljg4Pjgq/jgpLoqK3lrppcbiAgICAgIGNvbnN0IG1vY2tNb2JpbGVTaWRlYmFyID0ge1xuICAgICAgICBjbGFzc0xpc3Q6IHtcbiAgICAgICAgICB0b2dnbGU6IGplc3QuZm4oKSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShtb2NrTW9iaWxlU2lkZWJhcik7XG5cbiAgICAgIG5hdmlnYXRpb24udG9nZ2xlTW9iaWxlU2lkZWJhcigpO1xuXG4gICAgICBleHBlY3QobW9ja01vYmlsZVNpZGViYXIuY2xhc3NMaXN0LnRvZ2dsZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2hpZGRlbicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY2xvc2VNb2JpbGVTaWRlYmFyJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBjbG9zZSBtb2JpbGUgc2lkZWJhcicsICgpID0+IHtcbiAgICAgIGNvbnN0IG5hdmlnYXRpb24gPSBuZXcgTmF2aWdhdGlvbigpO1xuXG4gICAgICAvLyDjg6Ljg5DjgqTjg6vjgrXjgqTjg4njg5Djg7zjga7jg6Ljg4Pjgq/jgpLoqK3lrppcbiAgICAgIGNvbnN0IG1vY2tNb2JpbGVTaWRlYmFyID0ge1xuICAgICAgICBjbGFzc0xpc3Q6IHtcbiAgICAgICAgICBhZGQ6IGplc3QuZm4oKSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShtb2NrTW9iaWxlU2lkZWJhcik7XG5cbiAgICAgIG5hdmlnYXRpb24uY2xvc2VNb2JpbGVTaWRlYmFyKCk7XG5cbiAgICAgIGV4cGVjdChtb2NrTW9iaWxlU2lkZWJhci5jbGFzc0xpc3QuYWRkKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnaGlkZGVuJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdoYW5kbGVOYXZpZ2F0aW9uQ2xpY2snLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBuYXZpZ2F0aW9uIGNsaWNrIGZvciBhdXRoZW50aWNhdGVkIHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBuYXZpZ2F0aW9uID0gbmV3IE5hdmlnYXRpb24oKTtcbiAgICAgIGNvbnN0IG5hdkxpbmsgPSB7XG4gICAgICAgIGdldEF0dHJpYnV0ZTogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgnL2Rhc2hib2FyZC5odG1sJyksXG4gICAgICAgIHByZXZlbnREZWZhdWx0OiBqZXN0LmZuKCksXG4gICAgICB9O1xuICAgICAgY29uc3QgZXZlbnQgPSB7IHByZXZlbnREZWZhdWx0OiBqZXN0LmZuKCkgfTtcblxuICAgICAgYXdhaXQgbmF2aWdhdGlvbi5oYW5kbGVOYXZpZ2F0aW9uQ2xpY2sobmF2TGluaywgZXZlbnQpO1xuXG4gICAgICBleHBlY3QoZXZlbnQucHJldmVudERlZmF1bHQpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcHJldmVudCBuYXZpZ2F0aW9uIGZvciB1bmF1dGhlbnRpY2F0ZWQgdXNlcicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG5hdmlnYXRpb24gPSBuZXcgTmF2aWdhdGlvbigpO1xuICAgICAgY29uc3QgbmF2TGluayA9IHtcbiAgICAgICAgZ2V0QXR0cmlidXRlOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKCcvZGFzaGJvYXJkLmh0bWwnKSxcbiAgICAgICAgcHJldmVudERlZmF1bHQ6IGplc3QuZm4oKSxcbiAgICAgIH07XG4gICAgICBjb25zdCBldmVudCA9IHtcbiAgICAgICAgcHJldmVudERlZmF1bHQ6IGplc3QuZm4oKSxcbiAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiBqZXN0LmZuKCksXG4gICAgICB9O1xuXG4gICAgICAvLyDoqo3oqLzjgZXjgozjgabjgYTjgarjgYTnirbmhYvjgpLjg6Ljg4Pjgq9cbiAgICAgIGNvbnN0IHsgYXV0aE1hbmFnZXIgfSA9IHJlcXVpcmUoJy4uLy4uL2pzL21vZHVsZXMvYXV0aE1hbmFnZXIuanMnKTtcbiAgICAgIGF1dGhNYW5hZ2VyLmlzQXV0aGVudGljYXRlZCA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShmYWxzZSk7XG5cbiAgICAgIGF3YWl0IG5hdmlnYXRpb24uaGFuZGxlTmF2aWdhdGlvbkNsaWNrKG5hdkxpbmssIGV2ZW50KTtcblxuICAgICAgZXhwZWN0KGV2ZW50LnByZXZlbnREZWZhdWx0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QoZ2xvYmFsLnNob3dOb3RpZmljYXRpb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAn44Ot44Kw44Kk44Oz44GM5b+F6KaB44Gn44GZJyxcbiAgICAgICAgJ3dhcm5pbmcnXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnaGFuZGxlTG9nb3V0JywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbG9nb3V0IHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG5hdmlnYXRpb24gPSBuZXcgTmF2aWdhdGlvbigpO1xuXG4gICAgICAvLyB3aW5kb3cubG9jYXRpb24uaHJlZuOCkuODouODg+OCr++8iEpTRE9N44Ko44Op44O844KS5Zue6YG/77yJXG4gICAgICBjb25zdCBvcmlnaW5hbExvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG4gICAgICAvLyBKU0RPTeOBruWItumZkOOCkuWbnumBv+OBmeOCi+OBn+OCgeOAgeWuieWFqOOBquODouODg+OCr+aWueazleOCkuS9v+eUqFxuICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbikge1xuICAgICAgICAvLyBocmVm44Gv6Kit5a6a5Y+v6IO9XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJyc7XG5cbiAgICAgICAgLy8g44Oh44K944OD44OJ44GM5pei44Gr5a2Y5Zyo44GZ44KL5aC05ZCI44Gv44K544Kt44OD44OXXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93LmxvY2F0aW9uLmFzc2lnbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24gPSBqZXN0LmZuKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlID0gamVzdC5mbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93LmxvY2F0aW9uLnJlbG9hZCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQgPSBqZXN0LmZuKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gY29uc29sZS53YXJu44KS44Oi44OD44Kv44GX44GmSlNET03jgqjjg6njg7zjgpLmipHliLZcbiAgICAgIGNvbnN0IGNvbnNvbGVXYXJuU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnd2FybicpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgICBhd2FpdCBuYXZpZ2F0aW9uLmhhbmRsZUxvZ291dCgpO1xuXG4gICAgICBjb25zdCB7IGF1dGhNYW5hZ2VyIH0gPSByZXF1aXJlKCcuLi8uLi9qcy9tb2R1bGVzL2F1dGhNYW5hZ2VyLmpzJyk7XG4gICAgICBleHBlY3QoYXV0aE1hbmFnZXIubG9nb3V0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QoZ2xvYmFsLnNob3dOb3RpZmljYXRpb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAn44Ot44Kw44Ki44Km44OI44GX44G+44GX44GfJyxcbiAgICAgICAgJ3N1Y2Nlc3MnXG4gICAgICApO1xuXG4gICAgICBjb25zb2xlV2FyblNweS5tb2NrUmVzdG9yZSgpO1xuXG4gICAgICAvLyDlhYPjga5sb2NhdGlvbuOCkuW+qeWFg1xuICAgICAgd2luZG93LmxvY2F0aW9uID0gb3JpZ2luYWxMb2NhdGlvbjtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbG9nb3V0IGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG5hdmlnYXRpb24gPSBuZXcgTmF2aWdhdGlvbigpO1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ0xvZ291dCBmYWlsZWQnKTtcbiAgICAgIGNvbnN0IHsgYXV0aE1hbmFnZXIgfSA9IHJlcXVpcmUoJy4uLy4uL2pzL21vZHVsZXMvYXV0aE1hbmFnZXIuanMnKTtcbiAgICAgIGF1dGhNYW5hZ2VyLmxvZ291dCA9IGplc3QuZm4oKS5tb2NrUmVqZWN0ZWRWYWx1ZShlcnJvcik7XG5cbiAgICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5ocmVm44KS44Oi44OD44Kv77yISlNET03jgqjjg6njg7zjgpLlm57pgb/vvIlcbiAgICAgIGNvbnN0IG9yaWdpbmFsTG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbiAgICAgIC8vIEpTRE9N44Gu5Yi26ZmQ44KS5Zue6YG/44GZ44KL44Gf44KB44CB5a6J5YWo44Gq44Oi44OD44Kv5pa55rOV44KS5L2/55SoXG4gICAgICBpZiAod2luZG93LmxvY2F0aW9uKSB7XG4gICAgICAgIC8vIGhyZWbjga/oqK3lrprlj6/og71cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnJztcblxuICAgICAgICAvLyDjg6Hjgr3jg4Pjg4njgYzml6LjgavlrZjlnKjjgZnjgovloLTlkIjjga/jgrnjgq3jg4Pjg5dcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cubG9jYXRpb24uYXNzaWduICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbiA9IGplc3QuZm4oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UgPSBqZXN0LmZuKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cubG9jYXRpb24ucmVsb2FkICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCA9IGplc3QuZm4oKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb25zb2xlRXJyb3JTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuICAgICAgY29uc3QgY29uc29sZVdhcm5TcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICd3YXJuJykubW9ja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICAgIGF3YWl0IG5hdmlnYXRpb24uaGFuZGxlTG9nb3V0KCk7XG5cbiAgICAgIGV4cGVjdChjb25zb2xlRXJyb3JTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdMb2dvdXQgZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIGV4cGVjdChnbG9iYWwuc2hvd05vdGlmaWNhdGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICfjg63jgrDjgqLjgqbjg4jjgavlpLHmlZfjgZfjgb7jgZfjgZ8nLFxuICAgICAgICAnZXJyb3InXG4gICAgICApO1xuXG4gICAgICBjb25zb2xlRXJyb3JTcHkubW9ja1Jlc3RvcmUoKTtcbiAgICAgIGNvbnNvbGVXYXJuU3B5Lm1vY2tSZXN0b3JlKCk7XG5cbiAgICAgIC8vIOWFg+OBrmxvY2F0aW9u44KS5b6p5YWDXG4gICAgICB3aW5kb3cubG9jYXRpb24gPSBvcmlnaW5hbExvY2F0aW9uO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgndXBkYXRlTmF2aWdhdGlvbkZvckF1dGgnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHVwZGF0ZSBuYXZpZ2F0aW9uIGZvciBhdXRoZW50aWNhdGVkIHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBuYXZpZ2F0aW9uID0gbmV3IE5hdmlnYXRpb24oKTtcblxuICAgICAgYXdhaXQgbmF2aWdhdGlvbi51cGRhdGVOYXZpZ2F0aW9uRm9yQXV0aCgpO1xuXG4gICAgICBjb25zdCB7IGF1dGhNYW5hZ2VyIH0gPSByZXF1aXJlKCcuLi8uLi9qcy9tb2R1bGVzL2F1dGhNYW5hZ2VyLmpzJyk7XG4gICAgICBleHBlY3QoYXV0aE1hbmFnZXIuaXNBdXRoZW50aWNhdGVkKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgdXBkYXRlIG5hdmlnYXRpb24gZm9yIHVuYXV0aGVudGljYXRlZCB1c2VyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbmF2aWdhdGlvbiA9IG5ldyBOYXZpZ2F0aW9uKCk7XG4gICAgICBjb25zdCB7IGF1dGhNYW5hZ2VyIH0gPSByZXF1aXJlKCcuLi8uLi9qcy9tb2R1bGVzL2F1dGhNYW5hZ2VyLmpzJyk7XG4gICAgICBhdXRoTWFuYWdlci5pc0F1dGhlbnRpY2F0ZWQgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoZmFsc2UpO1xuXG4gICAgICBhd2FpdCBuYXZpZ2F0aW9uLnVwZGF0ZU5hdmlnYXRpb25Gb3JBdXRoKCk7XG5cbiAgICAgIGV4cGVjdChhdXRoTWFuYWdlci5pc0F1dGhlbnRpY2F0ZWQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2FkZEV2ZW50TGlzdGVuZXInLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGFkZCBldmVudCBsaXN0ZW5lciB0byBlbGVtZW50JywgKCkgPT4ge1xuICAgICAgY29uc3QgbmF2aWdhdGlvbiA9IG5ldyBOYXZpZ2F0aW9uKCk7XG4gICAgICBjb25zdCBlbGVtZW50ID0gbW9ja0VsZW1lbnQ7XG4gICAgICBjb25zdCBldmVudCA9ICdjbGljayc7XG4gICAgICBjb25zdCBoYW5kbGVyID0gamVzdC5mbigpO1xuXG4gICAgICBuYXZpZ2F0aW9uLmFkZEV2ZW50TGlzdGVuZXIoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIpO1xuXG4gICAgICBleHBlY3QoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChldmVudCwgaGFuZGxlcik7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgbm90IGFkZCBsaXN0ZW5lciBpZiBlbGVtZW50IGlzIG51bGwnLCAoKSA9PiB7XG4gICAgICBjb25zdCBuYXZpZ2F0aW9uID0gbmV3IE5hdmlnYXRpb24oKTtcbiAgICAgIGNvbnN0IGhhbmRsZXIgPSBqZXN0LmZuKCk7XG5cbiAgICAgIG5hdmlnYXRpb24uYWRkRXZlbnRMaXN0ZW5lcihudWxsLCAnY2xpY2snLCBoYW5kbGVyKTtcblxuICAgICAgLy8g44Ko44Op44O844GM55m655Sf44GX44Gq44GE44GT44Go44KS56K66KqNXG4gICAgICBleHBlY3QodHJ1ZSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3NldHVwVG9vbHRpcHMnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHNldHVwIHRvb2x0aXBzIGZvciBuYXZpZ2F0aW9uIGVsZW1lbnRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgbmF2aWdhdGlvbiA9IG5ldyBOYXZpZ2F0aW9uKCk7XG4gICAgICBjb25zdCB7IHRvb2x0aXBNYW5hZ2VyIH0gPSByZXF1aXJlKCcuLi8uLi9qcy91dGlscy9Ub29sdGlwTWFuYWdlci5qcycpO1xuXG4gICAgICAvLyDjg4fjgrnjgq/jg4jjg4Pjg5fjgrXjgqTjg4njg5Djg7zjga7jg6Ljg4Pjgq/jgpLoqK3lrppcbiAgICAgIGNvbnN0IG1vY2tTaWRlYmFyID0ge1xuICAgICAgICBxdWVyeVNlbGVjdG9yQWxsOiBqZXN0LmZuKCgpID0+IFtdKSxcbiAgICAgIH07XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUobW9ja1NpZGViYXIpO1xuXG4gICAgICBuYXZpZ2F0aW9uLnNldHVwVG9vbHRpcHMoKTtcblxuICAgICAgZXhwZWN0KHRvb2x0aXBNYW5hZ2VyLmFkZER5bmFtaWNUb29sdGlwKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBkZXN0cm95IG5hdmlnYXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBuYXZpZ2F0aW9uID0gbmV3IE5hdmlnYXRpb24oKTtcbiAgICAgIG5hdmlnYXRpb24uaXNJbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgIG5hdmlnYXRpb24uZGVzdHJveSgpO1xuXG4gICAgICBleHBlY3QobmF2aWdhdGlvbi5pc0luaXRpYWxpemVkKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFTQTtBQUNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxpQ0FBaUMsRUFBRTtFQUFBLE9BQU87SUFDbERDLFdBQVcsRUFBRTtNQUNYQyxlQUFlLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDMUJDLGNBQWMsRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUN6QkUsTUFBTSxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUNsQjtFQUNGLENBQUM7QUFBQSxDQUFDLENBQUM7O0FBRUg7QUFDQUwsV0FBQSxHQUFLQyxJQUFJLENBQUMsMkJBQTJCLEVBQUU7RUFBQSxPQUFPO0lBQzVDTyxnQkFBZ0IsRUFBRUosSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDNUIsQ0FBQztBQUFBLENBQUMsQ0FBQzs7QUFFSDtBQUNBTCxXQUFBLEdBQUtDLElBQUksQ0FBQyxrQ0FBa0MsRUFBRTtFQUFBLE9BQU87SUFDbkRRLGNBQWMsRUFBRTtNQUNkQyxVQUFVLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDckJNLFVBQVUsRUFBRVAsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNyQk8saUJBQWlCLEVBQUVSLElBQUksQ0FBQ0MsRUFBRSxD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