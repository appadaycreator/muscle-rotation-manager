c0b97627e6acd3df3e03827d922a19bf
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _supabaseService = require("./supabaseService.js");
var _constants = require("../utils/constants.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // recommendationService.js - 科学的根拠に基づく推奨アルゴリズム
/**
 * 推奨アルゴリズムサービス
 * 科学的根拠に基づいた筋肉部位推奨システム
 */
var RecommendationService = /*#__PURE__*/function () {
  function RecommendationService() {
    _classCallCheck(this, RecommendationService);
    this.userSettings = this.loadUserSettings();
  }

  /**
   * ユーザー設定を読み込み
   * @returns {Object} ユーザー設定
   */
  return _createClass(RecommendationService, [{
    key: "loadUserSettings",
    value: function loadUserSettings() {
      var defaultSettings = {
        // 基本設定
        fitnessLevel: 'beginner',
        primaryGoal: 'muscle_gain',
        workoutFrequency: 3,
        // 詳細設定
        experienceMonths: 0,
        recoveryPreference: 'standard',
        sleepHoursPerNight: 7.0,
        stressLevel: 5,
        preferredWorkoutTime: '18:00',
        preferredWorkoutDuration: 60,
        // 旧設定（互換性のため）
        preferredIntensity: 'moderate',
        trainingFrequency: 3,
        restDayPreference: 'sunday'
      };
      try {
        // 新しい設定を優先的に読み込み
        var userProfile = JSON.parse(localStorage.getItem('userProfile') || '{}');
        var legacySettings = JSON.parse(localStorage.getItem('userFitnessSettings') || '{}');

        // 新しい設定項目をマッピング
        var mappedSettings = _objectSpread(_objectSpread(_objectSpread({}, defaultSettings), legacySettings), {}, {
          // 新しい設定項目
          fitnessLevel: userProfile.fitness_level || defaultSettings.fitnessLevel,
          primaryGoal: userProfile.primary_goal || defaultSettings.primaryGoal,
          workoutFrequency: userProfile.workout_frequency || defaultSettings.workoutFrequency,
          experienceMonths: userProfile.experience_months || defaultSettings.experienceMonths,
          recoveryPreference: userProfile.recovery_preference || defaultSettings.recoveryPreference,
          sleepHoursPerNight: userProfile.sleep_hours_per_night || defaultSettings.sleepHoursPerNight,
          stressLevel: userProfile.stress_level || defaultSettings.stressLevel,
          preferredWorkoutTime: userProfile.preferred_workout_time || defaultSettings.preferredWorkoutTime,
          preferredWorkoutDuration: userProfile.preferred_workout_duration || defaultSettings.preferredWorkoutDuration
        });
        return mappedSettings;
      } catch (error) {
        console.warn('ユーザー設定の読み込みに失敗:', error);
        return defaultSettings;
      }
    }

    /**
     * 筋肉回復度を計算
     * @param {Date} lastWorkoutDate - 最後のワークアウト日
     * @param {string} muscleGroupId - 筋肉部位ID
     * @param {string} lastIntensity - 前回の強度
     * @returns {Object} 回復度情報
     */
  }, {
    key: "calculateRecoveryPercentage",
    value: function calculateRecoveryPercentage(lastWorkoutDate, muscleGroupId) {
      var lastIntensity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'moderate';
      if (!lastWorkoutDate) {
        return {
          percentage: 100,
          status: 'fully_recovered',
          hoursUntilRecovery: 0,
          isReady: true
        };
      }
      var muscleGroup = _constants.MUSCLE_GROUPS.find(function (mg) {
        return mg.id === muscleGroupId;
      });
      if (!muscleGroup) {
        throw new Error("\u7B4B\u8089\u90E8\u4F4D\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093: ".concat(muscleGroupId));
      }

      // 基本回復時間を取得
      var baseRecoveryHours = muscleGroup.recoveryHours;

      // 強度による調整
      var intensityMultiplier = _constants.INTENSITY_MULTIPLIERS[lastIntensity] || 1.0;

      // 体力レベルによる調整
      var fitnessMultiplier = _constants.FITNESS_LEVEL_MULTIPLIERS[this.userSettings.fitnessLevel] || 1.0;

      // 回復設定による調整
      var recoveryMultiplier = this.getRecoveryMultiplier();

      // ライフスタイル要因による調整
      var lifestyleMultiplier = this.getLifestyleMultiplier();

      // 調整後の回復時間
      var adjustedRecoveryHours = baseRecoveryHours * intensityMultiplier * fitnessMultiplier * recoveryMultiplier * lifestyleMultiplier;

      // 経過時間を計算
      var now = new Date();
      var timeDiff = now - new Date(lastWorkoutDate);
      var hoursElapsed = timeDiff / (1000 * 60 * 60);

      // 回復度を計算
      var recoveryPercentage = Math.min(100, Math.round(hoursElapsed / adjustedRecoveryHours * 100));
      var hoursUntilRecovery = Math.max(0, adjustedRecoveryHours - hoursElapsed);
      var status;
      if (recoveryPercentage >= 100) {
        status = 'fully_recovered';
      } else if (recoveryPercentage >= 80) {
        status = 'mostly_recovered';
      } else if (recoveryPercentage >= 50) {
        status = 'partially_recovered';
      } else {
        status = 'still_recovering';
      }
      return {
        percentage: recoveryPercentage,
        status: status,
        hoursUntilRecovery: Math.round(hoursUntilRecovery * 10) / 10,
        isReady: recoveryPercentage >= 80,
        // 80%以上で推奨対象
        adjustedRecoveryHours: Math.round(adjustedRecoveryHours * 10) / 10,
        factors: {
          baseHours: baseRecoveryHours,
          intensityMultiplier: intensityMultiplier,
          fitnessMultiplier: fitnessMultiplier,
          lastIntensity: lastIntensity
        }
      };
    }

    /**
     * 筋肉回復データを取得
     * @returns {Promise<Array>} 筋肉回復データ配列
     */
  }, {
    key: "getMuscleRecoveryData",
    value: (function () {
      var _getMuscleRecoveryData = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
        var _this = this;
        var workoutHistory, result, localHistory, recoveryData, _t;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.p = _context.n) {
            case 0:
              _context.p = 0;
              // Supabaseからワークアウト履歴を取得
              workoutHistory = [];
              if (!(_supabaseService.supabaseService.isAvailable() && _supabaseService.supabaseService.getCurrentUser())) {
                _context.n = 2;
                break;
              }
              _context.n = 1;
              return _supabaseService.supabaseService.getWorkouts(30);
            case 1:
              result = _context.v;
              // 過去30件
              // データが配列でない場合は空配列にフォールバック
              workoutHistory = Array.isArray(result) ? result : [];
              _context.n = 3;
              break;
            case 2:
              // オフライン時はローカルストレージから取得
              localHistory = localStorage.getItem('workoutHistory');
              workoutHistory = localHistory ? JSON.parse(localHistory) : [];
            case 3:
              // ワークアウト履歴が配列でない場合は空配列にフォールバック
              if (!Array.isArray(workoutHistory)) {
                console.warn('workoutHistory is not an array, using empty array');
                workoutHistory = [];
              }

              // 各筋肉部位の回復データを計算
              recoveryData = _constants.MUSCLE_GROUPS.map(function (muscle) {
                // 該当部位の最新ワークアウトを検索
                var lastWorkout = _this.findLastWorkoutForMuscle(workoutHistory, muscle.id);
                var recoveryInfo = {
                  percentage: 100,
                  status: 'fully_recovered',
                  hoursUntilRecovery: 0,
                  isReady: true
                };
                var lastTrained = 'なし';
                var nextRecommended = '今すぐ';
                if (lastWorkout) {
                  recoveryInfo = _this.calculateRecoveryPercentage(lastWorkout.date, muscle.id, lastWorkout.intensity || 'moderate');
                  lastTrained = _this.formatLastTrainedDate(lastWorkout.date);
                  nextRecommended = _this.formatNextRecommendedTime(recoveryInfo.hoursUntilRecovery);
                }
                return _objectSpread(_objectSpread({}, muscle), {}, {
                  lastTrained: lastTrained,
                  recovery: recoveryInfo.percentage,
                  recoveryStatus: recoveryInfo.status,
                  hoursUntilRecovery: recoveryInfo.hoursUntilRecovery,
                  nextRecommended: nextRecommended,
                  isReady: recoveryInfo.isReady,
                  recoveryColor: _this.getRecoveryColor(recoveryInfo.percentage),
                  recoveryClass: _this.getRecoveryClass(recoveryInfo.percentage),
                  lastWorkout: lastWorkout,
                  recoveryFactors: recoveryInfo.factors
                });
              });
              return _context.a(2, recoveryData);
            case 4:
              _context.p = 4;
              _t = _context.v;
              console.error('筋肉回復データの取得に失敗:', _t);
              // フォールバック: 基本的な回復データを返す
              return _context.a(2, _constants.MUSCLE_GROUPS.map(function (muscle) {
                return _objectSpread(_objectSpread({}, muscle), {}, {
                  lastTrained: 'なし',
                  recovery: 100,
                  recoveryStatus: 'fully_recovered',
                  hoursUntilRecovery: 0,
                  nextRecommended: '今すぐ',
                  isReady: true,
                  recoveryColor: _this.getRecoveryColor(100),
                  recoveryClass: _this.getRecoveryClass(100),
                  lastWorkout: null,
                  recoveryFactors: null
                });
              }));
          }
        }, _callee, null, [[0, 4]]);
      }));
      function getMuscleRecoveryData() {
        return _getMuscleRecoveryData.apply(this, arguments);
      }
      return getMuscleRecoveryData;
    }()
    /**
     * 特定筋肉部位の最新ワークアウトを検索
     * @param {Array} workoutHistory - ワークアウト履歴
     * @param {string} muscleId - 筋肉部位ID
     * @returns {Object|null} 最新ワークアウト
     */
    )
  }, {
    key: "findLastWorkoutForMuscle",
    value: function findLastWorkoutForMuscle(workoutHistory, muscleId) {
      // ワークアウト履歴が配列でない場合はnullを返す
      if (!Array.isArray(workoutHistory)) {
        return null;
      }

      // ワークアウト履歴を日付順にソート（新しい順）
      var sortedHistory = workoutHistory.filter(function (workout) {
        // 筋肉部位のチェック（複数のフィールドに対応）
        var muscleGroups = workout.muscle_groups_trained || workout.muscleGroups || [];
        return Array.isArray(muscleGroups) && muscleGroups.includes(muscleId);
      }).sort(function (a, b) {
        var dateA = new Date(a.date || a.workout_date || a.startTime);
        var dateB = new Date(b.date || b.workout_date || b.startTime);
        return dateB - dateA;
      });
      return sortedHistory.length > 0 ? _objectSpread(_objectSpread({}, sortedHistory[0]), {}, {
        date: sortedHistory[0].date || sortedHistory[0].workout_date || sortedHistory[0].startTime
      }) : null;
    }

    /**
     * 推奨部位を取得
     * @returns {Promise<Array>} 推奨事項配列
     */
  }, {
    key: "getRecommendations",
    value: (function () {
      var _getRecommendations = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
        var recoveryData, readyMuscles, prioritizedMuscles, recommendations, _t2;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.p = _context2.n) {
            case 0:
              _context2.p = 0;
              _context2.n = 1;
              return this.getMuscleRecoveryData();
            case 1:
              recoveryData = _context2.v;
              // 推奨対象の部位を抽出（回復度80%以上）
              readyMuscles = recoveryData.filter(function (muscle) {
                return muscle.isReady;
              }); // 優先度でソート
              prioritizedMuscles = this.prioritizeMuscles(readyMuscles, recoveryData); // 推奨メッセージを生成
              recommendations = this.generateRecommendationMessages(prioritizedMuscles, recoveryData);
              return _context2.a(2, recommendations);
            case 2:
              _context2.p = 2;
              _t2 = _context2.v;
              console.error('推奨事項の取得に失敗:', _t2);
              return _context2.a(2, this.getFallbackRecommendations());
          }
        }, _callee2, this, [[0, 2]]);
      }));
      function getRecommendations() {
        return _getRecommendations.apply(this, arguments);
      }
      return getRecommendations;
    }()
    /**
     * 筋肉部位の優先度付け
     * @param {Array} readyMuscles - 回復済み筋肉部位
     * @param {Array} allMuscles - 全筋肉部位データ
     * @returns {Array} 優先度付きリスト
     */
    )
  }, {
    key: "prioritizeMuscles",
    value: function prioritizeMuscles(readyMuscles) {
      var _this2 = this;
      return readyMuscles.map(function (muscle) {
        var priority = 0;

        // 回復度による優先度（100%回復は高優先度）
        priority += muscle.recovery;

        // 最後のトレーニングからの経過時間による優先度
        if (muscle.lastWorkout) {
          var daysSinceLastWorkout = _this2.getDaysSinceLastWorkout(muscle.lastWorkout.date);
          priority += Math.min(daysSinceLastWorkout * 10, 50); // 最大50ポイント
        } else {
          priority += 100; // 未トレーニング部位は最高優先度
        }

        // 大筋群は優先度を上げる
        if (muscle.category === 'large') {
          priority += 20;
        }
        return _objectSpread(_objectSpread({}, muscle), {}, {
          priority: Math.round(priority)
        });
      }).sort(function (a, b) {
        return b.priority - a.priority;
      });
    }

    /**
     * 推奨メッセージを生成
     * @param {Array} prioritizedMuscles - 優先度付き筋肉部位
     * @param {Array} allMuscles - 全筋肉部位データ
     * @returns {Array} 推奨メッセージ配列
     */
  }, {
    key: "generateRecommendationMessages",
    value: function generateRecommendationMessages(prioritizedMuscles) {
      var recommendations = [];
      if (prioritizedMuscles.length === 0) {
        recommendations.push({
          message: '全ての部位が回復中です。休息日をお勧めします',
          bgColor: 'bg-gray-50',
          dotColor: 'bg-gray-500',
          textColor: 'text-gray-700',
          type: 'rest',
          scientificBasis: '筋肉の成長には適切な休息が必要です'
        });
        return recommendations;
      }

      // トップ推奨部位
      var topMuscle = prioritizedMuscles[0];
      recommendations.push({
        message: "\u4ECA\u65E5\u306F".concat(topMuscle.name, "\u306E\u30C8\u30EC\u30FC\u30CB\u30F3\u30B0\u304C\u6700\u9069\u3067\u3059"),
        bgColor: topMuscle.bgColor,
        dotColor: topMuscle.iconColor.replace('text-', 'bg-'),
        textColor: topMuscle.textColor,
        type: 'primary',
        muscleId: topMuscle.id,
        scientificBasis: topMuscle.scientificBasis,
        priority: topMuscle.priority,
        recoveryPercentage: topMuscle.recovery
      });

      // 回復度情報
      if (topMuscle.recovery === 100) {
        recommendations.push({
          message: "".concat(topMuscle.name, "\u306F\u5B8C\u5168\u56DE\u5FA9\u6E08\u307F\uFF08").concat(topMuscle.recovery, "%\uFF09"),
          bgColor: 'bg-green-50',
          dotColor: 'bg-green-500',
          textColor: 'text-green-700',
          type: 'recovery_status',
          scientificBasis: '完全回復により最大のトレーニング効果が期待できます'
        });
      } else if (topMuscle.recovery >= 80) {
        recommendations.push({
          message: "".concat(topMuscle.name, "\u306F\u5341\u5206\u56DE\u5FA9\u6E08\u307F\uFF08").concat(topMuscle.recovery, "%\uFF09"),
          bgColor: 'bg-blue-50',
          dotColor: 'bg-blue-500',
          textColor: 'text-blue-700',
          type: 'recovery_status',
          scientificBasis: '80%以上の回復で効果的なトレーニングが可能です'
        });
      }

      // セカンダリ推奨（複数部位トレーニングの提案）
      if (prioritizedMuscles.length > 1) {
        var secondaryMuscle = prioritizedMuscles[1];
        recommendations.push({
          message: "".concat(secondaryMuscle.name, "\u3082\u4F75\u305B\u3066\u30C8\u30EC\u30FC\u30CB\u30F3\u30B0\u53EF\u80FD\u3067\u3059"),
          bgColor: 'bg-purple-50',
          dotColor: 'bg-purple-500',
          textColor: 'text-purple-700',
          type: 'secondary',
          muscleId: secondaryMuscle.id,
          scientificBasis: '複数部位の同時トレーニングで効率性向上'
        });
      }

      // 体力レベルに応じたアドバイス
      var fitnessAdvice = this.getFitnessLevelAdvice();
      if (fitnessAdvice) {
        recommendations.push(fitnessAdvice);
      }

      // 目標に基づくアドバイス
      var goalAdvice = this.getGoalBasedAdvice();
      if (goalAdvice) {
        recommendations.push(goalAdvice);
      }

      // 頻度に基づくアドバイス
      var frequencyAdvice = this.getFrequencyAdvice();
      if (frequencyAdvice) {
        recommendations.push(frequencyAdvice);
      }
      return recommendations;
    }

    /**
     * 体力レベルに応じたアドバイスを取得
     * @returns {Object|null} アドバイス
     */
  }, {
    key: "getFitnessLevelAdvice",
    value: function getFitnessLevelAdvice() {
      var level = this.userSettings.fitnessLevel;
      var adviceMap = {
        beginner: {
          message: '初心者の方は週2-3回のトレーニングから始めましょう',
          bgColor: 'bg-yellow-50',
          dotColor: 'bg-yellow-500',
          textColor: 'text-yellow-700',
          type: 'fitness_advice',
          scientificBasis: '初心者は神経系の適応と基礎体力向上が優先されます'
        },
        intermediate: {
          message: '中級者は週3-4回のバランス良いトレーニングが効果的です',
          bgColor: 'bg-indigo-50',
          dotColor: 'bg-indigo-500',
          textColor: 'text-indigo-700',
          type: 'fitness_advice',
          scientificBasis: '中級者は筋肥大と筋力向上のバランスが重要です'
        },
        advanced: {
          message: '上級者は高強度トレーニングと適切な回復のバランスを重視しましょう',
          bgColor: 'bg-red-50',
          dotColor: 'bg-red-500',
          textColor: 'text-red-700',
          type: 'fitness_advice',
          scientificBasis: '上級者は高強度刺激と十分な回復時間が成長の鍵です'
        }
      };
      return adviceMap[level] || null;
    }

    /**
     * 目標に基づくアドバイスを取得
     * @returns {Object|null} アドバイス
     */
  }, {
    key: "getGoalBasedAdvice",
    value: function getGoalBasedAdvice() {
      var goal = this.userSettings.primaryGoal;
      var recommendedIntensity = this.getRecommendedIntensity();
      var adviceMap = {
        strength: {
          message: "\u7B4B\u529B\u5411\u4E0A\u304C\u76EE\u6A19\u3067\u3059\u3002".concat(recommendedIntensity === 'high' ? '高強度' : '中強度', "\u30C8\u30EC\u30FC\u30CB\u30F3\u30B0\u3092\u5FC3\u304C\u3051\u307E\u3057\u3087\u3046"),
          bgColor: 'bg-red-50',
          dotColor: 'bg-red-500',
          textColor: 'text-red-700',
          type: 'goal_advice',
          scientificBasis: '筋力向上には高負荷・低回数のトレーニングが効果的です'
        },
        muscle_gain: {
          message: '筋肥大が目標です。中強度で適切なボリュームを確保しましょう',
          bgColor: 'bg-blue-50',
          dotColor: 'bg-blue-500',
          textColor: 'text-blue-700',
          type: 'goal_advice',
          scientificBasis: '筋肥大には中負荷・中回数でのボリューム確保が重要です'
        },
        endurance: {
          message: '持久力向上が目標です。低強度・高回数を意識しましょう',
          bgColor: 'bg-green-50',
          dotColor: 'bg-green-500',
          textColor: 'text-green-700',
          type: 'goal_advice',
          scientificBasis: '筋持久力向上には低負荷・高回数のトレーニングが適しています'
        },
        weight_loss: {
          message: '減量が目標です。中強度で代謝を高めるトレーニングを行いましょう',
          bgColor: 'bg-orange-50',
          dotColor: 'bg-orange-500',
          textColor: 'text-orange-700',
          type: 'goal_advice',
          scientificBasis: '減量には筋トレと有酸素運動の組み合わせが効果的です'
        },
        general_fitness: {
          message: '健康維持が目標です。無理のない範囲で継続しましょう',
          bgColor: 'bg-teal-50',
          dotColor: 'bg-teal-500',
          textColor: 'text-teal-700',
          type: 'goal_advice',
          scientificBasis: '健康維持には継続性が最も重要な要素です'
        }
      };
      return adviceMap[goal] || null;
    }

    /**
     * 頻度に基づくアドバイスを取得
     * @returns {Object|null} アドバイス
     */
  }, {
    key: "getFrequencyAdvice",
    value: function getFrequencyAdvice() {
      var currentFrequency = this.userSettings.workoutFrequency;
      var recommendedFrequency = this.getRecommendedFrequency();
      if (currentFrequency < recommendedFrequency) {
        return {
          message: "\u73FE\u5728\u306E\u983B\u5EA6\uFF08\u9031".concat(currentFrequency, "\u56DE\uFF09\u3088\u308A\u3001\u9031").concat(recommendedFrequency, "\u56DE\u304C\u304A\u3059\u3059\u3081\u3067\u3059"),
          bgColor: 'bg-amber-50',
          dotColor: 'bg-amber-500',
          textColor: 'text-amber-700',
          type: 'frequency_advice',
          scientificBasis: '適切な頻度でのトレーニングが効果を最大化します'
        };
      } else if (currentFrequency > recommendedFrequency + 1) {
        return {
          message: "\u73FE\u5728\u306E\u983B\u5EA6\uFF08\u9031".concat(currentFrequency, "\u56DE\uFF09\u306F\u9AD8\u3081\u3067\u3059\u3002\u56DE\u5FA9\u306B\u6CE8\u610F\u3057\u307E\u3057\u3087\u3046"),
          bgColor: 'bg-rose-50',
          dotColor: 'bg-rose-500',
          textColor: 'text-rose-700',
          type: 'frequency_advice',
          scientificBasis: '過度な頻度はオーバートレーニングのリスクがあります'
        };
      }
      return null;
    }

    /**
     * フォールバック推奨事項
     * @returns {Array} デフォルト推奨事項
     */
  }, {
    key: "getFallbackRecommendations",
    value: function getFallbackRecommendations() {
      return [{
        message: '今日は胸筋のトレーニングがおすすめです',
        bgColor: 'bg-blue-50',
        dotColor: 'bg-blue-500',
        textColor: 'text-blue-700',
        type: 'fallback',
        scientificBasis: '大筋群から始めることで全身の成長を促進できます'
      }];
    }

    /**
     * 最後のトレーニング日をフォーマット
     * @param {string|Date} date - 日付
     * @returns {string} フォーマット済み文字列
     */
  }, {
    key: "formatLastTrainedDate",
    value: function formatLastTrainedDate(date) {
      if (!date) {
        return 'なし';
      }
      var workoutDate = new Date(date);
      var now = new Date();
      var diffTime = now - workoutDate;
      var diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
      if (diffDays === 0) {
        return '今日';
      }
      if (diffDays === 1) {
        return '昨日';
      }
      if (diffDays < 7) {
        return "".concat(diffDays, "\u65E5\u524D");
      }
      if (diffDays < 30) {
        return "".concat(Math.floor(diffDays / 7), "\u9031\u9593\u524D");
      }
      return "".concat(Math.floor(diffDays / 30), "\u30F6\u6708\u524D");
    }

    /**
     * 次回推奨時間をフォーマット
     * @param {number} hoursUntilRecovery - 回復までの時間
     * @returns {string} フォーマット済み文字列
     */
  }, {
    key: "formatNextRecommendedTime",
    value: function formatNextRecommendedTime(hoursUntilRecovery) {
      if (hoursUntilRecovery <= 0) {
        return '今すぐ';
      }
      if (hoursUntilRecovery < 24) {
        return "".concat(Math.round(hoursUntilRecovery), "\u6642\u9593\u5F8C");
      }
      var days = Math.floor(hoursUntilRecovery / 24);
      var hours = Math.round(hoursUntilRecovery % 24);
      if (hours === 0) {
        return "".concat(days, "\u65E5\u5F8C");
      }
      return "".concat(days, "\u65E5").concat(hours, "\u6642\u9593\u5F8C");
    }

    /**
     * 最後のワークアウトからの経過日数を取得
     * @param {string|Date} date - 日付
     * @returns {number} 経過日数
     */
  }, {
    key: "getDaysSinceLastWorkout",
    value: function getDaysSinceLastWorkout(date) {
      if (!date) {
        return 999;
      }
      var workoutDate = new Date(date);
      var now = new Date();
      var diffTime = now - workoutDate;
      return Math.floor(diffTime / (1000 * 60 * 60 * 24));
    }

    /**
     * 回復度に応じた色を取得
     * @param {number} percentage - 回復度
     * @returns {string} CSSクラス
     */
  }, {
    key: "getRecoveryColor",
    value: function getRecoveryColor(percentage) {
      if (percentage >= 100) {
        return 'text-green-600';
      }
      if (percentage >= 80) {
        return 'text-blue-600';
      }
      if (percentage >= 50) {
        return 'text-yellow-600';
      }
      return 'text-red-600';
    }

    /**
     * 回復度に応じたバークラスを取得
     * @param {number} percentage - 回復度
     * @returns {string} CSSクラス
     */
  }, {
    key: "getRecoveryClass",
    value: function getRecoveryClass(percentage) {
      if (percentage >= 100) {
        return 'bg-green-500';
      }
      if (percentage >= 80) {
        return 'bg-blue-500';
      }
      if (percentage >= 50) {
        return 'bg-yellow-500';
      }
      return 'bg-red-500';
    }

    /**
     * 回復設定による倍率を取得
     * @returns {number} 回復倍率
     */
  }, {
    key: "getRecoveryMultiplier",
    value: function getRecoveryMultiplier() {
      var recoveryMultipliers = {
        fast: 0.8,
        // 20%短縮
        standard: 1.0,
        // 標準
        slow: 1.3 // 30%延長
      };
      return recoveryMultipliers[this.userSettings.recoveryPreference] || 1.0;
    }

    /**
     * ライフスタイル要因による倍率を取得
     * @returns {number} ライフスタイル倍率
     */
  }, {
    key: "getLifestyleMultiplier",
    value: function getLifestyleMultiplier() {
      var multiplier = 1.0;

      // 睡眠時間による調整
      var sleepHours = this.userSettings.sleepHoursPerNight;
      if (sleepHours < 6) {
        multiplier *= 1.2; // 睡眠不足は回復を遅らせる
      } else if (sleepHours >= 8) {
        multiplier *= 0.9; // 十分な睡眠は回復を促進
      }

      // ストレスレベルによる調整
      var stressLevel = this.userSettings.stressLevel;
      if (stressLevel >= 8) {
        multiplier *= 1.15; // 高ストレスは回復を遅らせる
      } else if (stressLevel <= 3) {
        multiplier *= 0.95; // 低ストレスは回復を促進
      }
      return multiplier;
    }

    /**
     * 目標に基づく推奨強度を取得
     * @returns {string} 推奨強度
     */
  }, {
    key: "getRecommendedIntensity",
    value: function getRecommendedIntensity() {
      var intensityMap = {
        strength: 'high',
        // 筋力向上は高強度
        muscle_gain: 'moderate',
        // 筋肥大は中強度
        endurance: 'low',
        // 持久力は低強度
        weight_loss: 'moderate',
        // 減量は中強度
        general_fitness: 'low' // 健康維持は低強度
      };
      return intensityMap[this.userSettings.primaryGoal] || 'moderate';
    }

    /**
     * 体力レベルに基づく推奨頻度を取得
     * @returns {number} 推奨週間頻度
     */
  }, {
    key: "getRecommendedFrequency",
    value: function getRecommendedFrequency() {
      var frequencyMap = {
        beginner: 2,
        // 初心者は週2回
        intermediate: 3,
        // 中級者は週3回
        advanced: 4 // 上級者は週4回
      };
      return frequencyMap[this.userSettings.fitnessLevel] || 3;
    }

    /**
     * ユーザー設定を更新
     * @param {Object} newSettings - 新しい設定
     */
  }, {
    key: "updateUserSettings",
    value: function updateUserSettings(newSettings) {
      this.userSettings = _objectSpread(_objectSpread({}, this.userSettings), newSettings);

      // 新しい設定形式で保存
      var userProfile = JSON.parse(localStorage.getItem('userProfile') || '{}');
      var updatedProfile = _objectSpread(_objectSpread({}, userProfile), {}, {
        fitness_level: newSettings.fitnessLevel || this.userSettings.fitnessLevel,
        primary_goal: newSettings.primaryGoal || this.userSettings.primaryGoal,
        workout_frequency: newSettings.workoutFrequency || this.userSettings.workoutFrequency,
        recovery_preference: newSettings.recoveryPreference || this.userSettings.recoveryPreference,
        sleep_hours_per_night: newSettings.sleepHoursPerNight || this.userSettings.sleepHoursPerNight,
        stress_level: newSettings.stressLevel || this.userSettings.stressLevel
      });
      localStorage.setItem('userProfile', JSON.stringify(updatedProfile));

      // 互換性のため旧形式も保存
      localStorage.setItem('userFitnessSettings', JSON.stringify(this.userSettings));
    }

    /**
     * 推奨理由の詳細を取得
     * @param {string} muscleId - 筋肉部位ID
     * @returns {Object} 詳細情報
     */
  }, {
    key: "getRecommendationDetails",
    value: function getRecommendationDetails(muscleId) {
      var muscle = _constants.MUSCLE_GROUPS.find(function (mg) {
        return mg.id === muscleId;
      });
      if (!muscle) {
        return null;
      }
      var recoveryScience = _constants.RECOVERY_SCIENCE[muscle.category];
      return {
        muscleName: muscle.name,
        category: muscle.category,
        recoveryHours: muscle.recoveryHours,
        scientificBasis: muscle.scientificBasis,
        recoveryScience: recoveryScience.reason,
        fitnessLevelAdjustment: _constants.FITNESS_LEVEL_MULTIPLIERS[this.userSettings.fitnessLevel],
        userFitnessLevel: this.userSettings.fitnessLevel
      };
    }
  }]);
}(); // シングルトンインスタンスをエクスポート
var _default = exports["default"] = new RecommendationService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,