1a3075edaf7a8ee2b9157c20d62647c5
"use strict";

// モックの設定
_getJestObj().mock('../../js/services/workoutDataService.js', function () {
  return {
    workoutDataService: {
      loadWorkouts: jest.fn()
    }
  };
});
var _progressiveOverloadService = require("../../js/services/progressiveOverloadService.js");
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
} // progressiveOverloadService.test.js - ProgressiveOverloadServiceクラスのテスト
describe('ProgressiveOverloadService', function () {
  var serviceInstance;
  var mockWorkoutDataService;
  beforeEach(function () {
    // モックをリセット
    jest.clearAllMocks();

    // モジュールの取得
    var workoutDataServiceModule = require('../../js/services/workoutDataService.js');
    mockWorkoutDataService = workoutDataServiceModule.workoutDataService;

    // ProgressiveOverloadServiceのインスタンス作成
    serviceInstance = new _progressiveOverloadService.ProgressiveOverloadService();
  });
  describe('constructor', function () {
    test('should initialize with default values', function () {
      expect(serviceInstance.analysisCache).toBeInstanceOf(Map);
      expect(serviceInstance.cacheExpiry).toBe(5 * 60 * 1000); // 5分間
    });
  });
  describe('cache management', function () {
    test('should set and get cached analysis', function () {
      var mockAnalysis = {
        test: 'data'
      };
      var cacheKey = 'test_key';
      serviceInstance.setCachedAnalysis(cacheKey, mockAnalysis);
      var result = serviceInstance.getCachedAnalysis(cacheKey);
      expect(result).toEqual(mockAnalysis);
    });
    test('should return null for expired cache', function () {
      var mockAnalysis = {
        test: 'data'
      };
      var cacheKey = 'test_key';

      // 古いタイムスタンプでキャッシュを設定
      serviceInstance.analysisCache.set(cacheKey, {
        data: mockAnalysis,
        timestamp: Date.now() - (serviceInstance.cacheExpiry + 1000)
      });
      var result = serviceInstance.getCachedAnalysis(cacheKey);
      expect(result).toBeNull();
    });
    test('should return null for non-existent cache', function () {
      var result = serviceInstance.getCachedAnalysis('non_existent_key');
      expect(result).toBeNull();
    });
  });
  describe('clearCache', function () {
    test('should clear all cached analysis', function () {
      serviceInstance.setCachedAnalysis('key1', {
        data: 'test1'
      });
      serviceInstance.setCachedAnalysis('key2', {
        data: 'test2'
      });
      expect(serviceInstance.analysisCache.size).toBe(2);
      serviceInstance.clearCache();
      expect(serviceInstance.analysisCache.size).toBe(0);
    });
  });
  describe('getExerciseProgress', function () {
    test('should return cached analysis if available', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var mockAnalysis, result;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            mockAnalysis = {
              exerciseName: 'ベンチプレス',
              period: 90,
              totalSessions: 10,
              progressMetrics: {},
              volumeProgression: 15,
              intensityProgression: 10,
              recommendations: [],
              trends: {},
              lastUpdated: new Date().toISOString()
            }; // キャッシュにデータを設定
            serviceInstance.setCachedAnalysis('exercise_ベンチプレス_90', mockAnalysis);
            _context.n = 1;
            return serviceInstance.getExerciseProgress('ベンチプレス', 90);
          case 1:
            result = _context.v;
            expect(result).toEqual(mockAnalysis);
            expect(mockWorkoutDataService.loadWorkouts).not.toHaveBeenCalled();
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
    test('should handle analysis error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var error;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            error = new Error('Analysis failed');
            mockWorkoutDataService.loadWorkouts.mockRejectedValue(error);
            _context2.n = 1;
            return expect(serviceInstance.getExerciseProgress('ベンチプレス', 90)).rejects.toThrow('Analysis failed');
          case 1:
            return _context2.a(2);
        }
      }, _callee2);
    })));
  });
  describe('getMuscleGroupProgress', function () {
    test('should return cached analysis if available', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var mockAnalysis, result;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            mockAnalysis = {
              muscleGroup: 'chest',
              period: 90,
              totalSessions: 15,
              frequencyAnalysis: {},
              exercises: {},
              recommendations: [],
              lastUpdated: new Date().toISOString()
            };
            serviceInstance.setCachedAnalysis('muscle_chest_90', mockAnalysis);
            _context3.n = 1;
            return serviceInstance.getMuscleGroupProgress('chest', 90);
          case 1:
            result = _context3.v;
            expect(result).toEqual(mockAnalysis);
            expect(mockWorkoutDataService.loadWorkouts).not.toHaveBeenCalled();
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
  });
  describe('getOverallProgress', function () {
    test('should return cached analysis if available', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var mockAnalysis, result;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            mockAnalysis = {
              period: 90,
              totalWorkouts: 20,
              overallMetrics: {},
              muscleGroupProgress: {},
              consistencyScore: 85,
              recommendations: [],
              lastUpdated: new Date().toISOString()
            };
            serviceInstance.setCachedAnalysis('overall_90', mockAnalysis);
            _context4.n = 1;
            return serviceInstance.getOverallProgress(90);
          case 1:
            result = _context4.v;
            expect(result).toEqual(mockAnalysis);
            expect(mockWorkoutDataService.loadWorkouts).not.toHaveBeenCalled();
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,