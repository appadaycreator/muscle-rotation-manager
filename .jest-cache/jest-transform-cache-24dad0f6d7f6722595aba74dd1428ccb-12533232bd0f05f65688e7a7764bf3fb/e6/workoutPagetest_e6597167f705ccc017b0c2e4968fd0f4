847b5778eaefd475b139992dfa85fdc1
"use strict";

// モック
_getJestObj().mock('../../js/services/exerciseService.js', function () {
  return {
    exerciseService: {
      getExercises: jest.fn().mockResolvedValue([{
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest',
        equipment: 'barbell'
      }, {
        id: '2',
        name: 'スクワット',
        muscle_group: 'legs',
        equipment: 'barbell'
      }])
    }
  };
});
_getJestObj().mock('../../js/services/workoutDataService.js', function () {
  return {
    workoutDataService: {
      saveWorkout: jest.fn().mockResolvedValue({
        success: true
      }),
      getWorkoutHistory: jest.fn().mockResolvedValue([])
    }
  };
});
_getJestObj().mock('../../js/services/supabaseService.js', function () {
  return {
    supabaseService: {
      isAuthenticated: jest.fn().mockReturnValue(true),
      getCurrentUser: jest.fn().mockResolvedValue({
        id: 'user-1'
      })
    }
  };
});
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    safeGetElement: jest.fn(function (id) {
      var mockElement = {
        id: id,
        innerHTML: '',
        appendChild: jest.fn(),
        removeChild: jest.fn()
      };
      return mockElement;
    }),
    showNotification: jest.fn()
  };
});
_getJestObj().mock('../../js/utils/errorHandler.js', function () {
  return {
    handleError: jest.fn()
  };
});
var _workoutPage = require("../../js/pages/workoutPage.js");
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require5 = require("@jest/globals"),
    jest = _require5.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
} // workoutPage.test.js - WorkoutPageクラスのテスト
describe('WorkoutPage', function () {
  var workoutPage;
  var mockContainer;
  beforeEach(function () {
    // DOM要素のモック
    mockContainer = document.createElement('div');
    mockContainer.id = 'main-content';
    document.body.appendChild(mockContainer);

    // WorkoutPageのインスタンスを作成
    workoutPage = new _workoutPage.WorkoutPage();
  });
  afterEach(function () {
    document.body.removeChild(mockContainer);
    jest.clearAllMocks();
  });
  describe('初期化', function () {
    test('should initialize successfully', function () {
      expect(workoutPage).toBeDefined();
      expect(workoutPage.pageName).toBe('WorkoutPage');
    });
    test('should have required properties', function () {
      expect(workoutPage.currentWorkout).toBeDefined();
      expect(workoutPage.exercises).toEqual([]);
      expect(workoutPage.isWorkoutActive).toBe(false);
    });
  });
  describe('エクササイズ読み込み', function () {
    test('should load exercises successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            _context.n = 1;
            return workoutPage.loadExercises();
          case 1:
            expect(workoutPage.exercises).toHaveLength(2);
            expect(workoutPage.exercises[0].name).toBe('ベンチプレス');
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
    test('should handle exercise loading errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var _require, exerciseService, consoleSpy;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            _require = require('../../js/services/exerciseService.js'), exerciseService = _require.exerciseService;
            exerciseService.getExercises.mockRejectedValue(new Error('Test error'));
            consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            _context2.n = 1;
            return workoutPage.loadExercises();
          case 1:
            expect(consoleSpy).toHaveBeenCalled();
            consoleSpy.mockRestore();
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
  });
  describe('ワークアウト管理', function () {
    test('should start workout', function () {
      workoutPage.startWorkout();
      expect(workoutPage.isWorkoutActive).toBe(true);
      expect(workoutPage.currentWorkout.startTime).toBeDefined();
    });
    test('should end workout', function () {
      workoutPage.startWorkout();
      workoutPage.endWorkout();
      expect(workoutPage.isWorkoutActive).toBe(false);
      expect(workoutPage.currentWorkout.endTime).toBeDefined();
    });
    test('should add exercise to workout', function () {
      var exercise = {
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      };
      workoutPage.addExerciseToWorkout(exercise);
      expect(workoutPage.currentWorkout.exercises).toContain(exercise);
    });
    test('should remove exercise from workout', function () {
      var exercise = {
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      };
      workoutPage.addExerciseToWorkout(exercise);
      workoutPage.removeExerciseFromWorkout('1');
      expect(workoutPage.currentWorkout.exercises).toHaveLength(0);
    });
  });
  describe('セット管理', function () {
    test('should add set to exercise', function () {
      var exercise = {
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      };
      workoutPage.addExerciseToWorkout(exercise);
      workoutPage.addSetToExercise('1', {
        weight: 60,
        reps: 10
      });
      var exerciseInWorkout = workoutPage.currentWorkout.exercises.find(function (ex) {
        return ex.id === '1';
      });
      expect(exerciseInWorkout.sets).toHaveLength(1);
      expect(exerciseInWorkout.sets[0].weight).toBe(60);
      expect(exerciseInWorkout.sets[0].reps).toBe(10);
    });
    test('should remove set from exercise', function () {
      var exercise = {
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      };
      workoutPage.addExerciseToWorkout(exercise);
      workoutPage.addSetToExercise('1', {
        weight: 60,
        reps: 10
      });
      workoutPage.addSetToExercise('1', {
        weight: 65,
        reps: 8
      });
      workoutPage.removeSetFromExercise('1', 0);
      var exerciseInWorkout = workoutPage.currentWorkout.exercises.find(function (ex) {
        return ex.id === '1';
      });
      expect(exerciseInWorkout.sets).toHaveLength(1);
      expect(exerciseInWorkout.sets[0].weight).toBe(65);
    });
    test('should update set in exercise', function () {
      var exercise = {
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      };
      workoutPage.addExerciseToWorkout(exercise);
      workoutPage.addSetToExercise('1', {
        weight: 60,
        reps: 10
      });
      workoutPage.updateSetInExercise('1', 0, {
        weight: 65,
        reps: 8
      });
      var exerciseInWorkout = workoutPage.currentWorkout.exercises.find(function (ex) {
        return ex.id === '1';
      });
      expect(exerciseInWorkout.sets[0].weight).toBe(65);
      expect(exerciseInWorkout.sets[0].reps).toBe(8);
    });
  });
  describe('ワークアウト保存', function () {
    test('should save workout successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var _require2, workoutDataService;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            _require2 = require('../../js/services/workoutDataService.js'), workoutDataService = _require2.workoutDataService;
            workoutPage.startWorkout();
            workoutPage.addExerciseToWorkout({
              id: '1',
              name: 'ベンチプレス',
              muscle_group: 'chest'
            });
            workoutPage.addSetToExercise('1', {
              weight: 60,
              reps: 10
            });
            _context3.n = 1;
            return workoutPage.saveWorkout();
          case 1:
            expect(workoutDataService.saveWorkout).toHaveBeenCalled();
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
    test('should handle save workout errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var _require3, workoutDataService, consoleSpy;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            _require3 = require('../../js/services/workoutDataService.js'), workoutDataService = _require3.workoutDataService;
            workoutDataService.saveWorkout.mockRejectedValue(new Error('Save error'));
            consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            workoutPage.startWorkout();
            _context4.n = 1;
            return workoutPage.saveWorkout();
          case 1:
            expect(consoleSpy).toHaveBeenCalled();
            consoleSpy.mockRestore();
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    test('should require authentication for saving', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var _require4, supabaseService, consoleSpy;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            _require4 = require('../../js/services/supabaseService.js'), supabaseService = _require4.supabaseService;
            supabaseService.isAuthenticated.mockReturnValue(false);
            consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            workoutPage.startWorkout();
            _context5.n = 1;
            return workoutPage.saveWorkout();
          case 1:
            expect(consoleSpy).toHaveBeenCalled();
            consoleSpy.mockRestore();
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
  describe('統計計算', function () {
    test('should calculate workout statistics', function () {
      var exercise = {
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      };
      workoutPage.addExerciseToWorkout(exercise);
      workoutPage.addSetToExercise('1', {
        weight: 60,
        reps: 10
      });
      workoutPage.addSetToExercise('1', {
        weight: 65,
        reps: 8
      });
      var stats = workoutPage.calculateWorkoutStats();
      expect(stats.totalSets).toBe(2);
      expect(stats.totalVolume).toBe(600 + 520); // 60*10 + 65*8
      expect(stats.exerciseCount).toBe(1);
    });
    test('should calculate exercise volume', function () {
      var exercise = {
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      };
      workoutPage.addExerciseToWorkout(exercise);
      workoutPage.addSetToExercise('1', {
        weight: 60,
        reps: 10
      });
      workoutPage.addSetToExercise('1', {
        weight: 65,
        reps: 8
      });
      var volume = workoutPage.calculateExerciseVolume('1');
      expect(volume).toBe(600 + 520); // 60*10 + 65*8
    });
  });
  describe('レンダリング', function () {
    test('should render workout interface', function () {
      var container = document.createElement('div');
      container.id = 'workout-interface';
      document.body.appendChild(container);
      workoutPage.renderWorkoutInterface();
      expect(container.innerHTML).toContain('workout');
      document.body.removeChild(container);
    });
    test('should render exercise list', function () {
      var container = document.createElement('div');
      container.id = 'exercise-list';
      document.body.appendChild(container);
      workoutPage.exercises = [{
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      }, {
        id: '2',
        name: 'スクワット',
        muscle_group: 'legs'
      }];
      workoutPage.renderExerciseList();
      expect(container.innerHTML).toContain('ベンチプレス');
      expect(container.innerHTML).toContain('スクワット');
      document.body.removeChild(container);
    });
    test('should render current workout', function () {
      var container = document.createElement('div');
      container.id = 'current-workout';
      document.body.appendChild(container);
      workoutPage.startWorkout();
      workoutPage.addExerciseToWorkout({
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      });
      workoutPage.renderCurrentWorkout();
      expect(container.innerHTML).toContain('ベンチプレス');
      document.body.removeChild(container);
    });
  });
  describe('エラーハンドリング', function () {
    test('should handle rendering errors gracefully', function () {
      var container = document.createElement('div');
      container.id = 'workout-interface';
      document.body.appendChild(container);

      // エラーを発生させる
      workoutPage.renderWorkoutInterface = jest.fn().mockImplementation(function () {
        throw new Error('Render error');
      });
      expect(function () {
        return workoutPage.renderWorkoutInterface();
      }).toThrow('Render error');
      document.body.removeChild(container);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,