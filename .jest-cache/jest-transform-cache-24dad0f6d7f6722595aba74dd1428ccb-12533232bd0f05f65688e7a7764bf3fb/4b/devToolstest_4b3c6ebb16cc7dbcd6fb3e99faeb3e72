d019586514d0b3027d4311b67ed8c38e
"use strict";

var _DevTools = require("../../js/utils/DevTools.js");
// tests/unit/DevTools.test.js - DevToolsのテスト

describe('DevTools', function () {
  var devTools;
  beforeEach(function () {
    devTools = new _DevTools.DevTools();
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  describe('constructor', function () {
    it('should initialize with default values', function () {
      expect(devTools.isInitialized).toBe(false);
      expect(devTools.performanceObserver).toBeNull();
      expect(devTools.errorObserver).toBeNull();
    });
  });
  describe('initialize', function () {
    it('should initialize successfully', function () {
      var result = devTools.initialize();
      expect(result).toBe(true);
      expect(devTools.isInitialized).toBe(true);
    });
    it('should not initialize if already initialized', function () {
      devTools.isInitialized = true;
      var result = devTools.initialize();
      expect(result).toBe(false);
    });
  });
  describe('setupPerformanceMonitoring', function () {
    it('should setup performance monitoring', function () {
      devTools.setupPerformanceMonitoring();
      expect(devTools.performanceObserver).toBeDefined();
    });
  });
  describe('setupErrorTracking', function () {
    it('should setup error tracking', function () {
      devTools.setupErrorTracking();
      expect(devTools.errorObserver).toBeDefined();
    });
  });
  describe('setupNetworkMonitoring', function () {
    it('should setup network monitoring', function () {
      devTools.setupNetworkMonitoring();

      // Network monitoring setup should complete without errors
      expect(devTools.isInitialized).toBe(false); // Not initialized yet
    });
  });
  describe('setupMemoryMonitoring', function () {
    it('should setup memory monitoring', function () {
      devTools.setupMemoryMonitoring();

      // Memory monitoring setup should complete without errors
      expect(devTools.isInitialized).toBe(false); // Not initialized yet
    });
  });
  describe('logPerformance', function () {
    it('should log performance data', function () {
      var performanceData = {
        name: 'test-performance',
        duration: 100,
        startTime: Date.now()
      };
      devTools.logPerformance(performanceData);

      // Should complete without errors
      expect(performanceData.name).toBe('test-performance');
    });
  });
  describe('logError', function () {
    it('should log error data', function () {
      var errorData = {
        message: 'Test error',
        stack: 'Error stack trace',
        timestamp: Date.now()
      };
      devTools.logError(errorData);

      // Should complete without errors
      expect(errorData.message).toBe('Test error');
    });
  });
  describe('logNetwork', function () {
    it('should log network data', function () {
      var networkData = {
        url: 'https://example.com',
        method: 'GET',
        status: 200,
        duration: 150
      };
      devTools.logNetwork(networkData);

      // Should complete without errors
      expect(networkData.url).toBe('https://example.com');
    });
  });
  describe('logMemory', function () {
    it('should log memory data', function () {
      var memoryData = {
        used: 1000000,
        total: 2000000,
        timestamp: Date.now()
      };
      devTools.logMemory(memoryData);

      // Should complete without errors
      expect(memoryData.used).toBe(1000000);
    });
  });
  describe('integration', function () {
    it('should handle complete dev tools setup', function () {
      var result = devTools.initialize();
      expect(result).toBe(true);
      expect(devTools.isInitialized).toBe(true);

      // Test logging
      devTools.logPerformance({
        name: 'test',
        duration: 100
      });
      devTools.logError({
        message: 'test error'
      });
      devTools.logNetwork({
        url: 'https://test.com'
      });
      devTools.logMemory({
        used: 1000,
        total: 2000
      });

      // Should complete without errors
      expect(devTools.isInitialized).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,