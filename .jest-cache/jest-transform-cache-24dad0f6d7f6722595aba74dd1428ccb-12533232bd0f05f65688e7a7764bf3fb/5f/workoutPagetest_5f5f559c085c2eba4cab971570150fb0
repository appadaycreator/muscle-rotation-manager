934252b028d496be920adbd1f9a41686
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _globals = require("@jest/globals");
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, "default": e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } // workoutPage.test.js - WorkoutPageクラスのテスト
// モック設定
var mockBasePage = {
  constructor: _globals.jest.fn(),
  checkAuthentication: _globals.jest.fn(),
  initialize: _globals.jest.fn(),
  onInitialize: _globals.jest.fn()
};
var mockNavigation = {
  initialize: _globals.jest.fn()
};
var mockSupabaseService = {
  getExercises: _globals.jest.fn(),
  getMuscleGroups: _globals.jest.fn()
};
var mockWorkoutDataService = {
  saveWorkout: _globals.jest.fn(),
  loadWorkouts: _globals.jest.fn()
};
var mockAuthManager = {
  showAuthModal: _globals.jest.fn()
};
var mockHelpers = {
  showNotification: _globals.jest.fn(),
  safeGetElement: _globals.jest.fn()
};
var mockTooltipManager = {
  initialize: _globals.jest.fn()
};

// モジュールのモック
_globals.jest.unstable_mockModule('../core/BasePage.js', function () {
  return {
    BasePage: _globals.jest.fn(function () {
      return mockBasePage;
    })
  };
});
_globals.jest.unstable_mockModule('../components/Navigation.js', function () {
  return {
    Navigation: _globals.jest.fn(function () {
      return mockNavigation;
    })
  };
});
_globals.jest.unstable_mockModule('../services/supabaseService.js', function () {
  return {
    supabaseService: mockSupabaseService
  };
});
_globals.jest.unstable_mockModule('../services/workoutDataService.js', function () {
  return {
    workoutDataService: mockWorkoutDataService
  };
});
_globals.jest.unstable_mockModule('../modules/authManager.js', function () {
  return {
    authManager: mockAuthManager
  };
});
_globals.jest.unstable_mockModule('../utils/helpers.js', function () {
  return mockHelpers;
});
_globals.jest.unstable_mockModule('../utils/TooltipManager.js', function () {
  return {
    tooltipManager: mockTooltipManager
  };
});
describe('WorkoutPage', function () {
  var WorkoutPage;
  var workoutPageInstance;
  beforeAll(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
    var module;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          _context.n = 1;
          return Promise.resolve().then(function () {
            return _interopRequireWildcard(require('../../js/pages/workoutPage.js'));
          });
        case 1:
          module = _context.v;
          WorkoutPage = module.WorkoutPage;
        case 2:
          return _context.a(2);
      }
    }, _callee);
  })));
  beforeEach(function () {
    // 各テスト前にインスタンスをリセット
    workoutPageInstance = new WorkoutPage();

    // モックをリセット
    _globals.jest.clearAllMocks();

    // DOM要素のモック
    mockHelpers.safeGetElement.mockImplementation(function (id) {
      var mockElement = {
        innerHTML: '',
        addEventListener: _globals.jest.fn(),
        value: '',
        dataset: {},
        classList: {
          add: _globals.jest.fn(),
          remove: _globals.jest.fn(),
          contains: _globals.jest.fn()
        },
        style: {},
        disabled: false,
        checked: false
      };
      return mockElement;
    });

    // DOM要素のクエリセレクタをモック
    global.document.querySelectorAll = _globals.jest.fn().mockReturnValue([]);
    global.document.getElementById = _globals.jest.fn().mockReturnValue(null);
  });
  describe('constructor', function () {
    test('should initialize with default values', function () {
      expect(workoutPageInstance.currentWorkout).toBeNull();
      expect(workoutPageInstance.workoutTimer).toBeNull();
      expect(workoutPageInstance.workoutStartTime).toBeNull();
      expect(workoutPageInstance.exercises).toEqual([]);
      expect(workoutPageInstance.muscleGroups).toEqual(['胸', '背中', '肩', '腕', '脚', '腹筋']);
      expect(workoutPageInstance.selectedMuscles).toEqual([]);
      expect(workoutPageInstance.selectedExercises).toEqual([]);
      expect(workoutPageInstance.eventListenersSetup).toBe(false);
      expect(workoutPageInstance.muscleGroupCache).toBeInstanceOf(Map);
      expect(workoutPageInstance.currentExercise).toBeNull();
      expect(workoutPageInstance.currentSet).toBe(0);
      expect(workoutPageInstance.setData).toEqual([]);
      expect(workoutPageInstance.restTimer).toBeNull();
      expect(workoutPageInstance.restStartTime).toBeNull();
    });
  });
  describe('checkAuthentication', function () {
    test('should skip authentication check', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var result;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            _context2.n = 1;
            return workoutPageInstance.checkAuthentication();
          case 1:
            result = _context2.v;
            expect(result).toBe(true);
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
  });
  describe('onInitialize', function () {
    test('should initialize workout page', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            mockSupabaseService.getExercises.mockResolvedValue([]);
            mockSupabaseService.getMuscleGroups.mockResolvedValue([]);
            _context3.n = 1;
            return workoutPageInstance.onInitialize();
          case 1:
            expect(mockNavigation.initialize).toHaveBeenCalled();
            expect(mockTooltipManager.initialize).toHaveBeenCalled();
            expect(mockSupabaseService.getExercises).toHaveBeenCalled();
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
    test('should handle authentication failure', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            mockBasePage.checkAuthentication.mockResolvedValue(false);
            _context4.n = 1;
            return workoutPageInstance.onInitialize();
          case 1:
            expect(mockNavigation.initialize).not.toHaveBeenCalled();
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
  });
  describe('showLoginPrompt', function () {
    test('should show login prompt', function () {
      var mockMainContent = {
        innerHTML: ''
      };
      global.document.getElementById = _globals.jest.fn().mockReturnValue(mockMainContent);
      workoutPageInstance.showLoginPrompt();
      expect(mockMainContent.innerHTML).toContain('ログイン');
      expect(mockMainContent.innerHTML).toContain('ワークアウト');
    });
    test('should handle missing main content', function () {
      global.document.getElementById = _globals.jest.fn().mockReturnValue(null);
      expect(function () {
        workoutPageInstance.showLoginPrompt();
      }).not.toThrow();
    });
  });
  describe('loadExerciseData', function () {
    test('should load exercise data successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var mockExercises;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            mockExercises = [{
              id: '1',
              name: 'ベンチプレス',
              muscle_group: 'chest'
            }, {
              id: '2',
              name: 'スクワット',
              muscle_group: 'legs'
            }];
            mockSupabaseService.getExercises.mockResolvedValue(mockExercises);
            _context5.n = 1;
            return workoutPageInstance.loadExerciseData();
          case 1:
            expect(workoutPageInstance.exercises).toEqual(mockExercises);
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
    test('should handle loading error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var error;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            error = new Error('Loading failed');
            mockSupabaseService.getExercises.mockRejectedValue(error);
            _context6.n = 1;
            return workoutPageInstance.loadExerciseData();
          case 1:
            expect(mockHelpers.showNotification).toHaveBeenCalledWith('エクササイズデータの読み込みに失敗しました', 'error');
          case 2:
            return _context6.a(2);
        }
      }, _callee6);
    })));
  });
  describe('loadMuscleGroups', function () {
    test('should load muscle groups', function () {
      var mockMuscleGroupsContainer = {
        innerHTML: ''
      };
      mockHelpers.safeGetElement.mockReturnValue(mockMuscleGroupsContainer);
      workoutPageInstance.loadMuscleGroups();
      expect(mockMuscleGroupsContainer.innerHTML).toContain('胸');
      expect(mockMuscleGroupsContainer.innerHTML).toContain('背中');
      expect(mockMuscleGroupsContainer.innerHTML).toContain('肩');
      expect(mockMuscleGroupsContainer.innerHTML).toContain('腕');
      expect(mockMuscleGroupsContainer.innerHTML).toContain('脚');
      expect(mockMuscleGroupsContainer.innerHTML).toContain('腹筋');
    });
    test('should handle missing container', function () {
      mockHelpers.safeGetElement.mockReturnValue(null);
      expect(function () {
        workoutPageInstance.loadMuscleGroups();
      }).not.toThrow();
    });
  });
  describe('clearExercisePresets', function () {
    test('should clear exercise presets', function () {
      var mockPresetsContainer = {
        innerHTML: ''
      };
      mockHelpers.safeGetElement.mockReturnValue(mockPresetsContainer);
      workoutPageInstance.clearExercisePresets();
      expect(mockPresetsContainer.innerHTML).toBe('');
    });
  });
  describe('setupEventListeners', function () {
    test('should setup event listeners', function () {
      var mockMuscleButtons = [{
        addEventListener: _globals.jest.fn(),
        dataset: {
          muscle: 'chest'
        }
      }, {
        addEventListener: _globals.jest.fn(),
        dataset: {
          muscle: 'back'
        }
      }];
      global.document.querySelectorAll = _globals.jest.fn().mockReturnValue(mockMuscleButtons);
      workoutPageInstance.setupEventListeners();
      expect(global.document.querySelectorAll).toHaveBeenCalledWith('.muscle-group-btn');
      mockMuscleButtons.forEach(function (button) {
        expect(button.addEventListener).toHaveBeenCalledWith('click', expect.any(Function));
      });
    });
  });
  describe('setupTooltips', function () {
    test('should setup tooltips', function () {
      var mockTooltipElements = [{
        addEventListener: _globals.jest.fn(),
        dataset: {
          tooltip: 'Test tooltip'
        }
      }];
      global.document.querySelectorAll = _globals.jest.fn().mockReturnValue(mockTooltipElements);
      workoutPageInstance.setupTooltips();
      expect(global.document.querySelectorAll).toHaveBeenCalledWith('[data-tooltip]');
    });
  });
  describe('updateQuickStartButton', function () {
    test('should update quick start button when muscles are selected', function () {
      var mockButton = {
        disabled: false,
        classList: {
          add: _globals.jest.fn(),
          remove: _globals.jest.fn()
        },
        innerHTML: ''
      };
      mockHelpers.safeGetElement.mockReturnValue(mockButton);
      workoutPageInstance.selectedMuscles = ['胸', '背中'];
      workoutPageInstance.updateQuickStartButton();
      expect(mockButton.disabled).toBe(false);
      expect(mockButton.classList.remove).toHaveBeenCalledWith('opacity-50');
    });
    test('should disable quick start button when no muscles selected', function () {
      var mockButton = {
        disabled: false,
        classList: {
          add: _globals.jest.fn(),
          remove: _globals.jest.fn()
        },
        innerHTML: ''
      };
      mockHelpers.safeGetElement.mockReturnValue(mockButton);
      workoutPageInstance.selectedMuscles = [];
      workoutPageInstance.updateQuickStartButton();
      expect(mockButton.disabled).toBe(true);
      expect(mockButton.classList.add).toHaveBeenCalledWith('opacity-50');
    });
    test('should handle missing button', function () {
      mockHelpers.safeGetElement.mockReturnValue(null);
      expect(function () {
        workoutPageInstance.updateQuickStartButton();
      }).not.toThrow();
    });
  });
  describe('toggleMuscleSelection', function () {
    test('should add muscle to selection', function () {
      var mockButton = {
        classList: {
          add: _globals.jest.fn(),
          remove: _globals.jest.fn()
        },
        dataset: {
          muscle: 'chest'
        }
      };
      workoutPageInstance.selectedMuscles = [];
      workoutPageInstance.toggleMuscleSelection(mockButton);
      expect(workoutPageInstance.selectedMuscles).toContain('chest');
      expect(mockButton.classList.add).toHaveBeenCalledWith('bg-blue-500', 'text-white');
    });
    test('should remove muscle from selection', function () {
      var mockButton = {
        classList: {
          add: _globals.jest.fn(),
          remove: _globals.jest.fn()
        },
        dataset: {
          muscle: 'chest'
        }
      };
      workoutPageInstance.selectedMuscles = ['chest'];
      workoutPageInstance.toggleMuscleSelection(mockButton);
      expect(workoutPageInstance.selectedMuscles).not.toContain('chest');
      expect(mockButton.classList.remove).toHaveBeenCalledWith('bg-blue-500', 'text-white');
    });
  });
  describe('startWorkout', function () {
    test('should start workout with selected muscles', function () {
      workoutPageInstance.selectedMuscles = ['chest', 'back'];
      workoutPageInstance.exercises = [{
        name: 'ベンチプレス',
        muscle_group: 'chest'
      }, {
        name: 'デッドリフト',
        muscle_group: 'back'
      }];
      workoutPageInstance.startWorkout();
      expect(workoutPageInstance.workoutStartTime).toBeInstanceOf(Date);
      expect(workoutPageInstance.currentExercise).toBeDefined();
      expect(workoutPageInstance.currentSet).toBe(1);
    });
    test('should handle no selected muscles', function () {
      workoutPageInstance.selectedMuscles = [];
      expect(function () {
        workoutPageInstance.startWorkout();
      }).not.toThrow();
    });
  });
  describe('endWorkout', function () {
    test('should end workout and save data', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            workoutPageInstance.workoutStartTime = new Date();
            workoutPageInstance.setData = [{
              exercise: 'ベンチプレス',
              sets: 3,
              reps: 10,
              weight: 80
            }];
            workoutPageInstance.selectedMuscles = ['chest'];
            mockWorkoutDataService.saveWorkout.mockResolvedValue();
            _context7.n = 1;
            return workoutPageInstance.endWorkout();
          case 1:
            expect(mockWorkoutDataService.saveWorkout).toHaveBeenCalled();
            expect(workoutPageInstance.workoutStartTime).toBeNull();
            expect(workoutPageInstance.setData).toEqual([]);
          case 2:
            return _context7.a(2);
        }
      }, _callee7);
    })));
    test('should handle save error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
      var error;
      return _regenerator().w(function (_context8) {
        while (1) switch (_context8.n) {
          case 0:
            workoutPageInstance.workoutStartTime = new Date();
            workoutPageInstance.setData = [{
              exercise: 'ベンチプレス',
              sets: 3,
              reps: 10,
              weight: 80
            }];
            error = new Error('Save failed');
            mockWorkoutDataService.saveWorkout.mockRejectedValue(error);
            _context8.n = 1;
            return workoutPageInstance.endWorkout();
          case 1:
            expect(mockHelpers.showNotification).toHaveBeenCalledWith('ワークアウトの保存に失敗しました', 'error');
          case 2:
            return _context8.a(2);
        }
      }, _callee8);
    })));
  });
  describe('addSet', function () {
    test('should add set data', function () {
      workoutPageInstance.currentExercise = 'ベンチプレス';
      workoutPageInstance.currentSet = 1;
      workoutPageInstance.addSet(10, 80);
      expect(workoutPageInstance.setData).toHaveLength(1);
      expect(workoutPageInstance.setData[0]).toEqual({
        exercise: 'ベンチプレス',
        sets: 1,
        reps: 10,
        weight: 80
      });
      expect(workoutPageInstance.currentSet).toBe(2);
    });
  });
  describe('startRestTimer', function () {
    test('should start rest timer', function () {
      var mockTimerElement = {
        innerHTML: ''
      };
      mockHelpers.safeGetElement.mockReturnValue(mockTimerElement);
      workoutPageInstance.startRestTimer(60);
      expect(workoutPageInstance.restStartTime).toBeInstanceOf(Date);
      expect(workoutPageInstance.restTimer).toBeDefined();
    });
  });
  describe('stopRestTimer', function () {
    test('should stop rest timer', function () {
      workoutPageInstance.restTimer = setInterval(function () {}, 1000);
      workoutPageInstance.restStartTime = new Date();
      workoutPageInstance.stopRestTimer();
      expect(workoutPageInstance.restTimer).toBeNull();
      expect(workoutPageInstance.restStartTime).toBeNull();
    });
  });
  describe('getWorkoutDuration', function () {
    test('should calculate workout duration', function () {
      var startTime = new Date();
      startTime.setMinutes(startTime.getMinutes() - 30);
      workoutPageInstance.workoutStartTime = startTime;
      var duration = workoutPageInstance.getWorkoutDuration();
      expect(duration).toBeGreaterThan(0);
    });
    test('should return 0 when no start time', function () {
      workoutPageInstance.workoutStartTime = null;
      var duration = workoutPageInstance.getWorkoutDuration();
      expect(duration).toBe(0);
    });
  });
  describe('getFilteredExercises', function () {
    test('should filter exercises by muscle group', function () {
      workoutPageInstance.exercises = [{
        name: 'ベンチプレス',
        muscle_group: 'chest'
      }, {
        name: 'スクワット',
        muscle_group: 'legs'
      }, {
        name: 'デッドリフト',
        muscle_group: 'back'
      }];
      var chestExercises = workoutPageInstance.getFilteredExercises('chest');
      var legExercises = workoutPageInstance.getFilteredExercises('legs');
      expect(chestExercises).toHaveLength(1);
      expect(chestExercises[0].name).toBe('ベンチプレス');
      expect(legExercises).toHaveLength(1);
      expect(legExercises[0].name).toBe('スクワット');
    });
    test('should return all exercises when no muscle group specified', function () {
      workoutPageInstance.exercises = [{
        name: 'ベンチプレス',
        muscle_group: 'chest'
      }, {
        name: 'スクワット',
        muscle_group: 'legs'
      }];
      var allExercises = workoutPageInstance.getFilteredExercises();
      expect(allExercises).toHaveLength(2);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,