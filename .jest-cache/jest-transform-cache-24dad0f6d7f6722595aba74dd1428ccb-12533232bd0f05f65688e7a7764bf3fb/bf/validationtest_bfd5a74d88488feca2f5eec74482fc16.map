{"version":3,"names":["_validation","require","_constants","describe","test","result","Validator","required","expect","isValid","toBe","errors","toHaveLength","toContain","ERROR_MESSAGES","REQUIRED","email","INVALID_EMAIL","password","length","toBeGreaterThan","numberRange","INVALID_NUMBER","safeText","XSS_DETECTED","formValidator","beforeEach","FormValidator","size","validateField","toBeDefined","set","clearErrors","formData","exercise_name","muscle_group","sets","reps","weight","notes","validateWorkoutForm","display_name","age","fitness_level","validateProfileForm","realtimeValidator","RealtimeValidator","mockElement","addEventListener","jest","fn","setupFieldValidation","toHaveBeenCalled","mockForm","querySelector","mockReturnValue","setupAuthFormValidation"],"sources":["validation.test.js"],"sourcesContent":["// validation.test.js - validationのテスト\n\nimport {\n  Validator,\n  FormValidator,\n  RealtimeValidator,\n  ERROR_MESSAGES,\n} from '../../js/utils/validation.js';\nimport { MUSCLE_GROUPS } from '../../js/utils/constants.js';\n\ndescribe('Validation', () => {\n  describe('Validator', () => {\n    describe('required', () => {\n      test('should validate required values', () => {\n        const result = Validator.required('test value');\n        expect(result.isValid).toBe(true);\n        expect(result.errors).toHaveLength(0);\n      });\n\n      test('should reject empty values', () => {\n        const result = Validator.required('');\n        expect(result.isValid).toBe(false);\n        expect(result.errors).toContain(ERROR_MESSAGES.REQUIRED);\n      });\n\n      test('should reject null values', () => {\n        const result = Validator.required(null);\n        expect(result.isValid).toBe(false);\n        expect(result.errors).toContain(ERROR_MESSAGES.REQUIRED);\n      });\n    });\n\n    describe('email', () => {\n      test('should validate correct email addresses', () => {\n        const result = Validator.email('test@example.com');\n        expect(result.isValid).toBe(true);\n        expect(result.errors).toHaveLength(0);\n      });\n\n      test('should reject invalid email addresses', () => {\n        const result = Validator.email('invalid-email');\n        expect(result.isValid).toBe(false);\n        expect(result.errors).toContain(ERROR_MESSAGES.INVALID_EMAIL);\n      });\n\n      test('should reject empty email', () => {\n        const result = Validator.email('');\n        expect(result.isValid).toBe(false);\n        expect(result.errors).toContain(ERROR_MESSAGES.REQUIRED);\n      });\n    });\n\n    describe('password', () => {\n      test('should validate strong passwords', () => {\n        const result = Validator.password('StrongPass123!');\n        expect(result.isValid).toBe(true);\n        expect(result.errors).toHaveLength(0);\n      });\n\n      test('should reject weak passwords', () => {\n        const result = Validator.password('weak');\n        expect(result.isValid).toBe(false);\n        expect(result.errors.length).toBeGreaterThan(0);\n      });\n\n      test('should reject empty password', () => {\n        const result = Validator.password('');\n        expect(result.isValid).toBe(false);\n        expect(result.errors).toContain(ERROR_MESSAGES.REQUIRED);\n      });\n    });\n\n    describe('numberRange', () => {\n      test('should validate numbers within range', () => {\n        const result = Validator.numberRange(5, 1, 10);\n        expect(result.isValid).toBe(true);\n        expect(result.errors).toHaveLength(0);\n      });\n\n      test('should reject numbers outside range', () => {\n        const result = Validator.numberRange(15, 1, 10);\n        expect(result.isValid).toBe(false);\n        expect(result.errors.length).toBeGreaterThan(0);\n      });\n\n      test('should reject non-numeric values', () => {\n        const result = Validator.numberRange('not-a-number', 1, 10);\n        expect(result.isValid).toBe(false);\n        expect(result.errors).toContain(ERROR_MESSAGES.INVALID_NUMBER);\n      });\n    });\n\n    describe('safeText', () => {\n      test('should validate safe text', () => {\n        const result = Validator.safeText('Safe text content');\n        expect(result.isValid).toBe(true);\n        expect(result.errors).toHaveLength(0);\n      });\n\n      test('should reject text with invalid characters', () => {\n        const result = Validator.safeText('<script>alert(\"xss\")</script>');\n        expect(result.isValid).toBe(false);\n        expect(result.errors).toContain(ERROR_MESSAGES.XSS_DETECTED);\n      });\n    });\n  });\n\n  describe('FormValidator', () => {\n    let formValidator;\n\n    beforeEach(() => {\n      formValidator = new FormValidator();\n    });\n\n    test('should initialize with empty errors', () => {\n      expect(formValidator.errors.size).toBe(0);\n    });\n\n    test('should validate field successfully', () => {\n      const result = formValidator.validateField(\n        'test',\n        'value',\n        Validator.required\n      );\n      expect(result).toBeDefined();\n      // 実際の実装に応じて調整\n      expect(result).toBeDefined();\n    });\n\n    test('should validate field with errors', () => {\n      const result = formValidator.validateField(\n        'test',\n        '',\n        Validator.required\n      );\n      expect(result).toBeDefined();\n      // 実際の実装に応じて調整\n      expect(result).toBeDefined();\n    });\n\n    test('should clear errors', () => {\n      formValidator.errors.set('test', ['error']);\n      formValidator.clearErrors();\n      expect(formValidator.errors.size).toBe(0);\n    });\n\n    test('should validate workout form', () => {\n      const formData = {\n        exercise_name: 'Push-ups',\n        muscle_group: '胸',\n        sets: 3,\n        reps: 10,\n        weight: 0,\n        notes: 'Good workout',\n      };\n\n      const result = formValidator.validateWorkoutForm(formData);\n      expect(result).toBeDefined();\n      // 実際の実装に応じて調整\n      expect(result).toBeDefined();\n    });\n\n    test('should validate profile form', () => {\n      const formData = {\n        display_name: 'Test User',\n        email: 'test@example.com',\n        age: 25,\n        fitness_level: 'beginner',\n      };\n\n      const result = formValidator.validateProfileForm(formData);\n      expect(result).toBeDefined();\n    });\n  });\n\n  describe('RealtimeValidator', () => {\n    let realtimeValidator;\n\n    beforeEach(() => {\n      realtimeValidator = new RealtimeValidator();\n    });\n\n    test('should initialize with form validator', () => {\n      // 実際の実装に応じて調整\n      expect(realtimeValidator).toBeDefined();\n    });\n\n    test('should setup field validation', () => {\n      const mockElement = {\n        addEventListener: jest.fn(),\n      };\n\n      realtimeValidator.setupFieldValidation(\n        mockElement,\n        'test',\n        Validator.required\n      );\n\n      expect(mockElement.addEventListener).toHaveBeenCalled();\n    });\n\n    test('should setup auth form validation', () => {\n      const mockForm = {\n        querySelector: jest.fn().mockReturnValue({\n          addEventListener: jest.fn(),\n        }),\n      };\n\n      realtimeValidator.setupAuthFormValidation(mockForm);\n\n      expect(mockForm.querySelector).toHaveBeenCalled();\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}