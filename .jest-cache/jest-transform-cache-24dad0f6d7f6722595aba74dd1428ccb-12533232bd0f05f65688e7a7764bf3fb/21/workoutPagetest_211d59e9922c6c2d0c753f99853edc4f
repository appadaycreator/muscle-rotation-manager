3665f270168554b81dcbf39b139b22bf
"use strict";

// workoutPage.test.js - WorkoutPageクラスのテスト

// モック
_getJestObj().mock('../../js/services/exerciseService.js', function () {
  return {
    exerciseService: {
      getExercises: jest.fn().mockResolvedValue([{
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest',
        equipment: 'barbell'
      }, {
        id: '2',
        name: 'スクワット',
        muscle_group: 'legs',
        equipment: 'barbell'
      }])
    }
  };
});
_getJestObj().mock('../../js/services/workoutDataService.js', function () {
  return {
    workoutDataService: {
      saveWorkout: jest.fn().mockResolvedValue({
        success: true
      }),
      getWorkoutHistory: jest.fn().mockResolvedValue([])
    }
  };
});
_getJestObj().mock('../../js/services/supabaseService.js', function () {
  return {
    supabaseService: {
      isAuthenticated: jest.fn().mockReturnValue(true),
      getCurrentUser: jest.fn().mockResolvedValue({
        id: 'user-1'
      })
    }
  };
});
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    safeGetElement: jest.fn(function (id) {
      var mockElement = {
        id: id,
        innerHTML: '',
        appendChild: jest.fn(),
        removeChild: jest.fn()
      };
      return mockElement;
    }),
    showNotification: jest.fn()
  };
});
_getJestObj().mock('../../js/utils/errorHandler.js', function () {
  return {
    handleError: jest.fn()
  };
});
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, "default": e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require5 = require("@jest/globals"),
    jest = _require5.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('WorkoutPage', function () {
  var WorkoutPageClass;
  var workoutPage;
  var mockContainer;
  beforeEach(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
    var module;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          // DOM要素のモック
          mockContainer = document.createElement('div');
          mockContainer.id = 'main-content';
          document.body.appendChild(mockContainer);

          // WorkoutPageクラスを動的にインポート
          _context.n = 1;
          return Promise.resolve().then(function () {
            return _interopRequireWildcard(require('../../js/pages/workoutPage.js'));
          });
        case 1:
          module = _context.v;
          WorkoutPageClass = module["default"];

          // WorkoutPageのインスタンスを作成
          workoutPage = new WorkoutPageClass();
        case 2:
          return _context.a(2);
      }
    }, _callee);
  })));
  afterEach(function () {
    document.body.removeChild(mockContainer);
    jest.clearAllMocks();
  });
  describe('初期化', function () {
    test('should initialize successfully', function () {
      expect(workoutPage).toBeDefined();
      expect(workoutPage.pageName).toBe('WorkoutPage');
    });
    test('should have required properties', function () {
      expect(workoutPage.currentWorkout).toBeDefined();
      expect(workoutPage.exercises).toEqual([]);
      expect(workoutPage.isWorkoutActive).toBe(false);
    });
  });
  describe('エクササイズ読み込み', function () {
    test('should load exercises successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            _context2.n = 1;
            return workoutPage.loadExercises();
          case 1:
            expect(workoutPage.exercises).toHaveLength(2);
            expect(workoutPage.exercises[0].name).toBe('ベンチプレス');
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    test('should handle exercise loading errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var _require, exerciseService, consoleSpy;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            _require = require('../../js/services/exerciseService.js'), exerciseService = _require.exerciseService;
            exerciseService.getExercises.mockRejectedValue(new Error('Test error'));
            consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            _context3.n = 1;
            return workoutPage.loadExercises();
          case 1:
            expect(consoleSpy).toHaveBeenCalled();
            consoleSpy.mockRestore();
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
  });
  describe('ワークアウト管理', function () {
    test('should start workout', function () {
      workoutPage.startWorkout();
      expect(workoutPage.isWorkoutActive).toBe(true);
      expect(workoutPage.currentWorkout.startTime).toBeDefined();
    });
    test('should end workout', function () {
      workoutPage.startWorkout();
      workoutPage.endWorkout();
      expect(workoutPage.isWorkoutActive).toBe(false);
      expect(workoutPage.currentWorkout.endTime).toBeDefined();
    });
    test('should add exercise to workout', function () {
      var exercise = {
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      };
      workoutPage.addExerciseToWorkout(exercise);
      expect(workoutPage.currentWorkout.exercises).toContain(exercise);
    });
    test('should remove exercise from workout', function () {
      var exercise = {
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      };
      workoutPage.addExerciseToWorkout(exercise);
      workoutPage.removeExerciseFromWorkout('1');
      expect(workoutPage.currentWorkout.exercises).toHaveLength(0);
    });
  });
  describe('セット管理', function () {
    test('should add set to exercise', function () {
      var exercise = {
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      };
      workoutPage.addExerciseToWorkout(exercise);
      workoutPage.addSetToExercise('1', {
        weight: 60,
        reps: 10
      });
      var exerciseInWorkout = workoutPage.currentWorkout.exercises.find(function (ex) {
        return ex.id === '1';
      });
      expect(exerciseInWorkout.sets).toHaveLength(1);
      expect(exerciseInWorkout.sets[0].weight).toBe(60);
      expect(exerciseInWorkout.sets[0].reps).toBe(10);
    });
    test('should remove set from exercise', function () {
      var exercise = {
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      };
      workoutPage.addExerciseToWorkout(exercise);
      workoutPage.addSetToExercise('1', {
        weight: 60,
        reps: 10
      });
      workoutPage.addSetToExercise('1', {
        weight: 65,
        reps: 8
      });
      workoutPage.removeSetFromExercise('1', 0);
      var exerciseInWorkout = workoutPage.currentWorkout.exercises.find(function (ex) {
        return ex.id === '1';
      });
      expect(exerciseInWorkout.sets).toHaveLength(1);
      expect(exerciseInWorkout.sets[0].weight).toBe(65);
    });
    test('should update set in exercise', function () {
      var exercise = {
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      };
      workoutPage.addExerciseToWorkout(exercise);
      workoutPage.addSetToExercise('1', {
        weight: 60,
        reps: 10
      });
      workoutPage.updateSetInExercise('1', 0, {
        weight: 65,
        reps: 8
      });
      var exerciseInWorkout = workoutPage.currentWorkout.exercises.find(function (ex) {
        return ex.id === '1';
      });
      expect(exerciseInWorkout.sets[0].weight).toBe(65);
      expect(exerciseInWorkout.sets[0].reps).toBe(8);
    });
  });
  describe('ワークアウト保存', function () {
    test('should save workout successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var _require2, workoutDataService;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            _require2 = require('../../js/services/workoutDataService.js'), workoutDataService = _require2.workoutDataService;
            workoutPage.startWorkout();
            workoutPage.addExerciseToWorkout({
              id: '1',
              name: 'ベンチプレス',
              muscle_group: 'chest'
            });
            workoutPage.addSetToExercise('1', {
              weight: 60,
              reps: 10
            });
            _context4.n = 1;
            return workoutPage.saveWorkout();
          case 1:
            expect(workoutDataService.saveWorkout).toHaveBeenCalled();
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    test('should handle save workout errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var _require3, workoutDataService, consoleSpy;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            _require3 = require('../../js/services/workoutDataService.js'), workoutDataService = _require3.workoutDataService;
            workoutDataService.saveWorkout.mockRejectedValue(new Error('Save error'));
            consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            workoutPage.startWorkout();
            _context5.n = 1;
            return workoutPage.saveWorkout();
          case 1:
            expect(consoleSpy).toHaveBeenCalled();
            consoleSpy.mockRestore();
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
    test('should require authentication for saving', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var _require4, supabaseService, consoleSpy;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            _require4 = require('../../js/services/supabaseService.js'), supabaseService = _require4.supabaseService;
            supabaseService.isAuthenticated.mockReturnValue(false);
            consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            workoutPage.startWorkout();
            _context6.n = 1;
            return workoutPage.saveWorkout();
          case 1:
            expect(consoleSpy).toHaveBeenCalled();
            consoleSpy.mockRestore();
          case 2:
            return _context6.a(2);
        }
      }, _callee6);
    })));
  });
  describe('統計計算', function () {
    test('should calculate workout statistics', function () {
      var exercise = {
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      };
      workoutPage.addExerciseToWorkout(exercise);
      workoutPage.addSetToExercise('1', {
        weight: 60,
        reps: 10
      });
      workoutPage.addSetToExercise('1', {
        weight: 65,
        reps: 8
      });
      var stats = workoutPage.calculateWorkoutStats();
      expect(stats.totalSets).toBe(2);
      expect(stats.totalVolume).toBe(600 + 520); // 60*10 + 65*8
      expect(stats.exerciseCount).toBe(1);
    });
    test('should calculate exercise volume', function () {
      var exercise = {
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      };
      workoutPage.addExerciseToWorkout(exercise);
      workoutPage.addSetToExercise('1', {
        weight: 60,
        reps: 10
      });
      workoutPage.addSetToExercise('1', {
        weight: 65,
        reps: 8
      });
      var volume = workoutPage.calculateExerciseVolume('1');
      expect(volume).toBe(600 + 520); // 60*10 + 65*8
    });
  });
  describe('レンダリング', function () {
    test('should render workout interface', function () {
      var container = document.createElement('div');
      container.id = 'workout-interface';
      document.body.appendChild(container);
      workoutPage.renderWorkoutInterface();
      expect(container.innerHTML).toContain('workout');
      document.body.removeChild(container);
    });
    test('should render exercise list', function () {
      var container = document.createElement('div');
      container.id = 'exercise-list';
      document.body.appendChild(container);
      workoutPage.exercises = [{
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      }, {
        id: '2',
        name: 'スクワット',
        muscle_group: 'legs'
      }];
      workoutPage.renderExerciseList();
      expect(container.innerHTML).toContain('ベンチプレス');
      expect(container.innerHTML).toContain('スクワット');
      document.body.removeChild(container);
    });
    test('should render current workout', function () {
      var container = document.createElement('div');
      container.id = 'current-workout';
      document.body.appendChild(container);
      workoutPage.startWorkout();
      workoutPage.addExerciseToWorkout({
        id: '1',
        name: 'ベンチプレス',
        muscle_group: 'chest'
      });
      workoutPage.renderCurrentWorkout();
      expect(container.innerHTML).toContain('ベンチプレス');
      document.body.removeChild(container);
    });
  });
  describe('エラーハンドリング', function () {
    test('should handle rendering errors gracefully', function () {
      var container = document.createElement('div');
      container.id = 'workout-interface';
      document.body.appendChild(container);

      // エラーを発生させる
      workoutPage.renderWorkoutInterface = jest.fn().mockImplementation(function () {
        throw new Error('Render error');
      });
      expect(function () {
        return workoutPage.renderWorkoutInterface();
      }).toThrow('Render error');
      document.body.removeChild(container);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJleGVyY2lzZVNlcnZpY2UiLCJnZXRFeGVyY2lzZXMiLCJqZXN0IiwiZm4iLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImlkIiwibmFtZSIsIm11c2NsZV9ncm91cCIsImVxdWlwbWVudCIsIndvcmtvdXREYXRhU2VydmljZSIsInNhdmVXb3Jrb3V0Iiwic3VjY2VzcyIsImdldFdvcmtvdXRIaXN0b3J5Iiwic3VwYWJhc2VTZXJ2aWNlIiwiaXNBdXRoZW50aWNhdGVkIiwibW9ja1JldHVyblZhbHVlIiwiZ2V0Q3VycmVudFVzZXIiLCJzYWZlR2V0RWxlbWVudCIsIm1vY2tFbGVtZW50IiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJyZW1vdmVDaGlsZCIsInNob3dOb3RpZmljYXRpb24iLCJoYW5kbGVFcnJvciIsIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9yZWdlbmVyYXRvciIsImUiLCJ0IiwiciIsIm4iLCJ0b1N0cmluZ1RhZyIsImkiLCJjIiwiR2VuZXJhdG9yIiwidSIsIk9iamVjdCIsImNyZWF0ZSIsIl9yZWdlbmVyYXRvckRlZmluZTIiLCJmIiwicCIsInkiLCJHIiwidiIsImEiLCJkIiwiYmluZCIsImxlbmd0aCIsImwiLCJUeXBlRXJyb3IiLCJjYWxsIiwiZG9uZSIsInZhbHVlIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsImdldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJkaXNwbGF5TmFtZSIsInciLCJtIiwiZGVmaW5lUHJvcGVydHkiLCJfcmVnZW5lcmF0b3JEZWZpbmUiLCJfaW52b2tlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJXZWFrTWFwIiwiX19lc01vZHVsZSIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJfYXN5bmNUb0dlbmVyYXRvciIsImFyZ3VtZW50cyIsImFwcGx5IiwiX25leHQiLCJfdGhyb3ciLCJfcmVxdWlyZTUiLCJyZXF1aXJlIiwiZGVzY3JpYmUiLCJXb3Jrb3V0UGFnZUNsYXNzIiwid29ya291dFBhZ2UiLCJtb2NrQ29udGFpbmVyIiwiYmVmb3JlRWFjaCIsIl9jYWxsZWUiLCJtb2R1bGUiLCJfY29udGV4dCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImJvZHkiLCJhZnRlckVhY2giLCJjbGVhckFsbE1vY2tzIiwidGVzdCIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwicGFnZU5hbWUiLCJ0b0JlIiwiY3VycmVudFdvcmtvdXQiLCJleGVyY2lzZXMiLCJ0b0VxdWFsIiwiaXNXb3Jrb3V0QWN0aXZlIiwiX2NhbGxlZTIiLCJfY29udGV4dDIiLCJsb2FkRXhlcmNpc2VzIiwidG9IYXZlTGVuZ3RoIiwiX2NhbGxlZTMiLCJfcmVxdWlyZSIsImNvbnNvbGVTcHkiLCJfY29udGV4dDMiLCJtb2NrUmVqZWN0ZWRWYWx1ZSIsIkVycm9yIiwic3B5T24iLCJjb25zb2xlIiwibW9ja0ltcGxlbWVudGF0aW9uIiwidG9IYXZlQmVlbkNhbGxlZCIsIm1vY2tSZXN0b3JlIiwic3RhcnRXb3Jrb3V0Iiwic3RhcnRUaW1lIiwiZW5kV29ya291dCIsImVuZFRpbWUiLCJleGVyY2lzZSIsImFkZEV4ZXJjaXNlVG9Xb3Jrb3V0IiwidG9Db250YWluIiwicmVtb3ZlRXhlcmNpc2VGcm9tV29ya291dCIsImFkZFNldFRvRXhlcmNpc2UiLCJ3ZWlnaHQiLCJyZXBzIiwiZXhlcmNpc2VJbldvcmtvdXQiLCJmaW5kIiwiZXgiLCJzZXRzIiwicmVtb3ZlU2V0RnJvbUV4ZXJjaXNlIiwidXBkYXRlU2V0SW5FeGVyY2lzZSIsIl9jYWxsZWU0IiwiX3JlcXVpcmUyIiwiX2NvbnRleHQ0IiwiX2NhbGxlZTUiLCJfcmVxdWlyZTMiLCJfY29udGV4dDUiLCJfY2FsbGVlNiIsIl9yZXF1aXJlNCIsIl9jb250ZXh0NiIsInN0YXRzIiwiY2FsY3VsYXRlV29ya291dFN0YXRzIiwidG90YWxTZXRzIiwidG90YWxWb2x1bWUiLCJleGVyY2lzZUNvdW50Iiwidm9sdW1lIiwiY2FsY3VsYXRlRXhlcmNpc2VWb2x1bWUiLCJjb250YWluZXIiLCJyZW5kZXJXb3Jrb3V0SW50ZXJmYWNlIiwicmVuZGVyRXhlcmNpc2VMaXN0IiwicmVuZGVyQ3VycmVudFdvcmtvdXQiLCJ0b1Rocm93Il0sInNvdXJjZXMiOlsid29ya291dFBhZ2UudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB3b3Jrb3V0UGFnZS50ZXN0LmpzIC0gV29ya291dFBhZ2Xjgq/jg6njgrnjga7jg4bjgrnjg4hcblxuLy8g44Oi44OD44KvXG5qZXN0Lm1vY2soJy4uLy4uL2pzL3NlcnZpY2VzL2V4ZXJjaXNlU2VydmljZS5qcycsICgpID0+ICh7XG4gIGV4ZXJjaXNlU2VydmljZToge1xuICAgIGdldEV4ZXJjaXNlczogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtcbiAgICAgIHsgaWQ6ICcxJywgbmFtZTogJ+ODmeODs+ODgeODl+ODrOOCuScsIG11c2NsZV9ncm91cDogJ2NoZXN0JywgZXF1aXBtZW50OiAnYmFyYmVsbCcgfSxcbiAgICAgIHsgaWQ6ICcyJywgbmFtZTogJ+OCueOCr+ODr+ODg+ODiCcsIG11c2NsZV9ncm91cDogJ2xlZ3MnLCBlcXVpcG1lbnQ6ICdiYXJiZWxsJyB9LFxuICAgIF0pLFxuICB9LFxufSkpO1xuXG5qZXN0Lm1vY2soJy4uLy4uL2pzL3NlcnZpY2VzL3dvcmtvdXREYXRhU2VydmljZS5qcycsICgpID0+ICh7XG4gIHdvcmtvdXREYXRhU2VydmljZToge1xuICAgIHNhdmVXb3Jrb3V0OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBzdWNjZXNzOiB0cnVlIH0pLFxuICAgIGdldFdvcmtvdXRIaXN0b3J5OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoW10pLFxuICB9LFxufSkpO1xuXG5qZXN0Lm1vY2soJy4uLy4uL2pzL3NlcnZpY2VzL3N1cGFiYXNlU2VydmljZS5qcycsICgpID0+ICh7XG4gIHN1cGFiYXNlU2VydmljZToge1xuICAgIGlzQXV0aGVudGljYXRlZDogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKSxcbiAgICBnZXRDdXJyZW50VXNlcjogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgaWQ6ICd1c2VyLTEnIH0pLFxuICB9LFxufSkpO1xuXG5qZXN0Lm1vY2soJy4uLy4uL2pzL3V0aWxzL2hlbHBlcnMuanMnLCAoKSA9PiAoe1xuICBzYWZlR2V0RWxlbWVudDogamVzdC5mbigoaWQpID0+IHtcbiAgICBjb25zdCBtb2NrRWxlbWVudCA9IHsgaWQsIGlubmVySFRNTDogJycsIGFwcGVuZENoaWxkOiBqZXN0LmZuKCksIHJlbW92ZUNoaWxkOiBqZXN0LmZuKCkgfTtcbiAgICByZXR1cm4gbW9ja0VsZW1lbnQ7XG4gIH0pLFxuICBzaG93Tm90aWZpY2F0aW9uOiBqZXN0LmZuKCksXG59KSk7XG5cbmplc3QubW9jaygnLi4vLi4vanMvdXRpbHMvZXJyb3JIYW5kbGVyLmpzJywgKCkgPT4gKHtcbiAgaGFuZGxlRXJyb3I6IGplc3QuZm4oKSxcbn0pKTtcblxuZGVzY3JpYmUoJ1dvcmtvdXRQYWdlJywgKCkgPT4ge1xuICBsZXQgV29ya291dFBhZ2VDbGFzcztcbiAgbGV0IHdvcmtvdXRQYWdlO1xuICBsZXQgbW9ja0NvbnRhaW5lcjtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAvLyBET03opoHntKDjga7jg6Ljg4Pjgq9cbiAgICBtb2NrQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbW9ja0NvbnRhaW5lci5pZCA9ICdtYWluLWNvbnRlbnQnO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobW9ja0NvbnRhaW5lcik7XG5cbiAgICAvLyBXb3Jrb3V0UGFnZeOCr+ODqeOCueOCkuWLleeahOOBq+OCpOODs+ODneODvOODiFxuICAgIGNvbnN0IG1vZHVsZSA9IGF3YWl0IGltcG9ydCgnLi4vLi4vanMvcGFnZXMvd29ya291dFBhZ2UuanMnKTtcbiAgICBXb3Jrb3V0UGFnZUNsYXNzID0gbW9kdWxlLmRlZmF1bHQ7XG4gICAgXG4gICAgLy8gV29ya291dFBhZ2Xjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJBcbiAgICB3b3Jrb3V0UGFnZSA9IG5ldyBXb3Jrb3V0UGFnZUNsYXNzKCk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChtb2NrQ29udGFpbmVyKTtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+WIneacn+WMlicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgaW5pdGlhbGl6ZSBzdWNjZXNzZnVsbHknLCAoKSA9PiB7XG4gICAgICBleHBlY3Qod29ya291dFBhZ2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3Qod29ya291dFBhZ2UucGFnZU5hbWUpLnRvQmUoJ1dvcmtvdXRQYWdlJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGF2ZSByZXF1aXJlZCBwcm9wZXJ0aWVzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHdvcmtvdXRQYWdlLmN1cnJlbnRXb3Jrb3V0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHdvcmtvdXRQYWdlLmV4ZXJjaXNlcykudG9FcXVhbChbXSk7XG4gICAgICBleHBlY3Qod29ya291dFBhZ2UuaXNXb3Jrb3V0QWN0aXZlKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+OCqOOCr+OCteOCteOCpOOCuuiqreOBv+i+vOOBvycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgbG9hZCBleGVyY2lzZXMgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgd29ya291dFBhZ2UubG9hZEV4ZXJjaXNlcygpO1xuICAgICAgXG4gICAgICBleHBlY3Qod29ya291dFBhZ2UuZXhlcmNpc2VzKS50b0hhdmVMZW5ndGgoMik7XG4gICAgICBleHBlY3Qod29ya291dFBhZ2UuZXhlcmNpc2VzWzBdLm5hbWUpLnRvQmUoJ+ODmeODs+ODgeODl+ODrOOCuScpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBleGVyY2lzZSBsb2FkaW5nIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZXhlcmNpc2VTZXJ2aWNlIH0gPSByZXF1aXJlKCcuLi8uLi9qcy9zZXJ2aWNlcy9leGVyY2lzZVNlcnZpY2UuanMnKTtcbiAgICAgIGV4ZXJjaXNlU2VydmljZS5nZXRFeGVyY2lzZXMubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdUZXN0IGVycm9yJykpO1xuXG4gICAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnZXJyb3InKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcbiAgICAgIFxuICAgICAgYXdhaXQgd29ya291dFBhZ2UubG9hZEV4ZXJjaXNlcygpO1xuICAgICAgXG4gICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgY29uc29sZVNweS5tb2NrUmVzdG9yZSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn44Ov44O844Kv44Ki44Km44OI566h55CGJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBzdGFydCB3b3Jrb3V0JywgKCkgPT4ge1xuICAgICAgd29ya291dFBhZ2Uuc3RhcnRXb3Jrb3V0KCk7XG4gICAgICBcbiAgICAgIGV4cGVjdCh3b3Jrb3V0UGFnZS5pc1dvcmtvdXRBY3RpdmUpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3Qod29ya291dFBhZ2UuY3VycmVudFdvcmtvdXQuc3RhcnRUaW1lKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGVuZCB3b3Jrb3V0JywgKCkgPT4ge1xuICAgICAgd29ya291dFBhZ2Uuc3RhcnRXb3Jrb3V0KCk7XG4gICAgICB3b3Jrb3V0UGFnZS5lbmRXb3Jrb3V0KCk7XG4gICAgICBcbiAgICAgIGV4cGVjdCh3b3Jrb3V0UGFnZS5pc1dvcmtvdXRBY3RpdmUpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHdvcmtvdXRQYWdlLmN1cnJlbnRXb3Jrb3V0LmVuZFRpbWUpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgYWRkIGV4ZXJjaXNlIHRvIHdvcmtvdXQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBleGVyY2lzZSA9IHsgaWQ6ICcxJywgbmFtZTogJ+ODmeODs+ODgeODl+ODrOOCuScsIG11c2NsZV9ncm91cDogJ2NoZXN0JyB9O1xuICAgICAgXG4gICAgICB3b3Jrb3V0UGFnZS5hZGRFeGVyY2lzZVRvV29ya291dChleGVyY2lzZSk7XG4gICAgICBcbiAgICAgIGV4cGVjdCh3b3Jrb3V0UGFnZS5jdXJyZW50V29ya291dC5leGVyY2lzZXMpLnRvQ29udGFpbihleGVyY2lzZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmVtb3ZlIGV4ZXJjaXNlIGZyb20gd29ya291dCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGV4ZXJjaXNlID0geyBpZDogJzEnLCBuYW1lOiAn44OZ44Oz44OB44OX44Os44K5JywgbXVzY2xlX2dyb3VwOiAnY2hlc3QnIH07XG4gICAgICBcbiAgICAgIHdvcmtvdXRQYWdlLmFkZEV4ZXJjaXNlVG9Xb3Jrb3V0KGV4ZXJjaXNlKTtcbiAgICAgIHdvcmtvdXRQYWdlLnJlbW92ZUV4ZXJjaXNlRnJvbVdvcmtvdXQoJzEnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHdvcmtvdXRQYWdlLmN1cnJlbnRXb3Jrb3V0LmV4ZXJjaXNlcykudG9IYXZlTGVuZ3RoKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn44K744OD44OI566h55CGJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBhZGQgc2V0IHRvIGV4ZXJjaXNlJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXhlcmNpc2UgPSB7IGlkOiAnMScsIG5hbWU6ICfjg5njg7Pjg4Hjg5fjg6zjgrknLCBtdXNjbGVfZ3JvdXA6ICdjaGVzdCcgfTtcbiAgICAgIHdvcmtvdXRQYWdlLmFkZEV4ZXJjaXNlVG9Xb3Jrb3V0KGV4ZXJjaXNlKTtcbiAgICAgIFxuICAgICAgd29ya291dFBhZ2UuYWRkU2V0VG9FeGVyY2lzZSgnMScsIHsgd2VpZ2h0OiA2MCwgcmVwczogMTAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IGV4ZXJjaXNlSW5Xb3Jrb3V0ID0gd29ya291dFBhZ2UuY3VycmVudFdvcmtvdXQuZXhlcmNpc2VzLmZpbmQoZXggPT4gZXguaWQgPT09ICcxJyk7XG4gICAgICBleHBlY3QoZXhlcmNpc2VJbldvcmtvdXQuc2V0cykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KGV4ZXJjaXNlSW5Xb3Jrb3V0LnNldHNbMF0ud2VpZ2h0KS50b0JlKDYwKTtcbiAgICAgIGV4cGVjdChleGVyY2lzZUluV29ya291dC5zZXRzWzBdLnJlcHMpLnRvQmUoMTApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJlbW92ZSBzZXQgZnJvbSBleGVyY2lzZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGV4ZXJjaXNlID0geyBpZDogJzEnLCBuYW1lOiAn44OZ44Oz44OB44OX44Os44K5JywgbXVzY2xlX2dyb3VwOiAnY2hlc3QnIH07XG4gICAgICB3b3Jrb3V0UGFnZS5hZGRFeGVyY2lzZVRvV29ya291dChleGVyY2lzZSk7XG4gICAgICB3b3Jrb3V0UGFnZS5hZGRTZXRUb0V4ZXJjaXNlKCcxJywgeyB3ZWlnaHQ6IDYwLCByZXBzOiAxMCB9KTtcbiAgICAgIHdvcmtvdXRQYWdlLmFkZFNldFRvRXhlcmNpc2UoJzEnLCB7IHdlaWdodDogNjUsIHJlcHM6IDggfSk7XG4gICAgICBcbiAgICAgIHdvcmtvdXRQYWdlLnJlbW92ZVNldEZyb21FeGVyY2lzZSgnMScsIDApO1xuICAgICAgXG4gICAgICBjb25zdCBleGVyY2lzZUluV29ya291dCA9IHdvcmtvdXRQYWdlLmN1cnJlbnRXb3Jrb3V0LmV4ZXJjaXNlcy5maW5kKGV4ID0+IGV4LmlkID09PSAnMScpO1xuICAgICAgZXhwZWN0KGV4ZXJjaXNlSW5Xb3Jrb3V0LnNldHMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChleGVyY2lzZUluV29ya291dC5zZXRzWzBdLndlaWdodCkudG9CZSg2NSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgdXBkYXRlIHNldCBpbiBleGVyY2lzZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGV4ZXJjaXNlID0geyBpZDogJzEnLCBuYW1lOiAn44OZ44Oz44OB44OX44Os44K5JywgbXVzY2xlX2dyb3VwOiAnY2hlc3QnIH07XG4gICAgICB3b3Jrb3V0UGFnZS5hZGRFeGVyY2lzZVRvV29ya291dChleGVyY2lzZSk7XG4gICAgICB3b3Jrb3V0UGFnZS5hZGRTZXRUb0V4ZXJjaXNlKCcxJywgeyB3ZWlnaHQ6IDYwLCByZXBzOiAxMCB9KTtcbiAgICAgIFxuICAgICAgd29ya291dFBhZ2UudXBkYXRlU2V0SW5FeGVyY2lzZSgnMScsIDAsIHsgd2VpZ2h0OiA2NSwgcmVwczogOCB9KTtcbiAgICAgIFxuICAgICAgY29uc3QgZXhlcmNpc2VJbldvcmtvdXQgPSB3b3Jrb3V0UGFnZS5jdXJyZW50V29ya291dC5leGVyY2lzZXMuZmluZChleCA9PiBleC5pZCA9PT0gJzEnKTtcbiAgICAgIGV4cGVjdChleGVyY2lzZUluV29ya291dC5zZXRzWzBdLndlaWdodCkudG9CZSg2NSk7XG4gICAgICBleHBlY3QoZXhlcmNpc2VJbldvcmtvdXQuc2V0c1swXS5yZXBzKS50b0JlKDgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn44Ov44O844Kv44Ki44Km44OI5L+d5a2YJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBzYXZlIHdvcmtvdXQgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgeyB3b3Jrb3V0RGF0YVNlcnZpY2UgfSA9IHJlcXVpcmUoJy4uLy4uL2pzL3NlcnZpY2VzL3dvcmtvdXREYXRhU2VydmljZS5qcycpO1xuICAgICAgXG4gICAgICB3b3Jrb3V0UGFnZS5zdGFydFdvcmtvdXQoKTtcbiAgICAgIHdvcmtvdXRQYWdlLmFkZEV4ZXJjaXNlVG9Xb3Jrb3V0KHsgaWQ6ICcxJywgbmFtZTogJ+ODmeODs+ODgeODl+ODrOOCuScsIG11c2NsZV9ncm91cDogJ2NoZXN0JyB9KTtcbiAgICAgIHdvcmtvdXRQYWdlLmFkZFNldFRvRXhlcmNpc2UoJzEnLCB7IHdlaWdodDogNjAsIHJlcHM6IDEwIH0pO1xuICAgICAgXG4gICAgICBhd2FpdCB3b3Jrb3V0UGFnZS5zYXZlV29ya291dCgpO1xuICAgICAgXG4gICAgICBleHBlY3Qod29ya291dERhdGFTZXJ2aWNlLnNhdmVXb3Jrb3V0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHNhdmUgd29ya291dCBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IHdvcmtvdXREYXRhU2VydmljZSB9ID0gcmVxdWlyZSgnLi4vLi4vanMvc2VydmljZXMvd29ya291dERhdGFTZXJ2aWNlLmpzJyk7XG4gICAgICB3b3Jrb3V0RGF0YVNlcnZpY2Uuc2F2ZVdvcmtvdXQubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdTYXZlIGVycm9yJykpO1xuXG4gICAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnZXJyb3InKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcbiAgICAgIFxuICAgICAgd29ya291dFBhZ2Uuc3RhcnRXb3Jrb3V0KCk7XG4gICAgICBhd2FpdCB3b3Jrb3V0UGFnZS5zYXZlV29ya291dCgpO1xuICAgICAgXG4gICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgY29uc29sZVNweS5tb2NrUmVzdG9yZSgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJlcXVpcmUgYXV0aGVudGljYXRpb24gZm9yIHNhdmluZycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgc3VwYWJhc2VTZXJ2aWNlIH0gPSByZXF1aXJlKCcuLi8uLi9qcy9zZXJ2aWNlcy9zdXBhYmFzZVNlcnZpY2UuanMnKTtcbiAgICAgIHN1cGFiYXNlU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQubW9ja1JldHVyblZhbHVlKGZhbHNlKTtcblxuICAgICAgY29uc3QgY29uc29sZVNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJykubW9ja0ltcGxlbWVudGF0aW9uKCk7XG4gICAgICBcbiAgICAgIHdvcmtvdXRQYWdlLnN0YXJ0V29ya291dCgpO1xuICAgICAgYXdhaXQgd29ya291dFBhZ2Uuc2F2ZVdvcmtvdXQoKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGNvbnNvbGVTcHkubW9ja1Jlc3RvcmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+e1seioiOioiOeulycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgY2FsY3VsYXRlIHdvcmtvdXQgc3RhdGlzdGljcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGV4ZXJjaXNlID0geyBpZDogJzEnLCBuYW1lOiAn44OZ44Oz44OB44OX44Os44K5JywgbXVzY2xlX2dyb3VwOiAnY2hlc3QnIH07XG4gICAgICB3b3Jrb3V0UGFnZS5hZGRFeGVyY2lzZVRvV29ya291dChleGVyY2lzZSk7XG4gICAgICB3b3Jrb3V0UGFnZS5hZGRTZXRUb0V4ZXJjaXNlKCcxJywgeyB3ZWlnaHQ6IDYwLCByZXBzOiAxMCB9KTtcbiAgICAgIHdvcmtvdXRQYWdlLmFkZFNldFRvRXhlcmNpc2UoJzEnLCB7IHdlaWdodDogNjUsIHJlcHM6IDggfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHN0YXRzID0gd29ya291dFBhZ2UuY2FsY3VsYXRlV29ya291dFN0YXRzKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChzdGF0cy50b3RhbFNldHMpLnRvQmUoMik7XG4gICAgICBleHBlY3Qoc3RhdHMudG90YWxWb2x1bWUpLnRvQmUoNjAwICsgNTIwKTsgLy8gNjAqMTAgKyA2NSo4XG4gICAgICBleHBlY3Qoc3RhdHMuZXhlcmNpc2VDb3VudCkudG9CZSgxKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBjYWxjdWxhdGUgZXhlcmNpc2Ugdm9sdW1lJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXhlcmNpc2UgPSB7IGlkOiAnMScsIG5hbWU6ICfjg5njg7Pjg4Hjg5fjg6zjgrknLCBtdXNjbGVfZ3JvdXA6ICdjaGVzdCcgfTtcbiAgICAgIHdvcmtvdXRQYWdlLmFkZEV4ZXJjaXNlVG9Xb3Jrb3V0KGV4ZXJjaXNlKTtcbiAgICAgIHdvcmtvdXRQYWdlLmFkZFNldFRvRXhlcmNpc2UoJzEnLCB7IHdlaWdodDogNjAsIHJlcHM6IDEwIH0pO1xuICAgICAgd29ya291dFBhZ2UuYWRkU2V0VG9FeGVyY2lzZSgnMScsIHsgd2VpZ2h0OiA2NSwgcmVwczogOCB9KTtcbiAgICAgIFxuICAgICAgY29uc3Qgdm9sdW1lID0gd29ya291dFBhZ2UuY2FsY3VsYXRlRXhlcmNpc2VWb2x1bWUoJzEnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHZvbHVtZSkudG9CZSg2MDAgKyA1MjApOyAvLyA2MCoxMCArIDY1KjhcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+ODrOODs+ODgOODquODs+OCsCcsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIHdvcmtvdXQgaW50ZXJmYWNlJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250YWluZXIuaWQgPSAnd29ya291dC1pbnRlcmZhY2UnO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICB3b3Jrb3V0UGFnZS5yZW5kZXJXb3Jrb3V0SW50ZXJmYWNlKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChjb250YWluZXIuaW5uZXJIVE1MKS50b0NvbnRhaW4oJ3dvcmtvdXQnKTtcbiAgICAgIFxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChjb250YWluZXIpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciBleGVyY2lzZSBsaXN0JywgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250YWluZXIuaWQgPSAnZXhlcmNpc2UtbGlzdCc7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cbiAgICAgIHdvcmtvdXRQYWdlLmV4ZXJjaXNlcyA9IFtcbiAgICAgICAgeyBpZDogJzEnLCBuYW1lOiAn44OZ44Oz44OB44OX44Os44K5JywgbXVzY2xlX2dyb3VwOiAnY2hlc3QnIH0sXG4gICAgICAgIHsgaWQ6ICcyJywgbmFtZTogJ+OCueOCr+ODr+ODg+ODiCcsIG11c2NsZV9ncm91cDogJ2xlZ3MnIH0sXG4gICAgICBdO1xuXG4gICAgICB3b3Jrb3V0UGFnZS5yZW5kZXJFeGVyY2lzZUxpc3QoKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGNvbnRhaW5lci5pbm5lckhUTUwpLnRvQ29udGFpbign44OZ44Oz44OB44OX44Os44K5Jyk7XG4gICAgICBleHBlY3QoY29udGFpbmVyLmlubmVySFRNTCkudG9Db250YWluKCfjgrnjgq/jg6/jg4Pjg4gnKTtcbiAgICAgIFxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChjb250YWluZXIpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciBjdXJyZW50IHdvcmtvdXQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRhaW5lci5pZCA9ICdjdXJyZW50LXdvcmtvdXQnO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICB3b3Jrb3V0UGFnZS5zdGFydFdvcmtvdXQoKTtcbiAgICAgIHdvcmtvdXRQYWdlLmFkZEV4ZXJjaXNlVG9Xb3Jrb3V0KHsgaWQ6ICcxJywgbmFtZTogJ+ODmeODs+ODgeODl+ODrOOCuScsIG11c2NsZV9ncm91cDogJ2NoZXN0JyB9KTtcblxuICAgICAgd29ya291dFBhZ2UucmVuZGVyQ3VycmVudFdvcmtvdXQoKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGNvbnRhaW5lci5pbm5lckhUTUwpLnRvQ29udGFpbign44OZ44Oz44OB44OX44Os44K5Jyk7XG4gICAgICBcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+OCqOODqeODvOODj+ODs+ODieODquODs+OCsCcsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHJlbmRlcmluZyBlcnJvcnMgZ3JhY2VmdWxseScsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29udGFpbmVyLmlkID0gJ3dvcmtvdXQtaW50ZXJmYWNlJztcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgICAgLy8g44Ko44Op44O844KS55m655Sf44GV44Gb44KLXG4gICAgICB3b3Jrb3V0UGFnZS5yZW5kZXJXb3Jrb3V0SW50ZXJmYWNlID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVuZGVyIGVycm9yJyk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KCgpID0+IHdvcmtvdXRQYWdlLnJlbmRlcldvcmtvdXRJbnRlcmZhY2UoKSkudG9UaHJvdygnUmVuZGVyIGVycm9yJyk7XG4gICAgICBcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUE7QUFDQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsc0NBQXNDLEVBQUU7RUFBQSxPQUFPO0lBQ3ZEQyxlQUFlLEVBQUU7TUFDZkMsWUFBWSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLENBQ3hDO1FBQUVDLEVBQUUsRUFBRSxHQUFHO1FBQUVDLElBQUksRUFBRSxRQUFRO1FBQUVDLFlBQVksRUFBRSxPQUFPO1FBQUVDLFNBQVMsRUFBRTtNQUFVLENBQUMsRUFDeEU7UUFBRUgsRUFBRSxFQUFFLEdBQUc7UUFBRUMsSUFBSSxFQUFFLE9BQU87UUFBRUMsWUFBWSxFQUFFLE1BQU07UUFBRUMsU0FBUyxFQUFFO01BQVUsQ0FBQyxDQUN2RTtJQUNIO0VBQ0YsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVIVixXQUFBLEdBQUtDLElBQUksQ0FBQyx5Q0FBeUMsRUFBRTtFQUFBLE9BQU87SUFDMURVLGtCQUFrQixFQUFFO01BQ2xCQyxXQUFXLEVBQUVSLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUM7UUFBRU8sT0FBTyxFQUFFO01BQUssQ0FBQyxDQUFDO01BQzNEQyxpQkFBaUIsRUFBRVYsSUFBSSxDQUFDQyxFQUFFLENB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