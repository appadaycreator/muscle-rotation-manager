cbd1cd8b25536f1553e417f88b70b6b8
"use strict";

// モックの設定
_getJestObj().mock('../../js/modules/authManager.js', function () {
  return {
    authManager: {
      isAuthenticated: jest.fn(),
      getCurrentUser: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/services/supabaseService.js', function () {
  return {
    supabaseService: {
      isAvailable: jest.fn(),
      saveData: jest.fn(),
      loadData: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    showNotification: jest.fn()
  };
});

// グローバル関数のモック
var _BasePage = require("../../js/core/BasePage.js");
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
} // BasePage.test.js - BasePageクラスのテスト
global.showNotification = jest.fn();
describe('BasePage', function () {
  var basePage;
  var mockAuthManager;
  var mockSupabaseService;
  var mockShowNotification;
  beforeEach(function () {
    // モックのリセット
    jest.clearAllMocks();

    // モジュールの取得
    var authManagerModule = require('../../js/modules/authManager.js');
    var supabaseServiceModule = require('../../js/services/supabaseService.js');
    var helpersModule = require('../../js/utils/helpers.js');
    mockAuthManager = authManagerModule.authManager;
    mockSupabaseService = supabaseServiceModule.supabaseService;
    mockShowNotification = helpersModule.showNotification;

    // BasePageのインスタンス作成
    basePage = new _BasePage.BasePage();
  });
  afterEach(function () {
    if (basePage) {
      basePage.destroy();
    }
  });
  describe('constructor', function () {
    test('should initialize with default values', function () {
      expect(basePage.pageName).toBe('base');
      expect(basePage.isInitialized).toBe(false);
      expect(basePage.eventListeners).toBeInstanceOf(Map);
    });
  });
  describe('initialize', function () {
    test('should initialize successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            mockAuthManager.isAuthenticated.mockResolvedValue(true);
            mockSupabaseService.isAvailable.mockReturnValue(true);
            _context.n = 1;
            return basePage.initialize();
          case 1:
            expect(basePage.isInitialized).toBe(true);
            expect(mockAuthManager.isAuthenticated).toHaveBeenCalled();
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
    test('should not initialize if already initialized', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            basePage.isInitialized = true;
            _context2.n = 1;
            return basePage.initialize();
          case 1:
            expect(mockAuthManager.isAuthenticated).not.toHaveBeenCalled();
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    test('should handle initialization errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var error, consoleErrorSpy;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            error = new Error('Initialization failed');
            mockAuthManager.isAuthenticated.mockRejectedValue(error);
            mockSupabaseService.isAvailable.mockReturnValue(true);
            consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            _context3.n = 1;
            return basePage.initialize();
          case 1:
            // BasePage.jsの実装では、認証チェックでエラーが発生した場合の処理
            expect(consoleErrorSpy).toHaveBeenCalledWith('❌ Authentication check failed:', error);
            // エラーハンドラーが呼び出されるため、showNotificationの呼び出しは確認しない

            consoleErrorSpy.mockRestore();
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
  });
  describe('checkAuthentication', function () {
    test('should redirect to index if not authenticated and requires auth', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var result;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            mockAuthManager.isAuthenticated.mockResolvedValue(false);
            mockSupabaseService.isAvailable.mockReturnValue(true);

            // JSDOMの制限により、window.location.hrefの設定はテストできない
            // そのため、認証チェックの動作のみ確認
            _context4.n = 1;
            return basePage.checkAuthentication();
          case 1:
            result = _context4.v;
            expect(mockShowNotification).toHaveBeenCalledWith('ログインが必要です', 'warning');
            expect(result).toBe(false);
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    test('should not redirect if authenticated', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            mockAuthManager.isAuthenticated.mockResolvedValue(true);
            _context5.n = 1;
            return basePage.checkAuthentication();
          case 1:
            expect(mockShowNotification).not.toHaveBeenCalled();
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
  describe('requiresAuth', function () {
    test('should return true by default', function () {
      expect(basePage.requiresAuth).toBe(true);
    });
  });
  describe('event listeners', function () {
    test('should add event listener', function () {
      var mockElement = document.createElement('div');
      var mockHandler = jest.fn();
      basePage.addEventListener(mockElement, 'click', mockHandler);
      expect(basePage.eventListeners.size).toBe(1);
    });
    test('should remove event listener', function () {
      var mockElement = document.createElement('div');
      var mockHandler = jest.fn();
      basePage.addEventListener(mockElement, 'click', mockHandler);
      basePage.removeEventListener(mockElement, 'click', mockHandler);
      expect(basePage.eventListeners.size).toBe(0);
    });
    test('should cleanup all event listeners', function () {
      var mockElement = document.createElement('div');
      var mockHandler = jest.fn();
      basePage.addEventListener(mockElement, 'click', mockHandler);
      basePage.cleanup();
      expect(basePage.eventListeners.size).toBe(0);
    });
  });
  describe('data management', function () {
    test('should save data to Supabase when available', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var testData, result;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            testData = {
              test: 'data'
            };
            mockSupabaseService.isAvailable.mockReturnValue(true);
            mockSupabaseService.saveData.mockResolvedValue(testData);
            _context6.n = 1;
            return basePage.saveData(testData);
          case 1:
            result = _context6.v;
            expect(mockSupabaseService.saveData).toHaveBeenCalledWith(testData);
            expect(result).toBe(testData);
          case 2:
            return _context6.a(2);
        }
      }, _callee6);
    })));
    test('should save data to localStorage when Supabase unavailable', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      var testData, result;
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            testData = {
              test: 'data'
            };
            mockSupabaseService.isAvailable.mockReturnValue(false);
            _context7.n = 1;
            return basePage.saveData(testData);
          case 1:
            result = _context7.v;
            expect(result).toHaveProperty('id');
            expect(result).toHaveProperty('timestamp');
            expect(result.test).toBe('data');
          case 2:
            return _context7.a(2);
        }
      }, _callee7);
    })));
    test('should load data from Supabase when available', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
      var testData, result;
      return _regenerator().w(function (_context8) {
        while (1) switch (_context8.n) {
          case 0:
            testData = [{
              test: 'data'
            }];
            mockSupabaseService.isAvailable.mockReturnValue(true);
            mockSupabaseService.loadData.mockResolvedValue(testData);
            _context8.n = 1;
            return basePage.loadDataFromStorage();
          case 1:
            result = _context8.v;
            expect(mockSupabaseService.loadData).toHaveBeenCalledWith('base');
            expect(result).toBe(testData);
          case 2:
            return _context8.a(2);
        }
      }, _callee8);
    })));
    test('should load data from localStorage when Supabase unavailable', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {
      var testData, mockData, result;
      return _regenerator().w(function (_context9) {
        while (1) switch (_context9.n) {
          case 0:
            testData = [{
              test: 'data'
            }];
            mockSupabaseService.isAvailable.mockReturnValue(false);

            // localStorageをモック
            mockData = JSON.stringify(testData);
            Object.defineProperty(window, 'localStorage', {
              value: {
                getItem: jest.fn().mockReturnValue(mockData)
              },
              writable: true
            });
            _context9.n = 1;
            return basePage.loadDataFromStorage();
          case 1:
            result = _context9.v;
            expect(result).toEqual(testData);
          case 2:
            return _context9.a(2);
        }
      }, _callee9);
    })));
  });
  describe('state management', function () {
    test('should return correct state', function () {
      var state = basePage.getState();
      expect(state).toHaveProperty('pageName', 'base');
      expect(state).toHaveProperty('isInitialized', false);
      expect(state).toHaveProperty('eventListenersCount', 0);
    });
  });
  describe('destroy', function () {
    test('should destroy page', function () {
      var consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
      basePage.destroy();
      expect(basePage.isInitialized).toBe(false);
      expect(consoleLogSpy).toHaveBeenCalledWith('🗑️ base page destroyed');
      consoleLogSpy.mockRestore();
    });
  });
  describe('Guest Mode Authentication', function () {
    beforeEach(function () {
      // ローカルストレージをクリア
      localStorage.clear();
    });
    test('should skip authentication check when guest mode is enabled', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {
      var result;
      return _regenerator().w(function (_context0) {
        while (1) switch (_context0.n) {
          case 0:
            // ゲストモードを有効化
            localStorage.setItem('guestMode', 'true');
            _context0.n = 1;
            return basePage.checkAuthentication();
          case 1:
            result = _context0.v;
            expect(result).toBe(true);
            expect(mockAuthManager.isAuthenticated).not.toHaveBeenCalled();
          case 2:
            return _context0.a(2);
        }
      }, _callee0);
    })));
    test('should proceed with normal authentication when guest mode is disabled', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1() {
      var result;
      return _regenerator().w(function (_context1) {
        while (1) switch (_context1.n) {
          case 0:
            // ゲストモードを無効化
            localStorage.setItem('guestMode', 'false');
            mockSupabaseService.isAvailable.mockReturnValue(true);
            mockAuthManager.isAuthenticated.mockResolvedValue(true);
            _context1.n = 1;
            return basePage.checkAuthentication();
          case 1:
            result = _context1.v;
            expect(result).toBe(true);
            expect(mockAuthManager.isAuthenticated).toHaveBeenCalled();
          case 2:
            return _context1.a(2);
        }
      }, _callee1);
    })));
    test('should handle authentication check with guest mode and Supabase unavailable', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10() {
      var result;
      return _regenerator().w(function (_context10) {
        while (1) switch (_context10.n) {
          case 0:
            // ゲストモードを有効化
            localStorage.setItem('guestMode', 'true');
            mockSupabaseService.isAvailable.mockReturnValue(false);
            _context10.n = 1;
            return basePage.checkAuthentication();
          case 1:
            result = _context10.v;
            expect(result).toBe(true);
            expect(mockAuthManager.isAuthenticated).not.toHaveBeenCalled();
          case 2:
            return _context10.a(2);
        }
      }, _callee10);
    })));
  });
  describe('Error Handling', function () {
    test('should handle authentication check errors gracefully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11() {
      var result;
      return _regenerator().w(function (_context11) {
        while (1) switch (_context11.n) {
          case 0:
            mockSupabaseService.isAvailable.mockReturnValue(true);
            mockAuthManager.isAuthenticated.mockRejectedValue(new Error('Auth error'));
            _context11.n = 1;
            return basePage.checkAuthentication();
          case 1:
            result = _context11.v;
            expect(result).toBe(false);
            expect(mockShowNotification).toHaveBeenCalledWith('ログインが必要です', 'warning');
          case 2:
            return _context11.a(2);
        }
      }, _callee11);
    })));
    test('should handle data loading errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee12() {
      var result;
      return _regenerator().w(function (_context12) {
        while (1) switch (_context12.n) {
          case 0:
            mockSupabaseService.isAvailable.mockReturnValue(true);
            mockSupabaseService.loadData.mockRejectedValue(new Error('Load error'));

            // localStorageをモック
            Object.defineProperty(window, 'localStorage', {
              value: {
                getItem: jest.fn().mockReturnValue('[]')
              },
              writable: true
            });
            _context12.n = 1;
            return basePage.loadDataFromStorage();
          case 1:
            result = _context12.v;
            expect(result).toEqual([]);
          case 2:
            return _context12.a(2);
        }
      }, _callee12);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,