a59fde119ce714129f50c6f90678ebd3
"use strict";

// モックの設定
_getJestObj().mock('../../js/services/supabaseService.js', function () {
  return {
    supabaseService: {
      onAuthStateChange: jest.fn(),
      getCurrentUser: jest.fn(),
      isAvailable: jest.fn(),
      getUserProfile: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/modules/authManager.js', function () {
  return {
    authManager: {
      isAuthenticated: jest.fn(),
      updateAuthUI: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    safeAsync: jest.fn(),
    safeGetElement: jest.fn()
  };
});
_getJestObj().mock('../../js/utils/validation.js', function () {
  return {
    globalFormValidator: {
      validateField: jest.fn(),
      clearErrors: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/utils/TooltipManager.js', function () {
  return {
    tooltipManager: {
      initialize: jest.fn(),
      addTooltip: jest.fn()
    }
  };
});
var _settingsPage = _interopRequireDefault(require("../../js/pages/settingsPage.js"));
var _supabaseService = require("../../js/services/supabaseService.js");
var _authManager = require("../../js/modules/authManager.js");
var _helpers = require("../../js/utils/helpers.js");
var _validation = require("../../js/utils/validation.js");
var _TooltipManager = require("../../js/utils/TooltipManager.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
/**
 * SettingsPage テストスイート
 */
describe('SettingsPage', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    document.body.innerHTML = '<div id="main-content"></div>';
    _helpers.safeGetElement.mockReturnValue(document.querySelector('#main-content'));
  });
  describe('constructor', function () {
    it('should initialize with default values', function () {
      expect(_settingsPage["default"].userProfile).toBe(null);
      expect(_settingsPage["default"].isLoading).toBe(false);
    });
  });
  describe('initialize', function () {
    it('should initialize successfully when authenticated', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var consoleSpy;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            _helpers.safeAsync.mockImplementation(/*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(fn) {
                return _regenerator().w(function (_context) {
                  while (1) switch (_context.n) {
                    case 0:
                      _context.n = 1;
                      return fn();
                    case 1:
                      return _context.a(2, _context.v);
                  }
                }, _callee);
              }));
              return function (_x) {
                return _ref2.apply(this, arguments);
              };
            }());
            _context2.n = 1;
            return _settingsPage["default"].initialize();
          case 1:
            expect(consoleSpy).toHaveBeenCalledWith('Settings page initialized');
            expect(_helpers.safeAsync).toHaveBeenCalled();
            consoleSpy.mockRestore();
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    it('should show login prompt when not authenticated', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            _helpers.safeAsync.mockImplementation(/*#__PURE__*/function () {
              var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(fn) {
                return _regenerator().w(function (_context3) {
                  while (1) switch (_context3.n) {
                    case 0:
                      _context3.n = 1;
                      return fn();
                    case 1:
                      return _context3.a(2, _context3.v);
                  }
                }, _callee3);
              }));
              return function (_x2) {
                return _ref4.apply(this, arguments);
              };
            }());
            _context4.n = 1;
            return _settingsPage["default"].initialize();
          case 1:
            expect(_helpers.safeAsync).toHaveBeenCalled();
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    it('should setup auth state listener', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            _helpers.safeAsync.mockImplementation(/*#__PURE__*/function () {
              var _ref6 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(fn) {
                return _regenerator().w(function (_context5) {
                  while (1) switch (_context5.n) {
                    case 0:
                      _context5.n = 1;
                      return fn();
                    case 1:
                      return _context5.a(2, _context5.v);
                  }
                }, _callee5);
              }));
              return function (_x3) {
                return _ref6.apply(this, arguments);
              };
            }());
            _context6.n = 1;
            return _settingsPage["default"].initialize();
          case 1:
            expect(_helpers.safeAsync).toHaveBeenCalled();
          case 2:
            return _context6.a(2);
        }
      }, _callee6);
    })));
  });
  describe('setupAuthStateListener', function () {
    it('should setup auth state change listener', function () {
      var mockCallback = jest.fn();
      _supabaseService.supabaseService.onAuthStateChange.mockImplementation(function (callback) {
        mockCallback.mockImplementation(callback);
      });
      _settingsPage["default"].setupAuthStateListener();
      expect(_supabaseService.supabaseService.onAuthStateChange).toHaveBeenCalled();
    });
    it('should handle sign out event', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      var consoleSpy, mockCallback;
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            mockCallback = jest.fn();
            _supabaseService.supabaseService.onAuthStateChange.mockImplementation(function (callback) {
              mockCallback.mockImplementation(callback);
            });
            _settingsPage["default"].setupAuthStateListener();

            // シミュレート: ユーザーがサインアウト
            _context7.n = 1;
            return mockCallback('SIGNED_OUT', null);
          case 1:
            expect(consoleSpy).toHaveBeenCalledWith('User signed out, showing login prompt');
            consoleSpy.mockRestore();
          case 2:
            return _context7.a(2);
        }
      }, _callee7);
    })));
  });
  describe('showLoginPrompt', function () {
    it('should render login prompt', function () {
      _settingsPage["default"].showLoginPrompt();
      var mainContent = document.querySelector('#main-content');
      expect(mainContent.innerHTML).toContain('ログインが必要です');
      expect(mainContent.innerHTML).toContain('ログイン');
      expect(mainContent.innerHTML).toContain('ホームに戻る');
    });
    it('should return early if main content is not found', function () {
      _helpers.safeGetElement.mockReturnValue(null);
      expect(function () {
        return _settingsPage["default"].showLoginPrompt();
      }).not.toThrow();
    });
  });
  describe('renderSettingsPage', function () {
    it('should render settings page content', function () {
      _settingsPage["default"].renderSettingsPage();
      var mainContent = document.querySelector('#main-content');
      expect(mainContent.innerHTML).toContain('設定');
    });
  });
  describe('setupTooltips', function () {
    it('should setup tooltips for settings page', function () {
      var consoleSpy = jest.spyOn(console, 'log').mockImplementation();
      _settingsPage["default"].setupTooltips();
      expect(_TooltipManager.tooltipManager.addTooltip).toHaveBeenCalled();
      expect(consoleSpy).toHaveBeenCalledWith('Setting up tooltips for settings page');
      expect(consoleSpy).toHaveBeenCalledWith('✅ Tooltips setup complete for settings page');
      consoleSpy.mockRestore();
    });
    it('should handle tooltip setup errors', function () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      _TooltipManager.tooltipManager.addTooltip.mockImplementation(function () {
        throw new Error('Tooltip setup failed');
      });
      _settingsPage["default"].setupTooltips();
      expect(consoleSpy).toHaveBeenCalledWith('❌ Failed to setup tooltips:', expect.any(Error));
      consoleSpy.mockRestore();
    });
  });
  describe('integration', function () {
    it('should complete full initialization flow when authenticated', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {
      var consoleSpy;
      return _regenerator().w(function (_context9) {
        while (1) switch (_context9.n) {
          case 0:
            consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            _authManager.authManager.isAuthenticated.mockResolvedValue(true);
            _authManager.authManager.updateAuthUI.mockResolvedValue();
            _helpers.safeAsync.mockImplementation(/*#__PURE__*/function () {
              var _ref9 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(fn) {
                return _regenerator().w(function (_context8) {
                  while (1) switch (_context8.n) {
                    case 0:
                      _context8.n = 1;
                      return fn();
                    case 1:
                      return _context8.a(2, _context8.v);
                  }
                }, _callee8);
              }));
              return function (_x4) {
                return _ref9.apply(this, arguments);
              };
            }());
            _context9.n = 1;
            return _settingsPage["default"].initialize();
          case 1:
            expect(consoleSpy).toHaveBeenCalledWith('Settings page initialized');
            expect(_TooltipManager.tooltipManager.initialize).toHaveBeenCalled();
            consoleSpy.mockRestore();
          case 2:
            return _context9.a(2);
        }
      }, _callee9);
    })));
    it('should handle initialization errors gracefully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {
      var consoleSpy, _t;
      return _regenerator().w(function (_context0) {
        while (1) switch (_context0.p = _context0.n) {
          case 0:
            consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            _authManager.authManager.isAuthenticated.mockRejectedValue(new Error('Auth check failed'));
            _context0.p = 1;
            _context0.n = 2;
            return _settingsPage["default"].initialize();
          case 2:
            _context0.n = 4;
            break;
          case 3:
            _context0.p = 3;
            _t = _context0.v;
            // エラーが発生することを確認
            expect(_t.message).toBe('Auth check failed');
          case 4:
            consoleSpy.mockRestore();
          case 5:
            return _context0.a(2);
        }
      }, _callee0, null, [[1, 3]]);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,