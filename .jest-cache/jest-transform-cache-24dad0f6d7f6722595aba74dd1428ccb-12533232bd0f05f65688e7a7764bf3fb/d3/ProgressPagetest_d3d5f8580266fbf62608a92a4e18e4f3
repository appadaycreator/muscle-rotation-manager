3bab1e7e0f4f5e18cfb034e27a5d0389
"use strict";

// ProgressPage.test.js - ProgressPageクラスのテスト

// モック
_getJestObj().mock('../../js/services/progressiveOverloadService.js', function () {
  return {
    progressiveOverloadService: {
      getOverallProgress: jest.fn().mockResolvedValue({
        totalWorkouts: 10,
        overallMetrics: {
          totalVolume: 5000,
          averageVolumePerWorkout: 500
        },
        consistencyScore: 85,
        muscleGroupProgress: {
          chest: {
            totalSessions: 5,
            totalVolume: 2500,
            averageVolumePerSession: 500,
            frequencyAnalysis: {
              frequencyScore: 80,
              averageDaysBetween: 3
            }
          }
        },
        recommendations: [{
          priority: 'high',
          message: 'テスト推奨事項',
          action: 'テストアクション'
        }]
      }),
      getExerciseProgress: jest.fn().mockResolvedValue({
        progressMetrics: {
          volumeProgression: 15,
          intensityProgression: 10,
          consistencyScore: 85,
          averageWeight: 60,
          averageReps: 10,
          averageSets: 3
        },
        recommendations: [{
          priority: 'medium',
          message: 'テスト推奨事項',
          action: 'テストアクション'
        }]
      }),
      getMuscleGroupProgress: jest.fn().mockResolvedValue({
        totalSessions: 5,
        frequencyAnalysis: {
          frequencyScore: 80,
          averageDaysBetween: 3
        },
        exercises: {
          exerciseCounts: {
            'ベンチプレス': 3,
            'プッシュアップ': 2
          },
          exerciseProgress: {
            'ベンチプレス': {
              weightProgress: 10
            }
          }
        },
        recommendations: [{
          priority: 'low',
          message: 'テスト推奨事項',
          action: 'テストアクション'
        }]
      })
    }
  };
});
_getJestObj().mock('../../js/services/workoutDataService.js', function () {
  return {
    workoutDataService: {
      getWorkoutHistory: jest.fn().mockResolvedValue([]),
      getMuscleGroupStats: jest.fn().mockResolvedValue({})
    }
  };
});
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    safeGetElement: jest.fn(function (id) {
      var mockElement = {
        id: id,
        innerHTML: '',
        appendChild: jest.fn(),
        removeChild: jest.fn()
      };
      return mockElement;
    }),
    showNotification: jest.fn()
  };
});
_getJestObj().mock('../../js/utils/errorHandler.js', function () {
  return {
    handleError: jest.fn()
  };
});
_getJestObj().mock('../../js/core/BasePage.js', function () {
  return {
    BasePage: jest.fn().mockImplementation(function () {
      return {
        pageName: 'ProgressPage',
        handleError: jest.fn()
      };
    })
  };
});
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, "default": e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require7 = require("@jest/globals"),
    jest = _require7.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ProgressPage', function () {
  var ProgressPage;
  var progressPage;
  var mockContainer;
  beforeEach(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
    var _require, safeGetElement, module;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          // DOM要素のモック
          mockContainer = document.createElement('div');
          mockContainer.id = 'main-content';
          document.body.appendChild(mockContainer);

          // safeGetElementのモックを設定
          _require = require('../../js/utils/helpers.js'), safeGetElement = _require.safeGetElement;
          safeGetElement.mockImplementation(function (id) {
            var element = document.getElementById(id);
            if (element) {
              return element;
            }
            var mockElement = document.createElement('div');
            mockElement.id = id;
            return mockElement;
          });

          // ProgressPageクラスを動的にインポート
          _context.n = 1;
          return Promise.resolve().then(function () {
            return _interopRequireWildcard(require('../../js/pages/progressPage.js'));
          });
        case 1:
          module = _context.v;
          ProgressPage = module["default"] || module.ProgressPage;

          // ProgressPageのインスタンスを作成
          progressPage = new ProgressPage();
        case 2:
          return _context.a(2);
      }
    }, _callee);
  })));
  afterEach(function () {
    document.body.removeChild(mockContainer);
    jest.clearAllMocks();
  });
  describe('初期化', function () {
    test('should initialize successfully', function () {
      expect(progressPage).toBeDefined();
      expect(progressPage.pageName).toBe('ProgressPage');
    });
    test('should have required properties', function () {
      expect(progressPage.workoutData).toEqual([]);
      expect(progressPage.progressiveOverloadData).toBeNull();
    });
  });
  describe('サンプルデータ生成', function () {
    test('should generate sample workout data', function () {
      var sampleData = progressPage.generateSampleWorkoutData();
      expect(Array.isArray(sampleData)).toBe(true);
      expect(sampleData.length).toBeGreaterThan(0);

      // サンプルデータの構造を確認
      var firstWorkout = sampleData[0];
      expect(firstWorkout).toHaveProperty('id');
      expect(firstWorkout).toHaveProperty('date');
      expect(firstWorkout).toHaveProperty('muscle_groups');
      expect(firstWorkout).toHaveProperty('exercises');
      expect(firstWorkout).toHaveProperty('duration');
    });
    test('should generate realistic workout parameters', function () {
      var sampleData = progressPage.generateSampleWorkoutData();
      sampleData.forEach(function (workout) {
        if (workout.exercises && workout.exercises.length > 0) {
          workout.exercises.forEach(function (exercise) {
            expect(exercise.sets).toBeLessThanOrEqual(3); // セット数は3以下
            expect(exercise.reps).toBeLessThanOrEqual(15); // 回数は15以下
            expect(exercise.weight).toBeLessThanOrEqual(100); // 重量は100以下
          });
        }
      });
    });
  });
  describe('プログレッシブ・オーバーロード分析', function () {
    test('should load progressive overload data', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var _require2, progressiveOverloadService;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            // モックが正しく設定されていることを確認
            _require2 = require('../../js/services/progressiveOverloadService.js'), progressiveOverloadService = _require2.progressiveOverloadService;
            expect(progressiveOverloadService.getOverallProgress).toBeDefined();
            _context2.n = 1;
            return progressPage.loadProgressiveOverloadData();
          case 1:
            expect(progressPage.progressiveOverloadData).toBeDefined();
            expect(progressPage.progressiveOverloadData.totalWorkouts).toBe(10);
            expect(progressPage.progressiveOverloadData.overallMetrics.totalVolume).toBe(5000);
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    test('should handle progressive overload data loading errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var _require3, progressiveOverloadService, consoleSpy;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            _require3 = require('../../js/services/progressiveOverloadService.js'), progressiveOverloadService = _require3.progressiveOverloadService;
            progressiveOverloadService.getOverallProgress.mockRejectedValueOnce(new Error('Test error'));
            consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            _context3.n = 1;
            return progressPage.loadProgressiveOverloadData();
          case 1:
            expect(consoleSpy).toHaveBeenCalled();
            consoleSpy.mockRestore();
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
  });
  describe('エクササイズ分析', function () {
    test('should calculate exercise stats correctly', function () {
      var mockExerciseData = [{
        date: '2024-01-01',
        exercises: [{
          name: 'ベンチプレス',
          weight: 60,
          reps: 10,
          sets: 3
        }, {
          name: 'プッシュアップ',
          weight: 0,
          reps: 15,
          sets: 2
        }]
      }, {
        date: '2024-01-02',
        exercises: [{
          name: 'ベンチプレス',
          weight: 65,
          reps: 10,
          sets: 3
        }]
      }];
      var stats = progressPage.calculateExerciseStats(mockExerciseData, 'ベンチプレス');
      expect(stats.totalSessions).toBe(2);
      expect(stats.maxWeight).toBe(65);
      expect(stats.avgWeight).toBe(63); // (60 + 65) / 2 = 62.5, rounded to 63
      expect(stats.totalVolume).toBe(1800 + 1950); // (60*10*3) + (65*10*3)
      expect(stats.progressRate).toBeGreaterThan(0);
    });
    test('should handle empty exercise data', function () {
      var stats = progressPage.calculateExerciseStats([], 'ベンチプレス');
      expect(stats.totalSessions).toBe(0);
      expect(stats.maxWeight).toBe(0);
      expect(stats.avgWeight).toBe(0);
      expect(stats.totalVolume).toBe(0);
      expect(stats.progressRate).toBe(0);
    });
  });
  describe('筋肉部位分析', function () {
    test('should calculate muscle group analysis', function () {
      var mockMuscleData = [{
        date: '2024-01-01',
        muscle_groups: ['chest'],
        exercises: [{
          name: 'ベンチプレス',
          weight: 60,
          reps: 10,
          sets: 3
        }],
        duration: 45
      }, {
        date: '2024-01-02',
        muscle_groups: ['chest'],
        exercises: [{
          name: 'プッシュアップ',
          weight: 0,
          reps: 15,
          sets: 2
        }],
        duration: 30
      }];
      var analysis = progressPage.calculateMuscleGroupAnalysis(mockMuscleData);
      expect(analysis.totalSessions).toBe(2);
      expect(analysis.totalVolume).toBe(1800); // 60*10*3 + 0*15*2
      expect(analysis.averageVolumePerSession).toBe(900);
      expect(analysis.totalDuration).toBe(75);
    });
  });
  describe('レンダリング', function () {
    test('should render exercise analysis', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var container, _require4, progressiveOverloadService;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            container = document.createElement('div');
            container.id = 'exercise-analysis';
            document.body.appendChild(container);

            // モックが正しく設定されていることを確認
            _require4 = require('../../js/services/progressiveOverloadService.js'), progressiveOverloadService = _require4.progressiveOverloadService;
            expect(progressiveOverloadService.getExerciseProgress).toBeDefined();
            _context4.n = 1;
            return progressPage.renderExerciseAnalysisFromService('ベンチプレス');
          case 1:
            // コンテナに何かが表示されることを確認
            expect(container.innerHTML).toBeTruthy();
            document.body.removeChild(container);
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    test('should render muscle group analysis', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var container, _require5, progressiveOverloadService;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            container = document.createElement('div');
            container.id = 'muscle-group-analysis';
            document.body.appendChild(container);

            // モックが正しく設定されていることを確認
            _require5 = require('../../js/services/progressiveOverloadService.js'), progressiveOverloadService = _require5.progressiveOverloadService;
            expect(progressiveOverloadService.getMuscleGroupProgress).toBeDefined();
            _context5.n = 1;
            return progressPage.renderMuscleGroupAnalysis('chest');
          case 1:
            // コンテナに何かが表示されることを確認
            expect(container.innerHTML).toBeTruthy();
            document.body.removeChild(container);
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
  describe('エラーハンドリング', function () {
    test('should handle rendering errors gracefully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var container, _require6, progressiveOverloadService;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            container = document.createElement('div');
            container.id = 'exercise-analysis';
            document.body.appendChild(container);

            // モックサービスでエラーを発生させる
            _require6 = require('../../js/services/progressiveOverloadService.js'), progressiveOverloadService = _require6.progressiveOverloadService;
            progressiveOverloadService.getExerciseProgress.mockRejectedValueOnce(new Error('Test error'));
            _context6.n = 1;
            return progressPage.renderExerciseAnalysisFromService('ベンチプレス');
          case 1:
            // コンテナに何かが表示されることを確認（エラーメッセージまたはローディング状態）
            expect(container.innerHTML).toBeTruthy();
            document.body.removeChild(container);
          case 2:
            return _context6.a(2);
        }
      }, _callee6);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJwcm9ncmVzc2l2ZU92ZXJsb2FkU2VydmljZSIsImdldE92ZXJhbGxQcm9ncmVzcyIsImplc3QiLCJmbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwidG90YWxXb3Jrb3V0cyIsIm92ZXJhbGxNZXRyaWNzIiwidG90YWxWb2x1bWUiLCJhdmVyYWdlVm9sdW1lUGVyV29ya291dCIsImNvbnNpc3RlbmN5U2NvcmUiLCJtdXNjbGVHcm91cFByb2dyZXNzIiwiY2hlc3QiLCJ0b3RhbFNlc3Npb25zIiwiYXZlcmFnZVZvbHVtZVBlclNlc3Npb24iLCJmcmVxdWVuY3lBbmFseXNpcyIsImZyZXF1ZW5jeVNjb3JlIiwiYXZlcmFnZURheXNCZXR3ZWVuIiwicmVjb21tZW5kYXRpb25zIiwicHJpb3JpdHkiLCJtZXNzYWdlIiwiYWN0aW9uIiwiZ2V0RXhlcmNpc2VQcm9ncmVzcyIsInByb2dyZXNzTWV0cmljcyIsInZvbHVtZVByb2dyZXNzaW9uIiwiaW50ZW5zaXR5UHJvZ3Jlc3Npb24iLCJhdmVyYWdlV2VpZ2h0IiwiYXZlcmFnZVJlcHMiLCJhdmVyYWdlU2V0cyIsImdldE11c2NsZUdyb3VwUHJvZ3Jlc3MiLCJleGVyY2lzZXMiLCJleGVyY2lzZUNvdW50cyIsImV4ZXJjaXNlUHJvZ3Jlc3MiLCJ3ZWlnaHRQcm9ncmVzcyIsIndvcmtvdXREYXRhU2VydmljZSIsImdldFdvcmtvdXRIaXN0b3J5IiwiZ2V0TXVzY2xlR3JvdXBTdGF0cyIsInNhZmVHZXRFbGVtZW50IiwiaWQiLCJtb2NrRWxlbWVudCIsImlubmVySFRNTCIsImFwcGVuZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJzaG93Tm90aWZpY2F0aW9uIiwiaGFuZGxlRXJyb3IiLCJCYXNlUGFnZSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsInBhZ2VOYW1lIiwiX3R5cGVvZiIsIm8iLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX3JlZ2VuZXJhdG9yIiwiZSIsInQiLCJyIiwibiIsInRvU3RyaW5nVGFnIiwiaSIsImMiLCJHZW5lcmF0b3IiLCJ1IiwiT2JqZWN0IiwiY3JlYXRlIiwiX3JlZ2VuZXJhdG9yRGVmaW5lMiIsImYiLCJwIiwieSIsIkciLCJ2IiwiYSIsImQiLCJiaW5kIiwibGVuZ3RoIiwibCIsIlR5cGVFcnJvciIsImNhbGwiLCJkb25lIiwidmFsdWUiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImRpc3BsYXlOYW1lIiwidyIsIm0iLCJkZWZpbmVQcm9wZXJ0eSIsIl9yZWdlbmVyYXRvckRlZmluZSIsIl9pbnZva2UiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIldlYWtNYXAiLCJfX2VzTW9kdWxlIiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImFzeW5jR2VuZXJhdG9yU3RlcCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsIl9hc3luY1RvR2VuZXJhdG9yIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJfbmV4dCIsIl90aHJvdyIsIl9yZXF1aXJlNyIsInJlcXVpcmUiLCJkZXNjcmliZSIsIlByb2dyZXNzUGFnZSIsInByb2dyZXNzUGFnZSIsIm1vY2tDb250YWluZXIiLCJiZWZvcmVFYWNoIiwiX2NhbGxlZSIsIl9yZXF1aXJlIiwibW9kdWxlIiwiX2NvbnRleHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJib2R5IiwiZWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxNb2NrcyIsInRlc3QiLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsInRvQmUiLCJ3b3Jrb3V0RGF0YSIsInRvRXF1YWwiLCJwcm9ncmVzc2l2ZU92ZXJsb2FkRGF0YSIsInRvQmVOdWxsIiwic2FtcGxlRGF0YSIsImdlbmVyYXRlU2FtcGxlV29ya291dERhdGEiLCJBcnJheSIsImlzQXJyYXkiLCJ0b0JlR3JlYXRlclRoYW4iLCJmaXJzdFdvcmtvdXQiLCJ0b0hhdmVQcm9wZXJ0eSIsImZvckVhY2giLCJ3b3Jrb3V0IiwiZXhlcmNpc2UiLCJzZXRzIiwidG9CZUxlc3NUaGFuT3JFcXVhbCIsInJlcHMiLCJ3ZWlnaHQiLCJfY2FsbGVlMiIsIl9yZXF1aXJlMiIsIl9jb250ZXh0MiIsImxvYWRQcm9ncmVzc2l2ZU92ZXJsb2FkRGF0YSIsIl9jYWxsZWUzIiwiX3JlcXVpcmUzIiwiY29uc29sZVNweSIsIl9jb250ZXh0MyIsIm1vY2tSZWplY3RlZFZhbHVlT25jZSIsIkVycm9yIiwic3B5T24iLCJjb25zb2xlIiwidG9IYXZlQmVlbkNhbGxlZCIsIm1vY2tSZXN0b3JlIiwibW9ja0V4ZXJjaXNlRGF0YSIsImRhdGUiLCJuYW1lIiwic3RhdHMiLCJjYWxjdWxhdGVFeGVyY2lzZVN0YXRzIiwibWF4V2VpZ2h0IiwiYXZnV2VpZ2h0IiwicHJvZ3Jlc3NSYXRlIiwibW9ja011c2NsZURhdGEiLCJtdXNjbGVfZ3JvdXBzIiwiZHVyYXRpb24iLCJhbmFseXNpcyIsImNhbGN1bGF0ZU11c2NsZUdyb3VwQW5hbHlzaXMiLCJ0b3RhbER1cmF0aW9uIiwiX2NhbGxlZTQiLCJjb250YWluZXIiLCJfcmVxdWlyZTQiLCJfY29udGV4dDQiLCJyZW5kZXJFeGVyY2lzZUFuYWx5c2lzRnJvbVNlcnZpY2UiLCJ0b0JlVHJ1dGh5IiwiX2NhbGxlZTUiLCJfcmVxdWlyZTUiLCJfY29udGV4dDUiLCJyZW5kZXJNdXNjbGVHcm91cEFuYWx5c2lzIiwiX2NhbGxlZTYiLCJfcmVxdWlyZTYiLCJfY29udGV4dDYiXSwic291cmNlcyI6WyJQcm9ncmVzc1BhZ2UudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQcm9ncmVzc1BhZ2UudGVzdC5qcyAtIFByb2dyZXNzUGFnZeOCr+ODqeOCueOBruODhuOCueODiFxuXG4vLyDjg6Ljg4Pjgq9cbmplc3QubW9jaygnLi4vLi4vanMvc2VydmljZXMvcHJvZ3Jlc3NpdmVPdmVybG9hZFNlcnZpY2UuanMnLCAoKSA9PiAoe1xuICBwcm9ncmVzc2l2ZU92ZXJsb2FkU2VydmljZToge1xuICAgIGdldE92ZXJhbGxQcm9ncmVzczogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIHRvdGFsV29ya291dHM6IDEwLFxuICAgICAgb3ZlcmFsbE1ldHJpY3M6IHtcbiAgICAgICAgdG90YWxWb2x1bWU6IDUwMDAsXG4gICAgICAgIGF2ZXJhZ2VWb2x1bWVQZXJXb3Jrb3V0OiA1MDAsXG4gICAgICB9LFxuICAgICAgY29uc2lzdGVuY3lTY29yZTogODUsXG4gICAgICBtdXNjbGVHcm91cFByb2dyZXNzOiB7XG4gICAgICAgIGNoZXN0OiB7XG4gICAgICAgICAgdG90YWxTZXNzaW9uczogNSxcbiAgICAgICAgICB0b3RhbFZvbHVtZTogMjUwMCxcbiAgICAgICAgICBhdmVyYWdlVm9sdW1lUGVyU2Vzc2lvbjogNTAwLFxuICAgICAgICAgIGZyZXF1ZW5jeUFuYWx5c2lzOiB7XG4gICAgICAgICAgICBmcmVxdWVuY3lTY29yZTogODAsXG4gICAgICAgICAgICBhdmVyYWdlRGF5c0JldHdlZW46IDNcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgcmVjb21tZW5kYXRpb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgICAgICAgIG1lc3NhZ2U6ICfjg4bjgrnjg4jmjqjlpajkuovpoIUnLFxuICAgICAgICAgIGFjdGlvbjogJ+ODhuOCueODiOOCouOCr+OCt+ODp+ODsydcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pLFxuICAgIGdldEV4ZXJjaXNlUHJvZ3Jlc3M6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICBwcm9ncmVzc01ldHJpY3M6IHtcbiAgICAgICAgdm9sdW1lUHJvZ3Jlc3Npb246IDE1LFxuICAgICAgICBpbnRlbnNpdHlQcm9ncmVzc2lvbjogMTAsXG4gICAgICAgIGNvbnNpc3RlbmN5U2NvcmU6IDg1LFxuICAgICAgICBhdmVyYWdlV2VpZ2h0OiA2MCxcbiAgICAgICAgYXZlcmFnZVJlcHM6IDEwLFxuICAgICAgICBhdmVyYWdlU2V0czogM1xuICAgICAgfSxcbiAgICAgIHJlY29tbWVuZGF0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJpb3JpdHk6ICdtZWRpdW0nLFxuICAgICAgICAgIG1lc3NhZ2U6ICfjg4bjgrnjg4jmjqjlpajkuovpoIUnLFxuICAgICAgICAgIGFjdGlvbjogJ+ODhuOCueODiOOCouOCr+OCt+ODp+ODsydcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pLFxuICAgIGdldE11c2NsZUdyb3VwUHJvZ3Jlc3M6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICB0b3RhbFNlc3Npb25zOiA1LFxuICAgICAgZnJlcXVlbmN5QW5hbHlzaXM6IHtcbiAgICAgICAgZnJlcXVlbmN5U2NvcmU6IDgwLFxuICAgICAgICBhdmVyYWdlRGF5c0JldHdlZW46IDNcbiAgICAgIH0sXG4gICAgICBleGVyY2lzZXM6IHtcbiAgICAgICAgZXhlcmNpc2VDb3VudHM6IHtcbiAgICAgICAgICAn44OZ44Oz44OB44OX44Os44K5JzogMyxcbiAgICAgICAgICAn44OX44OD44K344Ol44Ki44OD44OXJzogMlxuICAgICAgICB9LFxuICAgICAgICBleGVyY2lzZVByb2dyZXNzOiB7XG4gICAgICAgICAgJ+ODmeODs+ODgeODl+ODrOOCuSc6IHtcbiAgICAgICAgICAgIHdlaWdodFByb2dyZXNzOiAxMFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlY29tbWVuZGF0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJpb3JpdHk6ICdsb3cnLFxuICAgICAgICAgIG1lc3NhZ2U6ICfjg4bjgrnjg4jmjqjlpajkuovpoIUnLFxuICAgICAgICAgIGFjdGlvbjogJ+ODhuOCueODiOOCouOCr+OCt+ODp+ODsydcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gIH1cbn0pKTtcblxuamVzdC5tb2NrKCcuLi8uLi9qcy9zZXJ2aWNlcy93b3Jrb3V0RGF0YVNlcnZpY2UuanMnLCAoKSA9PiAoe1xuICB3b3Jrb3V0RGF0YVNlcnZpY2U6IHtcbiAgICBnZXRXb3Jrb3V0SGlzdG9yeTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtdKSxcbiAgICBnZXRNdXNjbGVHcm91cFN0YXRzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe30pLFxuICB9LFxufSkpO1xuXG5qZXN0Lm1vY2soJy4uLy4uL2pzL3V0aWxzL2hlbHBlcnMuanMnLCAoKSA9PiAoe1xuICBzYWZlR2V0RWxlbWVudDogamVzdC5mbigoaWQpID0+IHtcbiAgICBjb25zdCBtb2NrRWxlbWVudCA9IHsgaWQsIGlubmVySFRNTDogJycsIGFwcGVuZENoaWxkOiBqZXN0LmZuKCksIHJlbW92ZUNoaWxkOiBqZXN0LmZuKCkgfTtcbiAgICByZXR1cm4gbW9ja0VsZW1lbnQ7XG4gIH0pLFxuICBzaG93Tm90aWZpY2F0aW9uOiBqZXN0LmZuKCksXG59KSk7XG5cbmplc3QubW9jaygnLi4vLi4vanMvdXRpbHMvZXJyb3JIYW5kbGVyLmpzJywgKCkgPT4gKHtcbiAgaGFuZGxlRXJyb3I6IGplc3QuZm4oKSxcbn0pKTtcblxuamVzdC5tb2NrKCcuLi8uLi9qcy9jb3JlL0Jhc2VQYWdlLmpzJywgKCkgPT4gKHtcbiAgQmFzZVBhZ2U6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICBwYWdlTmFtZTogJ1Byb2dyZXNzUGFnZScsXG4gICAgaGFuZGxlRXJyb3I6IGplc3QuZm4oKSxcbiAgfSkpLFxufSkpO1xuXG5kZXNjcmliZSgnUHJvZ3Jlc3NQYWdlJywgKCkgPT4ge1xuICBsZXQgUHJvZ3Jlc3NQYWdlO1xuICBsZXQgcHJvZ3Jlc3NQYWdlO1xuICBsZXQgbW9ja0NvbnRhaW5lcjtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAvLyBET03opoHntKDjga7jg6Ljg4Pjgq9cbiAgICBtb2NrQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbW9ja0NvbnRhaW5lci5pZCA9ICdtYWluLWNvbnRlbnQnO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobW9ja0NvbnRhaW5lcik7XG5cbiAgICAvLyBzYWZlR2V0RWxlbWVudOOBruODouODg+OCr+OCkuioreWumlxuICAgIGNvbnN0IHsgc2FmZUdldEVsZW1lbnQgfSA9IHJlcXVpcmUoJy4uLy4uL2pzL3V0aWxzL2hlbHBlcnMuanMnKTtcbiAgICBzYWZlR2V0RWxlbWVudC5tb2NrSW1wbGVtZW50YXRpb24oKGlkKSA9PiB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9XG4gICAgICBjb25zdCBtb2NrRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgbW9ja0VsZW1lbnQuaWQgPSBpZDtcbiAgICAgIHJldHVybiBtb2NrRWxlbWVudDtcbiAgICB9KTtcblxuICAgIC8vIFByb2dyZXNzUGFnZeOCr+ODqeOCueOCkuWLleeahOOBq+OCpOODs+ODneODvOODiFxuICAgIGNvbnN0IG1vZHVsZSA9IGF3YWl0IGltcG9ydCgnLi4vLi4vanMvcGFnZXMvcHJvZ3Jlc3NQYWdlLmpzJyk7XG4gICAgUHJvZ3Jlc3NQYWdlID0gbW9kdWxlLmRlZmF1bHQgfHwgbW9kdWxlLlByb2dyZXNzUGFnZTtcbiAgICBcbiAgICAvLyBQcm9ncmVzc1BhZ2Xjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJBcbiAgICBwcm9ncmVzc1BhZ2UgPSBuZXcgUHJvZ3Jlc3NQYWdlKCk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChtb2NrQ29udGFpbmVyKTtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+WIneacn+WMlicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgaW5pdGlhbGl6ZSBzdWNjZXNzZnVsbHknLCAoKSA9PiB7XG4gICAgICBleHBlY3QocHJvZ3Jlc3NQYWdlKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHByb2dyZXNzUGFnZS5wYWdlTmFtZSkudG9CZSgnUHJvZ3Jlc3NQYWdlJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGF2ZSByZXF1aXJlZCBwcm9wZXJ0aWVzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHByb2dyZXNzUGFnZS53b3Jrb3V0RGF0YSkudG9FcXVhbChbXSk7XG4gICAgICBleHBlY3QocHJvZ3Jlc3NQYWdlLnByb2dyZXNzaXZlT3ZlcmxvYWREYXRhKS50b0JlTnVsbCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn44K144Oz44OX44Or44OH44O844K/55Sf5oiQJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBnZW5lcmF0ZSBzYW1wbGUgd29ya291dCBkYXRhJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc2FtcGxlRGF0YSA9IHByb2dyZXNzUGFnZS5nZW5lcmF0ZVNhbXBsZVdvcmtvdXREYXRhKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHNhbXBsZURhdGEpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHNhbXBsZURhdGEubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBcbiAgICAgIC8vIOOCteODs+ODl+ODq+ODh+ODvOOCv+OBruani+mAoOOCkueiuuiqjVxuICAgICAgY29uc3QgZmlyc3RXb3Jrb3V0ID0gc2FtcGxlRGF0YVswXTtcbiAgICAgIGV4cGVjdChmaXJzdFdvcmtvdXQpLnRvSGF2ZVByb3BlcnR5KCdpZCcpO1xuICAgICAgZXhwZWN0KGZpcnN0V29ya291dCkudG9IYXZlUHJvcGVydHkoJ2RhdGUnKTtcbiAgICAgIGV4cGVjdChmaXJzdFdvcmtvdXQpLnRvSGF2ZVByb3BlcnR5KCdtdXNjbGVfZ3JvdXBzJyk7XG4gICAgICBleHBlY3QoZmlyc3RXb3Jrb3V0KS50b0hhdmVQcm9wZXJ0eSgnZXhlcmNpc2VzJyk7XG4gICAgICBleHBlY3QoZmlyc3RXb3Jrb3V0KS50b0hhdmVQcm9wZXJ0eSgnZHVyYXRpb24nKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBnZW5lcmF0ZSByZWFsaXN0aWMgd29ya291dCBwYXJhbWV0ZXJzJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc2FtcGxlRGF0YSA9IHByb2dyZXNzUGFnZS5nZW5lcmF0ZVNhbXBsZVdvcmtvdXREYXRhKCk7XG4gICAgICBcbiAgICAgIHNhbXBsZURhdGEuZm9yRWFjaCh3b3Jrb3V0ID0+IHtcbiAgICAgICAgaWYgKHdvcmtvdXQuZXhlcmNpc2VzICYmIHdvcmtvdXQuZXhlcmNpc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB3b3Jrb3V0LmV4ZXJjaXNlcy5mb3JFYWNoKGV4ZXJjaXNlID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChleGVyY2lzZS5zZXRzKS50b0JlTGVzc1RoYW5PckVxdWFsKDMpOyAvLyDjgrvjg4Pjg4jmlbDjga8z5Lul5LiLXG4gICAgICAgICAgICBleHBlY3QoZXhlcmNpc2UucmVwcykudG9CZUxlc3NUaGFuT3JFcXVhbCgxNSk7IC8vIOWbnuaVsOOBrzE15Lul5LiLXG4gICAgICAgICAgICBleHBlY3QoZXhlcmNpc2Uud2VpZ2h0KS50b0JlTGVzc1RoYW5PckVxdWFsKDEwMCk7IC8vIOmHjemHj+OBrzEwMOS7peS4i1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+ODl+ODreOCsOODrOODg+OCt+ODluODu+OCquODvOODkOODvOODreODvOODieWIhuaekCcsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgbG9hZCBwcm9ncmVzc2l2ZSBvdmVybG9hZCBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8g44Oi44OD44Kv44GM5q2j44GX44GP6Kit5a6a44GV44KM44Gm44GE44KL44GT44Go44KS56K66KqNXG4gICAgICBjb25zdCB7IHByb2dyZXNzaXZlT3ZlcmxvYWRTZXJ2aWNlIH0gPSByZXF1aXJlKCcuLi8uLi9qcy9zZXJ2aWNlcy9wcm9ncmVzc2l2ZU92ZXJsb2FkU2VydmljZS5qcycpO1xuICAgICAgZXhwZWN0KHByb2dyZXNzaXZlT3ZlcmxvYWRTZXJ2aWNlLmdldE92ZXJhbGxQcm9ncmVzcykudG9CZURlZmluZWQoKTtcbiAgICAgIFxuICAgICAgYXdhaXQgcHJvZ3Jlc3NQYWdlLmxvYWRQcm9ncmVzc2l2ZU92ZXJsb2FkRGF0YSgpO1xuICAgICAgXG4gICAgICBleHBlY3QocHJvZ3Jlc3NQYWdlLnByb2dyZXNzaXZlT3ZlcmxvYWREYXRhKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHByb2dyZXNzUGFnZS5wcm9ncmVzc2l2ZU92ZXJsb2FkRGF0YS50b3RhbFdvcmtvdXRzKS50b0JlKDEwKTtcbiAgICAgIGV4cGVjdChwcm9ncmVzc1BhZ2UucHJvZ3Jlc3NpdmVPdmVybG9hZERhdGEub3ZlcmFsbE1ldHJpY3MudG90YWxWb2x1bWUpLnRvQmUoNTAwMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHByb2dyZXNzaXZlIG92ZXJsb2FkIGRhdGEgbG9hZGluZyBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IHByb2dyZXNzaXZlT3ZlcmxvYWRTZXJ2aWNlIH0gPSByZXF1aXJlKCcuLi8uLi9qcy9zZXJ2aWNlcy9wcm9ncmVzc2l2ZU92ZXJsb2FkU2VydmljZS5qcycpO1xuICAgICAgcHJvZ3Jlc3NpdmVPdmVybG9hZFNlcnZpY2UuZ2V0T3ZlcmFsbFByb2dyZXNzLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ1Rlc3QgZXJyb3InKSk7XG5cbiAgICAgIGNvbnN0IGNvbnNvbGVTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuICAgICAgXG4gICAgICBhd2FpdCBwcm9ncmVzc1BhZ2UubG9hZFByb2dyZXNzaXZlT3ZlcmxvYWREYXRhKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChjb25zb2xlU3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBjb25zb2xlU3B5Lm1vY2tSZXN0b3JlKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfjgqjjgq/jgrXjgrXjgqTjgrrliIbmnpAnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGNhbGN1bGF0ZSBleGVyY2lzZSBzdGF0cyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrRXhlcmNpc2VEYXRhID0gW1xuICAgICAgICB7XG4gICAgICAgICAgZGF0ZTogJzIwMjQtMDEtMDEnLFxuICAgICAgICAgIGV4ZXJjaXNlczogW1xuICAgICAgICAgICAgeyBuYW1lOiAn44OZ44Oz44OB44OX44Os44K5Jywgd2VpZ2h0OiA2MCwgcmVwczogMTAsIHNldHM6IDMgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ+ODl+ODg+OCt+ODpeOCouODg+ODlycsIHdlaWdodDogMCwgcmVwczogMTUsIHNldHM6IDIgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGF0ZTogJzIwMjQtMDEtMDInLFxuICAgICAgICAgIGV4ZXJjaXNlczogW1xuICAgICAgICAgICAgeyBuYW1lOiAn44OZ44Oz44OB44OX44Os44K5Jywgd2VpZ2h0OiA2NSwgcmVwczogMTAsIHNldHM6IDMgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgY29uc3Qgc3RhdHMgPSBwcm9ncmVzc1BhZ2UuY2FsY3VsYXRlRXhlcmNpc2VTdGF0cyhtb2NrRXhlcmNpc2VEYXRhLCAn44OZ44Oz44OB44OX44Os44K5Jyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChzdGF0cy50b3RhbFNlc3Npb25zKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KHN0YXRzLm1heFdlaWdodCkudG9CZSg2NSk7XG4gICAgICBleHBlY3Qoc3RhdHMuYXZnV2VpZ2h0KS50b0JlKDYzKTsgLy8gKDYwICsgNjUpIC8gMiA9IDYyLjUsIHJvdW5kZWQgdG8gNjNcbiAgICAgIGV4cGVjdChzdGF0cy50b3RhbFZvbHVtZSkudG9CZSgxODAwICsgMTk1MCk7IC8vICg2MCoxMCozKSArICg2NSoxMCozKVxuICAgICAgZXhwZWN0KHN0YXRzLnByb2dyZXNzUmF0ZSkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSBleGVyY2lzZSBkYXRhJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhdHMgPSBwcm9ncmVzc1BhZ2UuY2FsY3VsYXRlRXhlcmNpc2VTdGF0cyhbXSwgJ+ODmeODs+ODgeODl+ODrOOCuScpO1xuICAgICAgXG4gICAgICBleHBlY3Qoc3RhdHMudG90YWxTZXNzaW9ucykudG9CZSgwKTtcbiAgICAgIGV4cGVjdChzdGF0cy5tYXhXZWlnaHQpLnRvQmUoMCk7XG4gICAgICBleHBlY3Qoc3RhdHMuYXZnV2VpZ2h0KS50b0JlKDApO1xuICAgICAgZXhwZWN0KHN0YXRzLnRvdGFsVm9sdW1lKS50b0JlKDApO1xuICAgICAgZXhwZWN0KHN0YXRzLnByb2dyZXNzUmF0ZSkudG9CZSgwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+eti+iCiemDqOS9jeWIhuaekCcsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgY2FsY3VsYXRlIG11c2NsZSBncm91cCBhbmFseXNpcycsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tNdXNjbGVEYXRhID0gW1xuICAgICAgICB7XG4gICAgICAgICAgZGF0ZTogJzIwMjQtMDEtMDEnLFxuICAgICAgICAgIG11c2NsZV9ncm91cHM6IFsnY2hlc3QnXSxcbiAgICAgICAgICBleGVyY2lzZXM6IFtcbiAgICAgICAgICAgIHsgbmFtZTogJ+ODmeODs+ODgeODl+ODrOOCuScsIHdlaWdodDogNjAsIHJlcHM6IDEwLCBzZXRzOiAzIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgICBkdXJhdGlvbjogNDUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkYXRlOiAnMjAyNC0wMS0wMicsXG4gICAgICAgICAgbXVzY2xlX2dyb3VwczogWydjaGVzdCddLFxuICAgICAgICAgIGV4ZXJjaXNlczogW1xuICAgICAgICAgICAgeyBuYW1lOiAn44OX44OD44K344Ol44Ki44OD44OXJywgd2VpZ2h0OiAwLCByZXBzOiAxNSwgc2V0czogMiB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgZHVyYXRpb246IDMwLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgY29uc3QgYW5hbHlzaXMgPSBwcm9ncmVzc1BhZ2UuY2FsY3VsYXRlTXVzY2xlR3JvdXBBbmFseXNpcyhtb2NrTXVzY2xlRGF0YSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChhbmFseXNpcy50b3RhbFNlc3Npb25zKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KGFuYWx5c2lzLnRvdGFsVm9sdW1lKS50b0JlKDE4MDApOyAvLyA2MCoxMCozICsgMCoxNSoyXG4gICAgICBleHBlY3QoYW5hbHlzaXMuYXZlcmFnZVZvbHVtZVBlclNlc3Npb24pLnRvQmUoOTAwKTtcbiAgICAgIGV4cGVjdChhbmFseXNpcy50b3RhbER1cmF0aW9uKS50b0JlKDc1KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+ODrOODs+ODgOODquODs+OCsCcsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIGV4ZXJjaXNlIGFuYWx5c2lzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250YWluZXIuaWQgPSAnZXhlcmNpc2UtYW5hbHlzaXMnO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICAvLyDjg6Ljg4Pjgq/jgYzmraPjgZfjgY/oqK3lrprjgZXjgozjgabjgYTjgovjgZPjgajjgpLnorroqo1cbiAgICAgIGNvbnN0IHsgcHJvZ3Jlc3NpdmVPdmVybG9hZFNlcnZpY2UgfSA9IHJlcXVpcmUoJy4uLy4uL2pzL3NlcnZpY2VzL3Byb2dyZXNzaXZlT3ZlcmxvYWRTZXJ2aWNlLmpzJyk7XG4gICAgICBleHBlY3QocHJvZ3Jlc3NpdmVPdmVybG9hZFNlcnZpY2UuZ2V0RXhlcmNpc2VQcm9ncmVzcykudG9CZURlZmluZWQoKTtcblxuICAgICAgYXdhaXQgcHJvZ3Jlc3NQYWdlLnJlbmRlckV4ZXJjaXNlQW5hbHlzaXNGcm9tU2VydmljZSgn44OZ44Oz44OB44OX44Os44K5Jyk7XG4gICAgICBcbiAgICAgIC8vIOOCs+ODs+ODhuODiuOBq+S9leOBi+OBjOihqOekuuOBleOCjOOCi+OBk+OBqOOCkueiuuiqjVxuICAgICAgZXhwZWN0KGNvbnRhaW5lci5pbm5lckhUTUwpLnRvQmVUcnV0aHkoKTtcbiAgICAgIFxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChjb250YWluZXIpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciBtdXNjbGUgZ3JvdXAgYW5hbHlzaXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRhaW5lci5pZCA9ICdtdXNjbGUtZ3JvdXAtYW5hbHlzaXMnO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICAvLyDjg6Ljg4Pjgq/jgYzmraPjgZfjgY/oqK3lrprjgZXjgozjgabjgYTjgovjgZPjgajjgpLnorroqo1cbiAgICAgIGNvbnN0IHsgcHJvZ3Jlc3NpdmVPdmVybG9hZFNlcnZpY2UgfSA9IHJlcXVpcmUoJy4uLy4uL2pzL3NlcnZpY2VzL3Byb2dyZXNzaXZlT3ZlcmxvYWRTZXJ2aWNlLmpzJyk7XG4gICAgICBleHBlY3QocHJvZ3Jlc3NpdmVPdmVybG9hZFNlcnZpY2UuZ2V0TXVzY2xlR3JvdXBQcm9ncmVzcykudG9CZURlZmluZWQoKTtcblxuICAgICAgYXdhaXQgcHJvZ3Jlc3NQYWdlLnJlbmRlck11c2NsZUdyb3VwQW5hbHlzaXMoJ2NoZXN0Jyk7XG4gICAgICBcbiAgICAgIC8vIOOCs+ODs+ODhuODiuOBq+S9leOBi+OBjOihqOekuuOBleOCjOOCi+OBk+OBqOOCkueiuuiqjVxuICAgICAgZXhwZWN0KGNvbnRhaW5lci5pbm5lckhUTUwpLnRvQmVUcnV0aHkoKTtcbiAgICAgIFxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChjb250YWluZXIpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn44Ko44Op44O844OP44Oz44OJ44Oq44Oz44KwJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgcmVuZGVyaW5nIGVycm9ycyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250YWluZXIuaWQgPSAnZXhlcmNpc2UtYW5hbHlzaXMnO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICAvLyDjg6Ljg4Pjgq/jgrXjg7zjg5Pjgrnjgafjgqjjg6njg7zjgpLnmbrnlJ/jgZXjgZvjgotcbiAgICAgIGNvbnN0IHsgcHJvZ3Jlc3NpdmVPdmVybG9hZFNlcnZpY2UgfSA9IHJlcXVpcmUoJy4uLy4uL2pzL3NlcnZpY2VzL3Byb2dyZXNzaXZlT3ZlcmxvYWRTZXJ2aWNlLmpzJyk7XG4gICAgICBwcm9ncmVzc2l2ZU92ZXJsb2FkU2VydmljZS5nZXRFeGVyY2lzZVByb2dyZXNzLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ1Rlc3QgZXJyb3InKSk7XG5cbiAgICAgIGF3YWl0IHByb2dyZXNzUGFnZS5yZW5kZXJFeGVyY2lzZUFuYWx5c2lzRnJvbVNlcnZpY2UoJ+ODmeODs+ODgeODl+ODrOOCuScpO1xuICAgICAgXG4gICAgICAvLyDjgrPjg7Pjg4bjg4rjgavkvZXjgYvjgYzooajnpLrjgZXjgozjgovjgZPjgajjgpLnorroqo3vvIjjgqjjg6njg7zjg6Hjg4Pjgrvjg7zjgrjjgb7jgZ/jga/jg63jg7zjg4fjgqPjg7PjgrDnirbmhYvvvIlcbiAgICAgIGV4cGVjdChjb250YWluZXIuaW5uZXJIVE1MKS50b0JlVHJ1dGh5KCk7XG4gICAgICBcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUE7QUFDQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsaURBQWlELEVBQUU7RUFBQSxPQUFPO0lBQ2xFQywwQkFBMEIsRUFBRTtNQUMxQkMsa0JBQWtCLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUM7UUFDOUNDLGFBQWEsRUFBRSxFQUFFO1FBQ2pCQyxjQUFjLEVBQUU7VUFDZEMsV0FBVyxFQUFFLElBQUk7VUFDakJDLHVCQUF1QixFQUFFO1FBQzNCLENBQUM7UUFDREMsZ0JBQWdCLEVBQUUsRUFBRTtRQUNwQkMsbUJBQW1CLEVBQUU7VUFDbkJDLEtBQUssRUFBRTtZQUNMQyxhQUFhLEVBQUUsQ0FBQztZQUNoQkwsV0FBVyxFQUFFLElBQUk7WUFDakJNLHVCQUF1QixFQUFFLEdB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