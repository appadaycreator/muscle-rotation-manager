e467102311ea7bb02eb7d14fa8fe8ec6
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tooltipManager = exports.TooltipManager = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * 高度なツールチップ管理システム
 * パフォーマンス最適化、アクセシビリティ対応、完全なテストカバレッジ
 */
var TooltipManager = exports.TooltipManager = /*#__PURE__*/function () {
  function TooltipManager() {
    _classCallCheck(this, TooltipManager);
    this.activeTooltip = null;
    this.hoverTimeout = null;
    this.isInitialized = false;
    this.config = {
      delay: 300,
      hideDelay: 100,
      maxWidth: 400,
      minWidth: 200,
      zIndex: 10000,
      animation: 'fadeIn',
      theme: 'light',
      position: 'top',
      offset: 8,
      arrow: true,
      interactive: false,
      hideOnScroll: true,
      hideOnResize: true,
      hideOnEscape: true,
      accessibility: true
    };
    this.themes = new Map();
    this.animations = new Map();
    this.observers = new Map();
    this.setupThemes();
    this.setupAnimations();
  }

  /**
  * テーマ設定
  */
  return _createClass(TooltipManager, [{
    key: "setupThemes",
    value: function setupThemes() {
      this.themes.set('light', {
        backgroundColor: '#ffffff',
        color: '#1f2937',
        border: '1px solid #e5e7eb',
        boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
        borderRadius: '8px',
        fontSize: '15px',
        lineHeight: '1.6',
        padding: '12px 16px',
        fontFamily: "'Noto Sans JP', 'Inter', sans-serif",
        fontWeight: '400',
        letterSpacing: '0.025em'
      });
      this.themes.set('dark', {
        backgroundColor: '#1f2937',
        color: '#f9fafb',
        border: '1px solid #374151',
        boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.1)',
        borderRadius: '8px',
        fontSize: '15px',
        lineHeight: '1.6',
        padding: '12px 16px',
        fontFamily: "'Noto Sans JP', 'Inter', sans-serif",
        fontWeight: '400',
        letterSpacing: '0.025em'
      });
    }

    /**
    * アニメーション設定
    */
  }, {
    key: "setupAnimations",
    value: function setupAnimations() {
      this.animations.set('fadeIn', {
        show: {
          opacity: '0',
          transform: 'translateY(-5px)',
          transition: 'opacity 0.2s ease, transform 0.2s ease'
        },
        visible: {
          opacity: '1',
          transform: 'translateY(0)',
          transition: 'opacity 0.2s ease, transform 0.2s ease'
        },
        hide: {
          opacity: '0',
          transform: 'translateY(-5px)',
          transition: 'opacity 0.15s ease, transform 0.15s ease'
        }
      });
      this.animations.set('slide', {
        show: {
          opacity: '0',
          transform: 'translateY(10px)',
          transition: 'opacity 0.2s ease, transform 0.2s ease'
        },
        visible: {
          opacity: '1',
          transform: 'translateY(0)',
          transition: 'opacity 0.2s ease, transform 0.2s ease'
        },
        hide: {
          opacity: '0',
          transform: 'translateY(10px)',
          transition: 'opacity 0.15s ease, transform 0.15s ease'
        }
      });
      this.animations.set('scale', {
        show: {
          opacity: '0',
          transform: 'scale(0.95)',
          transition: 'opacity 0.2s ease, transform 0.2s ease'
        },
        visible: {
          opacity: '1',
          transform: 'scale(1)',
          transition: 'opacity 0.2s ease, transform 0.2s ease'
        },
        hide: {
          opacity: '0',
          transform: 'scale(0.95)',
          transition: 'opacity 0.15s ease, transform 0.15s ease'
        }
      });
    }

    /**
    * 初期化
    */
  }, {
    key: "initialize",
    value: function initialize() {
      if (this.isInitialized) {
        return;
      }
      try {
        this.createContainer();
        this.setupEventListeners();
        this.isInitialized = true;
        console.log('✅ TooltipManager initialized');
      } catch (error) {
        console.error('❌ TooltipManager initialization failed:', error);
        throw error;
      }
    }

    /**
    * コンテナ作成
    */
  }, {
    key: "createContainer",
    value: function createContainer() {
      var existingContainer = document.getElementById('tooltip-container');
      if (existingContainer) {
        existingContainer.remove();
      }
      var container = document.createElement('div');
      container.id = 'tooltip-container';
      container.className = 'tooltip-container';
      container.style.cssText = "\n            position: fixed;\n            z-index: ".concat(this.config.zIndex, ";\n            pointer-events: none;\n            opacity: 0;\n            transition: opacity 0.2s ease;\n        ");
      document.body.appendChild(container);
    }

    /**
    * イベントリスナー設定
    */
  }, {
    key: "setupEventListeners",
    value: function setupEventListeners() {
      // マウスオーバー
      document.addEventListener('mouseover', this.handleMouseOver.bind(this), {
        passive: true
      });

      // マウスアウト
      document.addEventListener('mouseout', this.handleMouseOut.bind(this), {
        passive: true
      });

      // マウス移動
      document.addEventListener('mousemove', this.handleMouseMove.bind(this), {
        passive: true
      });

      // スクロール
      if (this.config.hideOnScroll) {
        document.addEventListener('scroll', this.handleScroll.bind(this), {
          passive: true
        });
      }

      // リサイズ
      if (this.config.hideOnResize) {
        window.addEventListener('resize', this.handleResize.bind(this), {
          passive: true
        });
      }

      // エスケープキー
      if (this.config.hideOnEscape) {
        document.addEventListener('keydown', this.handleKeyDown.bind(this));
      }
    }

    /**
    * マウスオーバー処理
    */
  }, {
    key: "handleMouseOver",
    value: function handleMouseOver(event) {
      var _this = this;
      var element = this.findClosestElement(event.target, '[data-tooltip]');
      if (!element) {
        return;
      }

      // 既存のタイムアウトをクリア
      if (this.hoverTimeout) {
        clearTimeout(this.hoverTimeout);
        this.hoverTimeout = null;
      }

      // 遅延後にツールチップを表示
      this.hoverTimeout = setTimeout(function () {
        if (_this.isElementHovered(element)) {
          _this.showTooltip(element, event);
        }
      }, this.config.delay);
    }

    /**
    * マウスアウト処理
    */
  }, {
    key: "handleMouseOut",
    value: function handleMouseOut(event) {
      var _this2 = this;
      var element = this.findClosestElement(event.target, '[data-tooltip]');
      if (!element) {
        return;
      }

      // タイムアウトをクリア
      if (this.hoverTimeout) {
        clearTimeout(this.hoverTimeout);
        this.hoverTimeout = null;
      }

      // 遅延後にツールチップを非表示
      setTimeout(function () {
        if (!_this2.isElementHovered(element)) {
          _this2.hideTooltip();
        }
      }, this.config.hideDelay);
    }

    /**
    * マウス移動処理
    */
  }, {
    key: "handleMouseMove",
    value: function handleMouseMove(event) {
      if (this.activeTooltip) {
        this.updatePosition(event);
      }
    }

    /**
    * スクロール処理
    */
  }, {
    key: "handleScroll",
    value: function handleScroll() {
      this.hideTooltip();
    }

    /**
    * リサイズ処理
    */
  }, {
    key: "handleResize",
    value: function handleResize() {
      this.hideTooltip();
    }

    /**
    * キーダウン処理
    */
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      if (event.key === 'Escape') {
        this.hideTooltip();
      }
    }

    /**
    * 要素がホバーされているかチェック
    */
  }, {
    key: "isElementHovered",
    value: function isElementHovered(element) {
      return element.matches(':hover');
    }

    /**
    * クロスブラウザ対応のclosestメソッド
    */
  }, {
    key: "findClosestElement",
    value: function findClosestElement(element, selector) {
      if (element.closest) {
        return element.closest(selector);
      }

      // フォールバック実装
      while (element && element.nodeType === Node.ELEMENT_NODE) {
        if (element.matches && element.matches(selector)) {
          return element;
        }
        element = element.parentElement;
      }
      return null;
    }

    /**
    * ツールチップ表示
    */
  }, {
    key: "showTooltip",
    value: function showTooltip(element, event) {
      // 既存のツールチップを非表示
      this.hideTooltip();
      var tooltipText = element.getAttribute('data-tooltip');
      if (!tooltipText) {
        return;
      }
      var config = this.getElementConfig(element);
      try {
        this.createTooltip(tooltipText, config, event);
        this.activeTooltip = {
          element: element,
          config: config
        };
      } catch (error) {
        console.error('❌ Failed to show tooltip:', error);
      }
    }

    /**
    * ツールチップ非表示
    */
  }, {
    key: "hideTooltip",
    value: function hideTooltip() {
      var _this3 = this;
      if (!this.activeTooltip) {
        return;
      }
      var container = document.getElementById('tooltip-container');
      if (!container) {
        return;
      }
      var tooltip = container.querySelector('.tooltip');
      if (!tooltip) {
        return;
      }
      var config = this.activeTooltip.config;
      var animation = this.animations.get(config.animation);
      if (animation && animation.hide) {
        Object.assign(tooltip.style, animation.hide);
        setTimeout(function () {
          _this3.removeTooltip();
        }, 150);
      } else {
        this.removeTooltip();
      }
    }

    /**
    * ツールチップ削除
    */
  }, {
    key: "removeTooltip",
    value: function removeTooltip() {
      var container = document.getElementById('tooltip-container');
      if (container) {
        container.innerHTML = '';
        container.style.opacity = '0';
      }
      this.activeTooltip = null;
    }

    /**
    * ツールチップ作成
    */
  }, {
    key: "createTooltip",
    value: function createTooltip(text, config, event) {
      var container = document.getElementById('tooltip-container');
      if (!container) {
        throw new Error('Tooltip container not found');
      }
      var tooltip = document.createElement('div');
      tooltip.className = 'tooltip';
      tooltip.textContent = text;
      tooltip.setAttribute('role', 'tooltip');
      tooltip.setAttribute('aria-hidden', 'false');

      // テーマ適用
      var theme = this.themes.get(config.theme) || this.themes.get('light');
      Object.assign(tooltip.style, _objectSpread({
        position: 'absolute',
        maxWidth: "".concat(config.maxWidth, "px"),
        minWidth: "".concat(config.minWidth, "px"),
        width: 'auto',
        zIndex: this.config.zIndex + 1,
        pointerEvents: 'none',
        whiteSpace: 'pre-wrap',
        wordWrap: 'break-word'
      }, theme));

      // アニメーション適用
      var animation = this.animations.get(config.animation);
      if (animation && animation.show) {
        Object.assign(tooltip.style, animation.show);
      }

      // 矢印追加
      if (config.arrow) {
        this.addArrow(tooltip, config);
      }
      container.appendChild(tooltip);
      container.style.opacity = '1';

      // 位置計算
      this.calculatePosition(tooltip, event, config);

      // アニメーション表示
      requestAnimationFrame(function () {
        if (animation && animation.visible) {
          Object.assign(tooltip.style, animation.visible);
        } else {
          tooltip.style.opacity = '1';
          tooltip.style.transform = 'translateY(0)';
        }
      });
    }

    /**
    * 矢印追加
    */
  }, {
    key: "addArrow",
    value: function addArrow(tooltip, config) {
      var arrow = document.createElement('div');
      arrow.className = 'tooltip-arrow';
      arrow.style.cssText = "\n            position: absolute;\n            width: 0;\n            height: 0;\n            border: 5px solid transparent;\n        ";
      var theme = this.themes.get(config.theme) || this.themes.get('light');
      switch (config.position) {
        case 'top':
          arrow.style.bottom = '-10px';
          arrow.style.left = '50%';
          arrow.style.transform = 'translateX(-50%)';
          arrow.style.borderTopColor = theme.backgroundColor;
          break;
        case 'bottom':
          arrow.style.top = '-10px';
          arrow.style.left = '50%';
          arrow.style.transform = 'translateX(-50%)';
          arrow.style.borderBottomColor = theme.backgroundColor;
          break;
        case 'left':
          arrow.style.right = '-10px';
          arrow.style.top = '50%';
          arrow.style.transform = 'translateY(-50%)';
          arrow.style.borderLeftColor = theme.backgroundColor;
          break;
        case 'right':
          arrow.style.left = '-10px';
          arrow.style.top = '50%';
          arrow.style.transform = 'translateY(-50%)';
          arrow.style.borderRightColor = theme.backgroundColor;
          break;
      }
      tooltip.appendChild(arrow);
    }

    /**
    * 位置計算
    */
  }, {
    key: "calculatePosition",
    value: function calculatePosition(tooltip, event, config) {
      var rect = event.target.getBoundingClientRect();
      var tooltipRect = tooltip.getBoundingClientRect();
      var viewport = {
        width: window.innerWidth,
        height: window.innerHeight
      };
      var x, y;
      switch (config.position) {
        case 'top':
          x = rect.left + rect.width / 2 - tooltipRect.width / 2;
          y = rect.top - tooltipRect.height - config.offset;
          break;
        case 'bottom':
          x = rect.left + rect.width / 2 - tooltipRect.width / 2;
          y = rect.bottom + config.offset;
          break;
        case 'left':
          x = rect.left - tooltipRect.width - config.offset;
          y = rect.top + rect.height / 2 - tooltipRect.height / 2;
          break;
        case 'right':
          x = rect.right + config.offset;
          y = rect.top + rect.height / 2 - tooltipRect.height / 2;
          break;
        default:
          x = event.clientX + 10;
          y = event.clientY - tooltipRect.height - 10;
      }

      // 初期位置を設定（getBoundingClientRectが正しく動作するように）
      tooltip.style.left = "".concat(x, "px");
      tooltip.style.top = "".concat(y, "px");

      // 実際のサイズを取得して再計算
      var actualRect = tooltip.getBoundingClientRect();
      switch (config.position) {
        case 'top':
          x = rect.left + rect.width / 2 - actualRect.width / 2;
          y = rect.top - actualRect.height - config.offset;
          break;
        case 'bottom':
          x = rect.left + rect.width / 2 - actualRect.width / 2;
          y = rect.bottom + config.offset;
          break;
        case 'left':
          x = rect.left - actualRect.width - config.offset;
          y = rect.top + rect.height / 2 - actualRect.height / 2;
          break;
        case 'right':
          x = rect.right + config.offset;
          y = rect.top + rect.height / 2 - actualRect.height / 2;
          break;
      }

      // ビューポート内に収める
      x = Math.max(8, Math.min(x, viewport.width - tooltipRect.width - 8));
      y = Math.max(8, Math.min(y, viewport.height - tooltipRect.height - 8));
      tooltip.style.left = "".concat(x, "px");
      tooltip.style.top = "".concat(y, "px");
    }

    /**
    * 位置更新
    */
  }, {
    key: "updatePosition",
    value: function updatePosition(event) {
      if (!this.activeTooltip) {
        return;
      }
      var tooltip = document.querySelector('.tooltip');
      if (!tooltip) {
        return;
      }
      var config = this.activeTooltip.config;
      this.calculatePosition(tooltip, event, config);
    }

    /**
    * 要素設定取得
    */
  }, {
    key: "getElementConfig",
    value: function getElementConfig(element) {
      var config = _objectSpread({}, this.config);
      var position = element.getAttribute('data-tooltip-position');
      var delay = element.getAttribute('data-tooltip-delay');
      var maxWidth = element.getAttribute('data-tooltip-max-width');
      var minWidth = element.getAttribute('data-tooltip-min-width');
      var theme = element.getAttribute('data-tooltip-theme');
      var animation = element.getAttribute('data-tooltip-animation');
      if (position) {
        config.position = position;
      }
      if (delay) {
        config.delay = parseInt(delay);
      }
      if (maxWidth) {
        config.maxWidth = parseInt(maxWidth);
      }
      if (minWidth) {
        config.minWidth = parseInt(minWidth);
      }
      if (theme) {
        config.theme = theme;
      }
      if (animation) {
        config.animation = animation;
      }
      return config;
    }

    /**
    * ツールチップ追加
    */
  }, {
    key: "addTooltip",
    value: function addTooltip(element, text) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      if (!element || !text) {
        console.warn('⚠️ Invalid element or text for tooltip');
        return;
      }

      // セレクター文字列の場合は要素を取得
      var targetElement = element;
      if (typeof element === 'string') {
        targetElement = document.querySelector(element);
        if (!targetElement) {
          console.warn("\u26A0\uFE0F Element not found: ".concat(element));
          return;
        }
      }
      targetElement.setAttribute('data-tooltip', text);

      // オプションをデータ属性に設定
      Object.entries(options).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];
        if (value !== undefined) {
          targetElement.setAttribute("data-tooltip-".concat(key), value);
        }
      });
    }

    /**
    * 動的ツールチップ追加
    */
  }, {
    key: "addDynamicTooltip",
    value: function addDynamicTooltip(selector, text) {
      var _this4 = this;
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var elements = document.querySelectorAll(selector);
      elements.forEach(function (element) {
        _this4.addTooltip(element, text, options);
      });

      // 新しい要素の監視
      this.observeNewElements(selector, text, options);
    }

    /**
    * 新しい要素の監視
    */
  }, {
    key: "observeNewElements",
    value: function observeNewElements(selector, text, options) {
      var _this5 = this;
      if (this.observers.has(selector)) {
        return;
      }
      var observer = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
          mutation.addedNodes.forEach(function (node) {
            if (node.nodeType === Node.ELEMENT_NODE) {
              if (node.matches && node.matches(selector)) {
                _this5.addTooltip(node, text, options);
              }
              var childElements = node.querySelectorAll && node.querySelectorAll(selector);
              if (childElements) {
                childElements.forEach(function (element) {
                  _this5.addTooltip(element, text, options);
                });
              }
            }
          });
        });
      });
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
      this.observers.set(selector, observer);
    }

    /**
    * 破棄
    */
  }, {
    key: "destroy",
    value: function destroy() {
      this.hideTooltip();
      if (this.hoverTimeout) {
        clearTimeout(this.hoverTimeout);
      }
      this.observers.forEach(function (observer) {
        return observer.disconnect();
      });
      this.observers.clear();
      var container = document.getElementById('tooltip-container');
      if (container) {
        container.remove();
      }
      this.isInitialized = false;
    }
  }]);
}(); // シングルトンインスタンス
var tooltipManager = exports.tooltipManager = new TooltipManager();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,