df46e49da1e401b29b889ffdaa8b8c9f
"use strict";

// モック設定
_getJestObj().mock('../../js/utils/constants.js', function () {
  return {
    SUPABASE_CONFIG: {
      url: 'https://test.supabase.co',
      key: 'test-key'
    }
  };
});
_getJestObj().mock('../../js/utils/errorHandler.js', function () {
  return {
    handleError: jest.fn()
  };
});
var _supabaseService = require("../../js/services/supabaseService.js");
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
} // tests/unit/SupabaseService.test.js - SupabaseServiceのテスト
describe('SupabaseService', function () {
  var service;
  var mockClient;
  beforeEach(function () {
    // モッククライアントの設定
    mockClient = {
      auth: {
        getSession: jest.fn(),
        getUser: jest.fn(),
        signUp: jest.fn(),
        signInWithPassword: jest.fn(),
        signOut: jest.fn(),
        onAuthStateChange: jest.fn()
      },
      from: jest.fn(function () {
        return {
          select: jest.fn(function () {
            return {
              order: jest.fn(function () {
                return {
                  limit: jest.fn(function () {
                    return Promise.resolve({
                      data: [],
                      error: null
                    });
                  })
                };
              })
            };
          }),
          insert: jest.fn(function () {
            return {
              select: jest.fn(function () {
                return Promise.resolve({
                  data: [],
                  error: null
                });
              })
            };
          }),
          upsert: jest.fn(function () {
            return {
              select: jest.fn(function () {
                return Promise.resolve({
                  data: [],
                  error: null
                });
              })
            };
          }),
          eq: jest.fn(function () {
            return Promise.resolve({
              data: [],
              error: null
            });
          })
        };
      }),
      channel: jest.fn(function () {
        return {
          on: jest.fn(function () {
            return {
              subscribe: jest.fn()
            };
          })
        };
      }),
      storage: {
        from: jest.fn(function () {
          return {
            upload: jest.fn(function () {
              return Promise.resolve({
                error: null
              });
            }),
            getPublicUrl: jest.fn(function () {
              return {
                data: {
                  publicUrl: 'test-url'
                }
              };
            })
          };
        })
      }
    };

    // window.supabaseのモック
    global.window = {
      supabase: {
        createClient: jest.fn(function () {
          return mockClient;
        })
      },
      localStorage: {
        getItem: jest.fn(),
        setItem: jest.fn()
      }
    };
    service = new _supabaseService.SupabaseService({
      autoInitialize: false
    });
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  describe('constructor', function () {
    it('should initialize with default values', function () {
      expect(service.client).toBeNull();
      expect(service.isConnected).toBe(false);
      expect(service.autoInitialize).toBe(false);
      expect(service.enableRetry).toBe(true);
      expect(service.maxRetries).toBe(3);
    });
  });
  describe('isAvailable', function () {
    it('should return true when connected', function () {
      service.isConnected = true;
      service.client = mockClient;
      expect(service.isAvailable()).toBe(true);
    });
    it('should return false when not connected', function () {
      service.isConnected = false;
      service.client = null;
      expect(service.isAvailable()).toBe(false);
    });
  });
  describe('getCurrentUser', function () {
    it('should return null when not available', function () {
      service.isConnected = false;
      expect(service.getCurrentUser()).toBeNull();
    });
    it('should return user from localStorage', function () {
      service.isConnected = true; // isAvailable()がtrueを返すように設定
      service.client = {}; // clientも設定
      var mockUser = {
        id: '123',
        email: 'test@example.com'
      };
      var mockAuthData = {
        user: mockUser
      };

      // localStorageのモックを設定
      var mockGetItem = jest.fn().mockReturnValueOnce(JSON.stringify(mockAuthData)); // 最初のキーでデータを返す

      Object.defineProperty(window, 'localStorage', {
        value: {
          getItem: mockGetItem
        },
        writable: true
      });
      var result = service.getCurrentUser();
      expect(mockGetItem).toHaveBeenCalledWith('sb-mwwlqpokfgduxyjbqoff-auth-token');
      expect(result).toEqual(mockUser);
    });
  });
  describe('signUp', function () {
    it('should sign up successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var mockData, result;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            service.isConnected = true;
            service.client = mockClient;
            mockData = {
              user: {
                id: '123'
              }
            };
            mockClient.auth.signUp.mockResolvedValue({
              data: mockData,
              error: null
            });
            _context.n = 1;
            return service.signUp('test@example.com', 'password');
          case 1:
            result = _context.v;
            expect(result).toEqual(mockData);
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
    it('should throw error when not available', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            service.isConnected = false;
            _context2.n = 1;
            return expect(service.signUp('test@example.com', 'password')).rejects.toThrow('Supabase is not available');
          case 1:
            return _context2.a(2);
        }
      }, _callee2);
    })));
  });
  describe('signIn', function () {
    it('should sign in successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var mockData, result;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            service.isConnected = true;
            service.client = mockClient;
            mockData = {
              user: {
                id: '123'
              }
            };
            mockClient.auth.signInWithPassword.mockResolvedValue({
              data: mockData,
              error: null
            });
            _context3.n = 1;
            return service.signIn('test@example.com', 'password');
          case 1:
            result = _context3.v;
            expect(result).toEqual(mockData);
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
  });
  describe('signOut', function () {
    it('should sign out successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            service.isConnected = true;
            service.client = mockClient;
            mockClient.auth.signOut.mockResolvedValue({
              error: null
            });
            _context4.n = 1;
            return service.signOut();
          case 1:
            expect(mockClient.auth.signOut).toHaveBeenCalled();
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
  });
  describe('performance metrics', function () {
    it('should update performance metrics', function () {
      service.updatePerformanceMetrics(100, true);
      service.updatePerformanceMetrics(200, false);
      var metrics = service.getPerformanceMetrics();
      expect(metrics.totalRequests).toBe(2);
      expect(metrics.successfulRequests).toBe(1);
      expect(metrics.failedRequests).toBe(1);
      expect(metrics.averageResponseTime).toBe(150);
      expect(metrics.successRate).toBe(50);
    });
  });
  describe('health check', function () {
    it('should return healthy status', function () {
      service.isConnected = true;
      service.connectionAttempts = 1;
      service.performanceMetrics.successfulRequests = 10;
      service.performanceMetrics.failedRequests = 2;
      var health = service.healthCheck();
      expect(health.isHealthy).toBe(true);
      expect(health.issues).toHaveLength(0);
      expect(health.score).toBe(100);
    });
    it('should return unhealthy status', function () {
      service.isConnected = false;
      service.connectionAttempts = 5;
      service.performanceMetrics.successfulRequests = 2;
      service.performanceMetrics.failedRequests = 10;
      var health = service.healthCheck();
      expect(health.isHealthy).toBe(false);
      expect(health.issues.length).toBeGreaterThan(0);
      expect(health.score).toBeLessThan(100);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,