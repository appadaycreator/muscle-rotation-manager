830cc1992ae009bd9149941f593f7705
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
require("@testing-library/jest-dom");
var _jsdomNavigationFix = require("./utils/jsdom-navigation-fix.js");
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); } // tests/setup.js - Jest セットアップファイル
// 基本的なDOM環境のモック
global.window = {
  addEventListener: jest.fn(),
  removeEventListener: jest.fn(),
  dispatchEvent: jest.fn(),
  performance: {
    now: jest.fn(function () {
      return Date.now();
    })
  },
  CustomEvent: /*#__PURE__*/_createClass(function CustomEvent(type) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, CustomEvent);
    this.type = type;
    this.detail = options.detail;
  })
};

// JSDOMのナビゲーション制限を回避するための設定
// テスト環境でのナビゲーションエラーを抑制
var originalConsoleError = console.error;
console.error = function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  // JSDOMのナビゲーションエラーを抑制
  if (args[0] && args[0].includes && args[0].includes('Not implemented: navigation')) {
    return;
  }
  originalConsoleError.apply(console, args);
};

// コンソールログも抑制（テスト環境での不要なログを削減）
var originalConsoleLog = console.log;
console.log = function () {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  // テスト環境でのナビゲーションログを抑制
  if (args[0] && typeof args[0] === 'string' && args[0].includes('Navigation skipped in test environment')) {
    return;
  }
  originalConsoleLog.apply(console, args);
};

// JSDOMのナビゲーション制限を回避
// 専用ユーティリティを使用してセットアップ
(0, _jsdomNavigationFix.setupJSDOMNavigationFix)();
global.document = {
  getElementById: jest.fn(),
  querySelector: jest.fn(),
  querySelectorAll: jest.fn(function () {
    return [];
  }),
  createElement: jest.fn(function () {
    return {
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      click: jest.fn(),
      classList: {
        add: jest.fn(),
        remove: jest.fn(),
        contains: jest.fn(),
        toggle: jest.fn()
      },
      style: {},
      setAttribute: jest.fn(),
      getAttribute: jest.fn(),
      appendChild: jest.fn(),
      removeChild: jest.fn(),
      innerHTML: '',
      textContent: ''
    };
  }),
  createTextNode: jest.fn(),
  addEventListener: jest.fn(),
  removeEventListener: jest.fn()
};

// グローバル変数の設定
global.alert = jest.fn();
global.confirm = jest.fn();
global.prompt = jest.fn();

// グローバル関数の設定
global.showNotification = jest.fn();
global.hideNotification = jest.fn();
global.showAuthModal = jest.fn();
global.hideAuthModal = jest.fn();

// localStorage のモック
global.localStorage = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};

// sessionStorage のモック
global.sessionStorage = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};

// fetch のモック
global.fetch = jest.fn();

// コンソールのモック
global.console = {
  log: jest.fn(),
  error: jest.fn(),
  warn: jest.fn(),
  info: jest.fn()
};

// URL のモック（ReportService用）
global.URL = {
  createObjectURL: jest.fn(function () {
    return 'mock-url';
  }),
  revokeObjectURL: jest.fn()
};

// Blob のモック
global.Blob = /*#__PURE__*/_createClass(function Blob(parts, options) {
  _classCallCheck(this, Blob);
  this.parts = parts;
  this.type = (options === null || options === void 0 ? void 0 : options.type) || '';
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,