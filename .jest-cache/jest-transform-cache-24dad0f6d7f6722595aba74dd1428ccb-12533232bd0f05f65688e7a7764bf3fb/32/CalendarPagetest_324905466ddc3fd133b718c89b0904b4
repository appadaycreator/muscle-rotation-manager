d4d13f22fcbd7b0fd57791d4ed823c51
"use strict";

// モックの設定
_getJestObj().mock('../../js/services/supabaseService.js', function () {
  return {
    supabaseService: {
      isAvailable: jest.fn(),
      getCurrentUser: jest.fn(),
      getWorkouts: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    showNotification: jest.fn(),
    getMuscleColor: jest.fn(),
    isFutureDate: jest.fn(),
    isPastDate: jest.fn(),
    createCalendarModalHTML: jest.fn(),
    safeGetElement: jest.fn(),
    showInputDialog: jest.fn()
  };
});
_getJestObj().mock('../../js/utils/constants.js', function () {
  return {
    MUSCLE_GROUPS: [{
      id: 'chest',
      name: '胸',
      color: '#3B82F6'
    }, {
      id: 'back',
      name: '背中',
      color: '#10B981'
    }]
  };
});
_getJestObj().mock('../../js/modules/authManager.js', function () {
  return {
    authManager: {
      isAuthenticated: jest.fn(),
      showAuthModal: jest.fn()
    }
  };
});
var _calendarPage = _interopRequireDefault(require("../../js/pages/calendarPage.js"));
var _supabaseService = require("../../js/services/supabaseService.js");
var _helpers = require("../../js/utils/helpers.js");
var _constants = require("../../js/utils/constants.js");
var _authManager = require("../../js/modules/authManager.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
/**
 * CalendarPage テストスイート
 */
describe('CalendarPage', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    document.body.innerHTML = '<div id="main-content"></div>';
    _helpers.safeGetElement.mockReturnValue(document.querySelector('#main-content'));

    // localStorage のモック
    Object.defineProperty(window, 'localStorage', {
      value: {
        getItem: jest.fn(),
        setItem: jest.fn(),
        removeItem: jest.fn()
      },
      writable: true
    });
  });
  describe('constructor', function () {
    it('should initialize with default values', function () {
      expect(_calendarPage["default"].currentDate).toBeInstanceOf(Date);
      expect(_calendarPage["default"].workoutData).toEqual([]);
      expect(_calendarPage["default"].plannedWorkouts).toEqual([]);
      expect(_calendarPage["default"].selectedDate).toBe(null);
      expect(_calendarPage["default"].isLoading).toBe(false);
    });
  });
  describe('initialize', function () {
    it('should initialize successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var consoleSpy;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            _supabaseService.supabaseService.isAvailable.mockReturnValue(true);
            _supabaseService.supabaseService.getCurrentUser.mockReturnValue({
              id: 'user123'
            });
            _supabaseService.supabaseService.getWorkouts.mockResolvedValue([]);
            _calendarPage["default"].loadPlannedWorkouts = jest.fn().mockResolvedValue([]);
            _context.n = 1;
            return _calendarPage["default"].initialize();
          case 1:
            expect(consoleSpy).toHaveBeenCalledWith('Calendar page initializing without auth check');
            consoleSpy.mockRestore();
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
    it('should handle DOM ready state', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            Object.defineProperty(document, 'readyState', {
              value: 'complete',
              writable: true
            });
            _supabaseService.supabaseService.isAvailable.mockReturnValue(true);
            _supabaseService.supabaseService.getCurrentUser.mockReturnValue({
              id: 'user123'
            });
            _supabaseService.supabaseService.getWorkouts.mockResolvedValue([]);
            _calendarPage["default"].loadPlannedWorkouts = jest.fn().mockResolvedValue([]);
            _context2.n = 1;
            return _calendarPage["default"].initialize();
          case 1:
            // initializeが呼ばれたことを確認
            expect(_calendarPage["default"].currentDate).toBeInstanceOf(Date);
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
  });
  describe('loadWorkoutData', function () {
    it('should load workout data from localStorage when Supabase unavailable', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var mockWorkouts, expectedSortedWorkouts;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            mockWorkouts = [{
              id: 1,
              date: '2024-01-01',
              exercises: []
            }, {
              id: 2,
              date: '2024-01-02',
              exercises: []
            }];
            _supabaseService.supabaseService.isAvailable.mockReturnValue(false);
            window.localStorage.getItem.mockReturnValue(JSON.stringify(mockWorkouts));
            _context3.n = 1;
            return _calendarPage["default"].loadWorkoutData();
          case 1:
            expect(window.localStorage.getItem).toHaveBeenCalledWith('workoutHistory');
            // workoutDataServiceは日付順でソートするため、新しい順（降順）で期待
            expectedSortedWorkouts = [{
              id: 2,
              date: '2024-01-02',
              exercises: []
            }, {
              id: 1,
              date: '2024-01-01',
              exercises: []
            }];
            expect(_calendarPage["default"].workoutData).toEqual(expectedSortedWorkouts);
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
    it('should generate sample data when no data available', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            _supabaseService.supabaseService.isAvailable.mockReturnValue(false);
            window.localStorage.getItem.mockReturnValue('[]');
            _context4.n = 1;
            return _calendarPage["default"].loadWorkoutData();
          case 1:
            expect(window.localStorage.getItem).toHaveBeenCalledWith('workoutHistory');
            expect(_calendarPage["default"].workoutData.length).toBeGreaterThan(0);
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    it('should handle loading errors gracefully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var consoleSpy;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            consoleSpy = jest.spyOn(console, 'error').mockImplementation(); // localStorage.getItem をエラーを投げるようにモック
            window.localStorage.getItem.mockImplementation(function () {
              throw new Error('localStorage error');
            });
            _context5.n = 1;
            return _calendarPage["default"].loadWorkoutData();
          case 1:
            expect(consoleSpy).toHaveBeenCalledWith('Error loading workout data:', expect.any(Error));
            expect(_helpers.showNotification).toHaveBeenCalledWith('ワークアウトデータの読み込みに失敗しました', 'error');
            consoleSpy.mockRestore();
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
  describe('renderCalendar', function () {
    it('should render calendar', function () {
      _calendarPage["default"].workoutData = [{
        id: 1,
        date: '2024-01-01',
        exercises: []
      }];
      _calendarPage["default"].renderCalendar();
      expect(_calendarPage["default"].workoutData).toHaveLength(1);
    });
  });
  describe('setupCalendarInterface', function () {
    it('should setup calendar interface', function () {
      _calendarPage["default"].setupCalendarInterface();

      // カレンダーインターフェースが設定されることを確認
      expect(_calendarPage["default"].currentDate).toBeInstanceOf(Date);
    });
  });
  describe('setupEventListeners', function () {
    it('should setup event listeners', function () {
      _calendarPage["default"].setupEventListeners();

      // イベントリスナーが設定されることを確認
      expect(_calendarPage["default"].currentDate).toBeInstanceOf(Date);
    });
  });
  describe('setupAuthButton', function () {
    it('should setup auth button', function () {
      _calendarPage["default"].setupAuthButton();

      // 認証ボタンが設定されることを確認
      expect(_calendarPage["default"].currentDate).toBeInstanceOf(Date);
    });
  });
  describe('integration', function () {
    it('should complete full initialization flow', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var consoleSpy;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            _supabaseService.supabaseService.isAvailable.mockReturnValue(true);
            _supabaseService.supabaseService.getCurrentUser.mockReturnValue({
              id: 'user123'
            });
            _supabaseService.supabaseService.getWorkouts.mockResolvedValue([]);
            _calendarPage["default"].loadPlannedWorkouts = jest.fn().mockResolvedValue([]);
            _context6.n = 1;
            return _calendarPage["default"].initialize();
          case 1:
            // initializeが呼ばれたことを確認
            expect(_calendarPage["default"].currentDate).toBeInstanceOf(Date);
            consoleSpy.mockRestore();
          case 2:
            return _context6.a(2);
        }
      }, _callee6);
    })));
    it('should handle multiple initialization calls', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            _context7.n = 1;
            return _calendarPage["default"].initialize();
          case 1:
            _context7.n = 2;
            return _calendarPage["default"].initialize();
          case 2:
            // 複数回の初期化が正常に処理されることを確認
            expect(_calendarPage["default"].currentDate).toBeInstanceOf(Date);
          case 3:
            return _context7.a(2);
        }
      }, _callee7);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,