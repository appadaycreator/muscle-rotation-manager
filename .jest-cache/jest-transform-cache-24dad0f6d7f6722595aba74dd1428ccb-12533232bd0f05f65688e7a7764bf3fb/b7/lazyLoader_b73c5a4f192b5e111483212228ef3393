9f38dd0d1d70a2b7b7fc0d838e46af20
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lazyLoader = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, "default": e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t9 in e) "default" !== _t9 && {}.hasOwnProperty.call(e, _t9) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t9)) && (i.get || i.set) ? o(f, _t9, i) : f[_t9] = e[_t9]); return f; })(e, t); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// lazyLoader.js - 遅延ローディングマネージャー
var LazyLoader = /*#__PURE__*/function () {
  function LazyLoader() {
    _classCallCheck(this, LazyLoader);
    this.loadedModules = new Map();
    this.loadingPromises = new Map();
    this.imageObserver = null;
    this.componentObserver = null;
    this.initializeImageLazyLoading();
    this.initializeComponentLazyLoading();
  }

  /**
   * ページモジュールを遅延ロード
   * @param {string} pageName - ページ名
   * @returns {Promise<Object>} ページモジュール
   */
  return _createClass(LazyLoader, [{
    key: "loadPageModule",
    value: (function () {
      var _loadPageModule = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(pageName) {
        var moduleKey, loadingPromise, module, _t;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.p = _context.n) {
            case 0:
              moduleKey = "page_".concat(pageName); // 既に読み込み済みの場合はキャッシュから返す
              if (!this.loadedModules.has(moduleKey)) {
                _context.n = 1;
                break;
              }
              return _context.a(2, this.loadedModules.get(moduleKey));
            case 1:
              if (!this.loadingPromises.has(moduleKey)) {
                _context.n = 2;
                break;
              }
              return _context.a(2, this.loadingPromises.get(moduleKey));
            case 2:
              // 新しい読み込みPromiseを作成
              loadingPromise = this.createPageLoadPromise(pageName, moduleKey);
              this.loadingPromises.set(moduleKey, loadingPromise);
              _context.p = 3;
              _context.n = 4;
              return loadingPromise;
            case 4:
              module = _context.v;
              this.loadedModules.set(moduleKey, module);
              this.loadingPromises["delete"](moduleKey);
              return _context.a(2, module);
            case 5:
              _context.p = 5;
              _t = _context.v;
              this.loadingPromises["delete"](moduleKey);
              throw _t;
            case 6:
              return _context.a(2);
          }
        }, _callee, this, [[3, 5]]);
      }));
      function loadPageModule(_x) {
        return _loadPageModule.apply(this, arguments);
      }
      return loadPageModule;
    }()
    /**
     * ページ読み込みPromiseを作成
     * @param {string} pageName - ページ名
     * @param {string} moduleKey - モジュールキー
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "createPageLoadPromise",
    value: (function () {
      var _createPageLoadPromise = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(pageName, moduleKey) {
        var startTime, module, loadTime, _loadTime, _t2, _t3;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.p = _context2.n) {
            case 0:
              console.log("\uD83D\uDD04 \u9045\u5EF6\u30ED\u30FC\u30C9\u958B\u59CB: ".concat(pageName));
              startTime = performance.now();
              _context2.p = 1;
              _t2 = pageName;
              _context2.n = _t2 === 'dashboard' ? 2 : _t2 === 'workout' ? 4 : _t2 === 'calendar' ? 6 : _t2 === 'analysis' ? 8 : _t2 === 'progress' ? 10 : _t2 === 'exercises' ? 12 : _t2 === 'exercises-management' ? 12 : _t2 === 'settings' ? 14 : 16;
              break;
            case 2:
              _context2.n = 3;
              return Promise.resolve().then(function () {
                return _interopRequireWildcard(require('../pages/dashboardPage.js'));
              });
            case 3:
              module = _context2.v;
              return _context2.a(3, 17);
            case 4:
              _context2.n = 5;
              return Promise.resolve().then(function () {
                return _interopRequireWildcard(require('../pages/workoutPageWizard.js'));
              });
            case 5:
              module = _context2.v;
              return _context2.a(3, 17);
            case 6:
              _context2.n = 7;
              return Promise.resolve().then(function () {
                return _interopRequireWildcard(require('../pages/calendarPage.js'));
              });
            case 7:
              module = _context2.v;
              return _context2.a(3, 17);
            case 8:
              _context2.n = 9;
              return Promise.resolve().then(function () {
                return _interopRequireWildcard(require('../pages/analysisPage.js'));
              });
            case 9:
              module = _context2.v;
              return _context2.a(3, 17);
            case 10:
              _context2.n = 11;
              return Promise.resolve().then(function () {
                return _interopRequireWildcard(require('../pages/progressPage.js'));
              });
            case 11:
              module = _context2.v;
              return _context2.a(3, 17);
            case 12:
              _context2.n = 13;
              return Promise.resolve().then(function () {
                return _interopRequireWildcard(require('../pages/exercisePage.js'));
              });
            case 13:
              module = _context2.v;
              return _context2.a(3, 17);
            case 14:
              _context2.n = 15;
              return Promise.resolve().then(function () {
                return _interopRequireWildcard(require('../pages/settingsPage.js'));
              });
            case 15:
              module = _context2.v;
              return _context2.a(3, 17);
            case 16:
              throw new Error("Unknown page: ".concat(pageName));
            case 17:
              loadTime = performance.now() - startTime;
              console.log("\u2705 \u9045\u5EF6\u30ED\u30FC\u30C9\u5B8C\u4E86: ".concat(pageName, " (").concat(loadTime.toFixed(2), "ms)"));

              // パフォーマンスメトリクスを記録
              this.recordPerformanceMetric('page_load', pageName, loadTime);
              return _context2.a(2, module);
            case 18:
              _context2.p = 18;
              _t3 = _context2.v;
              _loadTime = performance.now() - startTime;
              console.error("\u274C \u9045\u5EF6\u30ED\u30FC\u30C9\u5931\u6557: ".concat(pageName, " (").concat(_loadTime.toFixed(2), "ms)"), _t3);
              throw _t3;
            case 19:
              return _context2.a(2);
          }
        }, _callee2, this, [[1, 18]]);
      }));
      function createPageLoadPromise(_x2, _x3) {
        return _createPageLoadPromise.apply(this, arguments);
      }
      return createPageLoadPromise;
    }()
    /**
     * サービスモジュールを遅延ロード
     * @param {string} serviceName - サービス名
     * @returns {Promise<Object>} サービスモジュール
     */
    )
  }, {
    key: "loadServiceModule",
    value: (function () {
      var _loadServiceModule = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(serviceName) {
        var moduleKey, loadingPromise, module, _t4;
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.p = _context3.n) {
            case 0:
              moduleKey = "service_".concat(serviceName);
              if (!this.loadedModules.has(moduleKey)) {
                _context3.n = 1;
                break;
              }
              return _context3.a(2, this.loadedModules.get(moduleKey));
            case 1:
              if (!this.loadingPromises.has(moduleKey)) {
                _context3.n = 2;
                break;
              }
              return _context3.a(2, this.loadingPromises.get(moduleKey));
            case 2:
              loadingPromise = this.createServiceLoadPromise(serviceName, moduleKey);
              this.loadingPromises.set(moduleKey, loadingPromise);
              _context3.p = 3;
              _context3.n = 4;
              return loadingPromise;
            case 4:
              module = _context3.v;
              this.loadedModules.set(moduleKey, module);
              this.loadingPromises["delete"](moduleKey);
              return _context3.a(2, module);
            case 5:
              _context3.p = 5;
              _t4 = _context3.v;
              this.loadingPromises["delete"](moduleKey);
              throw _t4;
            case 6:
              return _context3.a(2);
          }
        }, _callee3, this, [[3, 5]]);
      }));
      function loadServiceModule(_x4) {
        return _loadServiceModule.apply(this, arguments);
      }
      return loadServiceModule;
    }()
    /**
     * サービス読み込みPromiseを作成
     * @param {string} serviceName - サービス名
     * @param {string} moduleKey - モジュールキー
     * @returns {Promise<Object>}
     */
    )
  }, {
    key: "createServiceLoadPromise",
    value: (function () {
      var _createServiceLoadPromise = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(serviceName, moduleKey) {
        var startTime, module, loadTime, _loadTime2, _t5, _t6;
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.p = _context4.n) {
            case 0:
              console.log("\uD83D\uDD04 \u30B5\u30FC\u30D3\u30B9\u9045\u5EF6\u30ED\u30FC\u30C9\u958B\u59CB: ".concat(serviceName));
              startTime = performance.now();
              _context4.p = 1;
              _t5 = serviceName;
              _context4.n = _t5 === 'chart' ? 2 : _t5 === 'exercise' ? 4 : _t5 === 'recommendation' ? 6 : _t5 === 'progressTracking' ? 8 : 10;
              break;
            case 2:
              _context4.n = 3;
              return Promise.resolve().then(function () {
                return _interopRequireWildcard(require('../services/chartService.js'));
              });
            case 3:
              module = _context4.v;
              return _context4.a(3, 11);
            case 4:
              _context4.n = 5;
              return Promise.resolve().then(function () {
                return _interopRequireWildcard(require('../services/exerciseService.js'));
              });
            case 5:
              module = _context4.v;
              return _context4.a(3, 11);
            case 6:
              _context4.n = 7;
              return Promise.resolve().then(function () {
                return _interopRequireWildcard(require('../services/recommendationService.js'));
              });
            case 7:
              module = _context4.v;
              return _context4.a(3, 11);
            case 8:
              _context4.n = 9;
              return Promise.resolve().then(function () {
                return _interopRequireWildcard(require('../services/progressTrackingService.js'));
              });
            case 9:
              module = _context4.v;
              return _context4.a(3, 11);
            case 10:
              throw new Error("Unknown service: ".concat(serviceName));
            case 11:
              loadTime = performance.now() - startTime;
              console.log("\u2705 \u30B5\u30FC\u30D3\u30B9\u9045\u5EF6\u30ED\u30FC\u30C9\u5B8C\u4E86: ".concat(serviceName, " (").concat(loadTime.toFixed(2), "ms)"));
              this.recordPerformanceMetric('service_load', serviceName, loadTime);
              return _context4.a(2, module);
            case 12:
              _context4.p = 12;
              _t6 = _context4.v;
              _loadTime2 = performance.now() - startTime;
              console.error("\u274C \u30B5\u30FC\u30D3\u30B9\u9045\u5EF6\u30ED\u30FC\u30C9\u5931\u6557: ".concat(serviceName, " (").concat(_loadTime2.toFixed(2), "ms)"), _t6);
              throw _t6;
            case 13:
              return _context4.a(2);
          }
        }, _callee4, this, [[1, 12]]);
      }));
      function createServiceLoadPromise(_x5, _x6) {
        return _createServiceLoadPromise.apply(this, arguments);
      }
      return createServiceLoadPromise;
    }()
    /**
     * 画像の遅延ローディングを初期化
     */
    )
  }, {
    key: "initializeImageLazyLoading",
    value: function initializeImageLazyLoading() {
      var _this = this;
      // Intersection Observer API をサポートしているかチェック
      if (!('IntersectionObserver' in window)) {
        console.warn('IntersectionObserver not supported, falling back to immediate loading');
        this.loadAllImagesImmediately();
        return;
      }
      this.imageObserver = new IntersectionObserver(function (entries) {
        entries.forEach(function (entry) {
          if (entry.isIntersecting) {
            _this.loadImage(entry.target);
            _this.imageObserver.unobserve(entry.target);
          }
        });
      }, {
        rootMargin: '50px 0px',
        // 50px手前で読み込み開始
        threshold: 0.01
      });

      // 既存の遅延ロード対象画像を監視
      this.observeExistingImages();
    }

    /**
     * 既存の画像を監視対象に追加
     */
  }, {
    key: "observeExistingImages",
    value: function observeExistingImages() {
      var _this2 = this;
      var lazyImages = document.querySelectorAll('img[data-src], img[loading="lazy"]');
      lazyImages.forEach(function (img) {
        _this2.imageObserver.observe(img);
      });
    }

    /**
     * 新しい画像を遅延ロード対象に追加
     * @param {HTMLImageElement} img - 画像要素
     */
  }, {
    key: "observeImage",
    value: function observeImage(img) {
      if (this.imageObserver && img) {
        this.imageObserver.observe(img);
      }
    }

    /**
     * 画像を読み込み
     * @param {HTMLImageElement} img - 画像要素
     */
  }, {
    key: "loadImage",
    value: function loadImage(img) {
      var _this3 = this;
      var startTime = performance.now();

      // data-src から src に移動
      if (img.dataset.src) {
        img.src = img.dataset.src;
        img.removeAttribute('data-src');
      }

      // 読み込み完了時の処理
      img.onload = function () {
        var loadTime = performance.now() - startTime;
        img.classList.add('loaded');
        console.log("\uD83D\uDCF7 \u753B\u50CF\u8AAD\u307F\u8FBC\u307F\u5B8C\u4E86: ".concat(img.src, " (").concat(loadTime.toFixed(2), "ms)"));
        _this3.recordPerformanceMetric('image_load', img.src, loadTime);
      };

      // 読み込み失敗時の処理
      img.onerror = function () {
        var loadTime = performance.now() - startTime;
        img.classList.add('error');
        console.error("\u274C \u753B\u50CF\u8AAD\u307F\u8FBC\u307F\u5931\u6557: ".concat(img.src, " (").concat(loadTime.toFixed(2), "ms)"));

        // フォールバック画像を設定
        if (!img.src.includes('default-avatar')) {
          img.src = '/assets/default-avatar.png';
        }
      };
    }

    /**
     * 全画像を即座に読み込み（フォールバック）
     */
  }, {
    key: "loadAllImagesImmediately",
    value: function loadAllImagesImmediately() {
      var _this4 = this;
      var lazyImages = document.querySelectorAll('img[data-src]');
      lazyImages.forEach(function (img) {
        return _this4.loadImage(img);
      });
    }

    /**
     * コンポーネントの遅延ローディングを初期化
     */
  }, {
    key: "initializeComponentLazyLoading",
    value: function initializeComponentLazyLoading() {
      var _this5 = this;
      if (!('IntersectionObserver' in window)) {
        return;
      }
      this.componentObserver = new IntersectionObserver(function (entries) {
        entries.forEach(function (entry) {
          if (entry.isIntersecting) {
            _this5.loadComponent(entry.target);
            _this5.componentObserver.unobserve(entry.target);
          }
        });
      }, {
        rootMargin: '100px 0px',
        // 100px手前で読み込み開始
        threshold: 0.01
      });
    }

    /**
     * コンポーネントを遅延ロード対象に追加
     * @param {HTMLElement} element - 要素
     * @param {string} componentType - コンポーネントタイプ
     */
  }, {
    key: "observeComponent",
    value: function observeComponent(element, componentType) {
      if (this.componentObserver && element) {
        element.dataset.componentType = componentType;
        this.componentObserver.observe(element);
      }
    }

    /**
     * コンポーネントを読み込み
     * @param {HTMLElement} element - 要素
     */
  }, {
    key: "loadComponent",
    value: (function () {
      var _loadComponent = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(element) {
        var componentType, startTime, loadTime, _loadTime3, _t7, _t8;
        return _regenerator().w(function (_context5) {
          while (1) switch (_context5.p = _context5.n) {
            case 0:
              componentType = element.dataset.componentType;
              if (componentType) {
                _context5.n = 1;
                break;
              }
              return _context5.a(2);
            case 1:
              startTime = performance.now();
              console.log("\uD83D\uDD04 \u30B3\u30F3\u30DD\u30FC\u30CD\u30F3\u30C8\u9045\u5EF6\u30ED\u30FC\u30C9\u958B\u59CB: ".concat(componentType));
              _context5.p = 2;
              _t7 = componentType;
              _context5.n = _t7 === 'chart' ? 3 : _t7 === 'calendar' ? 5 : _t7 === 'progress-chart' ? 7 : 9;
              break;
            case 3:
              _context5.n = 4;
              return this.loadChartComponent(element);
            case 4:
              return _context5.a(3, 10);
            case 5:
              _context5.n = 6;
              return this.loadCalendarComponent(element);
            case 6:
              return _context5.a(3, 10);
            case 7:
              _context5.n = 8;
              return this.loadProgressChartComponent(element);
            case 8:
              return _context5.a(3, 10);
            case 9:
              console.warn("Unknown component type: ".concat(componentType));
            case 10:
              loadTime = performance.now() - startTime;
              console.log("\u2705 \u30B3\u30F3\u30DD\u30FC\u30CD\u30F3\u30C8\u9045\u5EF6\u30ED\u30FC\u30C9\u5B8C\u4E86: ".concat(componentType, " (").concat(loadTime.toFixed(2), "ms)"));
              this.recordPerformanceMetric('component_load', componentType, loadTime);
              _context5.n = 12;
              break;
            case 11:
              _context5.p = 11;
              _t8 = _context5.v;
              _loadTime3 = performance.now() - startTime;
              console.error("\u274C \u30B3\u30F3\u30DD\u30FC\u30CD\u30F3\u30C8\u9045\u5EF6\u30ED\u30FC\u30C9\u5931\u6557: ".concat(componentType, " (").concat(_loadTime3.toFixed(2), "ms)"), _t8);
            case 12:
              return _context5.a(2);
          }
        }, _callee5, this, [[2, 11]]);
      }));
      function loadComponent(_x7) {
        return _loadComponent.apply(this, arguments);
      }
      return loadComponent;
    }()
    /**
     * チャートコンポーネントを読み込み
     * @param {HTMLElement} element - チャート要素
     */
    )
  }, {
    key: "loadChartComponent",
    value: (function () {
      var _loadChartComponent = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(element) {
        var chartService, chartType, chartData;
        return _regenerator().w(function (_context6) {
          while (1) switch (_context6.n) {
            case 0:
              _context6.n = 1;
              return this.loadServiceModule('chart');
            case 1:
              chartService = _context6.v;
              chartType = element.dataset.chartType || 'line';
              chartData = JSON.parse(element.dataset.chartData || '{}');
              if (chartService["default"]) {
                chartService["default"].createChart(element.id, chartType, chartData);
              }
            case 2:
              return _context6.a(2);
          }
        }, _callee6, this);
      }));
      function loadChartComponent(_x8) {
        return _loadChartComponent.apply(this, arguments);
      }
      return loadChartComponent;
    }()
    /**
     * カレンダーコンポーネントを読み込み
     * @param {HTMLElement} element - カレンダー要素
     */
    )
  }, {
    key: "loadCalendarComponent",
    value: (function () {
      var _loadCalendarComponent = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(element) {
        var calendarPage;
        return _regenerator().w(function (_context7) {
          while (1) switch (_context7.n) {
            case 0:
              _context7.n = 1;
              return this.loadPageModule('calendar');
            case 1:
              calendarPage = _context7.v;
              if (calendarPage["default"] && calendarPage["default"].renderCalendar) {
                calendarPage["default"].renderCalendar(element);
              }
            case 2:
              return _context7.a(2);
          }
        }, _callee7, this);
      }));
      function loadCalendarComponent(_x9) {
        return _loadCalendarComponent.apply(this, arguments);
      }
      return loadCalendarComponent;
    }()
    /**
     * プログレスチャートコンポーネントを読み込み
     * @param {HTMLElement} element - プログレスチャート要素
     */
    )
  }, {
    key: "loadProgressChartComponent",
    value: (function () {
      var _loadProgressChartComponent = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(element) {
        var progressService, chartData;
        return _regenerator().w(function (_context8) {
          while (1) switch (_context8.n) {
            case 0:
              _context8.n = 1;
              return this.loadServiceModule('progressTracking');
            case 1:
              progressService = _context8.v;
              chartData = JSON.parse(element.dataset.chartData || '{}');
              if (progressService["default"]) {
                progressService["default"].renderProgressChart(element, chartData);
              }
            case 2:
              return _context8.a(2);
          }
        }, _callee8, this);
      }));
      function loadProgressChartComponent(_x0) {
        return _loadProgressChartComponent.apply(this, arguments);
      }
      return loadProgressChartComponent;
    }()
    /**
     * パフォーマンスメトリクスを記録
     * @param {string} type - メトリクスタイプ
     * @param {string} name - 名前
     * @param {number} duration - 実行時間
     */
    )
  }, {
    key: "recordPerformanceMetric",
    value: function recordPerformanceMetric(type, name, duration) {
      var metric = {
        type: type,
        name: name,
        duration: duration,
        timestamp: Date.now()
      };

      // LocalStorageに保存（最新100件まで）
      try {
        var metrics = JSON.parse(localStorage.getItem('performanceMetrics') || '[]');
        metrics.push(metric);

        // 最新100件のみ保持
        if (metrics.length > 100) {
          metrics.splice(0, metrics.length - 100);
        }
        localStorage.setItem('performanceMetrics', JSON.stringify(metrics));
      } catch (error) {
        console.warn('Failed to save performance metric:', error);
      }

      // パフォーマンス閾値チェック
      this.checkPerformanceThreshold(type, duration);
    }

    /**
     * パフォーマンス閾値をチェック
     * @param {string} type - メトリクスタイプ
     * @param {number} duration - 実行時間
     */
  }, {
    key: "checkPerformanceThreshold",
    value: function checkPerformanceThreshold(type, duration) {
      var thresholds = {
        page_load: 1000,
        // 1秒
        service_load: 500,
        // 0.5秒
        image_load: 3000,
        // 3秒
        component_load: 800 // 0.8秒
      };
      var threshold = thresholds[type];
      if (threshold && duration > threshold) {
        console.warn("\u26A0\uFE0F \u30D1\u30D5\u30A9\u30FC\u30DE\u30F3\u30B9\u8B66\u544A: ".concat(type, " \u304C\u95BE\u5024(").concat(threshold, "ms)\u3092\u8D85\u3048\u307E\u3057\u305F: ").concat(duration.toFixed(2), "ms"));

        // カスタムイベントを発火してモニタリング
        window.dispatchEvent(new CustomEvent('performanceWarning', {
          detail: {
            type: type,
            duration: duration,
            threshold: threshold
          }
        }));
      }
    }

    /**
     * パフォーマンスメトリクスを取得
     * @returns {Array} メトリクス配列
     */
  }, {
    key: "getPerformanceMetrics",
    value: function getPerformanceMetrics() {
      try {
        return JSON.parse(localStorage.getItem('performanceMetrics') || '[]');
      } catch (error) {
        console.warn('Failed to load performance metrics:', error);
        return [];
      }
    }

    /**
     * パフォーマンス統計を取得
     * @returns {Object} 統計情報
     */
  }, {
    key: "getPerformanceStats",
    value: function getPerformanceStats() {
      var metrics = this.getPerformanceMetrics();
      var stats = {};

      // タイプ別に統計を計算
      ['page_load', 'service_load', 'image_load', 'component_load'].forEach(function (type) {
        var typeMetrics = metrics.filter(function (m) {
          return m.type === type;
        });
        if (typeMetrics.length > 0) {
          var durations = typeMetrics.map(function (m) {
            return m.duration;
          });
          stats[type] = {
            count: typeMetrics.length,
            avg: durations.reduce(function (a, b) {
              return a + b;
            }, 0) / durations.length,
            min: Math.min.apply(Math, _toConsumableArray(durations)),
            max: Math.max.apply(Math, _toConsumableArray(durations)),
            recent: typeMetrics.slice(-10).map(function (m) {
              return m.duration;
            })
          };
        }
      });
      return stats;
    }

    /**
     * キャッシュをクリア
     */
  }, {
    key: "clearCache",
    value: function clearCache() {
      this.loadedModules.clear();
      this.loadingPromises.clear();
      console.log('🧹 遅延ローダーキャッシュをクリアしました');
    }

    /**
     * オブザーバーを破棄
     */
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.imageObserver) {
        this.imageObserver.disconnect();
        this.imageObserver = null;
      }
      if (this.componentObserver) {
        this.componentObserver.disconnect();
        this.componentObserver = null;
      }
      this.clearCache();
      console.log('🗑️ 遅延ローダーを破棄しました');
    }
  }]);
}(); // シングルトンインスタンスをエクスポート
var lazyLoader = exports.lazyLoader = new LazyLoader();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,