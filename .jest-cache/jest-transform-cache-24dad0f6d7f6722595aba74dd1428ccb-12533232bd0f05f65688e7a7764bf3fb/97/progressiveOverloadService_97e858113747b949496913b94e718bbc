5d4d96beaf4973d5205558157ffb1d60
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.progressiveOverloadService = exports.ProgressiveOverloadService = void 0;
var _workoutDataService = require("./workoutDataService.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // js/services/progressiveOverloadService.js - プログレッシブ・オーバーロード分析サービス
/**
 * プログレッシブ・オーバーロード分析サービス
 * トレーニングの進歩を定量的に分析し、最適化提案を行う
 */
var ProgressiveOverloadService = exports.ProgressiveOverloadService = /*#__PURE__*/function () {
  function ProgressiveOverloadService() {
    _classCallCheck(this, ProgressiveOverloadService);
    this.analysisCache = new Map();
    this.cacheExpiry = 5 * 60 * 1000; // 5分間キャッシュ
  }

  /**
   * エクササイズ別の進歩分析を取得
   * @param {string} exerciseName - エクササイズ名
   * @param {number} days - 分析期間（日数）
   * @returns {Promise<Object>} 進歩分析データ
   */
  return _createClass(ProgressiveOverloadService, [{
    key: "getExerciseProgress",
    value: (function () {
      var _getExerciseProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(exerciseName) {
        var days,
          cacheKey,
          cached,
          workouts,
          exerciseData,
          analysis,
          _args = arguments,
          _t;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.p = _context.n) {
            case 0:
              days = _args.length > 1 && _args[1] !== undefined ? _args[1] : 90;
              cacheKey = "exercise_".concat(exerciseName, "_").concat(days);
              cached = this.getCachedAnalysis(cacheKey);
              if (!cached) {
                _context.n = 1;
                break;
              }
              return _context.a(2, cached);
            case 1:
              _context.p = 1;
              _context.n = 2;
              return _workoutDataService.workoutDataService.loadWorkouts({
                limit: 1000
              });
            case 2:
              workouts = _context.v;
              exerciseData = this.filterExerciseData(workouts, exerciseName, days);
              analysis = {
                exerciseName: exerciseName,
                period: days,
                totalSessions: exerciseData.length,
                progressMetrics: this.calculateProgressMetrics(exerciseData),
                volumeProgression: this.calculateVolumeProgression(exerciseData),
                intensityProgression: this.calculateIntensityProgression(exerciseData),
                recommendations: this.generateRecommendations(exerciseData),
                trends: this.analyzeTrends(exerciseData),
                lastUpdated: new Date().toISOString()
              };
              this.setCachedAnalysis(cacheKey, analysis);
              return _context.a(2, analysis);
            case 3:
              _context.p = 3;
              _t = _context.v;
              console.error('Error analyzing exercise progress:', _t);
              throw _t;
            case 4:
              return _context.a(2);
          }
        }, _callee, this, [[1, 3]]);
      }));
      function getExerciseProgress(_x) {
        return _getExerciseProgress.apply(this, arguments);
      }
      return getExerciseProgress;
    }()
    /**
     * 部位別の進歩分析を取得
     * @param {string} muscleGroup - 筋肉部位
     * @param {number} days - 分析期間（日数）
     * @returns {Promise<Object>} 部位別進歩分析データ
     */
    )
  }, {
    key: "getMuscleGroupProgress",
    value: (function () {
      var _getMuscleGroupProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(muscleGroup) {
        var days,
          cacheKey,
          cached,
          workouts,
          muscleData,
          analysis,
          _args2 = arguments,
          _t2;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.p = _context2.n) {
            case 0:
              days = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 90;
              cacheKey = "muscle_".concat(muscleGroup, "_").concat(days);
              cached = this.getCachedAnalysis(cacheKey);
              if (!cached) {
                _context2.n = 1;
                break;
              }
              return _context2.a(2, cached);
            case 1:
              _context2.p = 1;
              _context2.n = 2;
              return _workoutDataService.workoutDataService.loadWorkouts({
                limit: 1000
              });
            case 2:
              workouts = _context2.v;
              muscleData = this.filterMuscleGroupData(workouts, muscleGroup, days);
              analysis = {
                muscleGroup: muscleGroup,
                period: days,
                totalSessions: muscleData.length,
                exercises: this.analyzeMuscleGroupExercises(muscleData),
                volumeProgression: this.calculateMuscleGroupVolumeProgression(muscleData),
                frequencyAnalysis: this.analyzeMuscleGroupFrequency(muscleData),
                recommendations: this.generateMuscleGroupRecommendations(muscleData),
                lastUpdated: new Date().toISOString()
              };
              this.setCachedAnalysis(cacheKey, analysis);
              return _context2.a(2, analysis);
            case 3:
              _context2.p = 3;
              _t2 = _context2.v;
              console.error('Error analyzing muscle group progress:', _t2);
              throw _t2;
            case 4:
              return _context2.a(2);
          }
        }, _callee2, this, [[1, 3]]);
      }));
      function getMuscleGroupProgress(_x2) {
        return _getMuscleGroupProgress.apply(this, arguments);
      }
      return getMuscleGroupProgress;
    }()
    /**
     * 総合的な進歩分析を取得
     * @param {number} days - 分析期間（日数）
     * @returns {Promise<Object>} 総合進歩分析データ
     */
    )
  }, {
    key: "getOverallProgress",
    value: (function () {
      var _getOverallProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
        var days,
          cacheKey,
          cached,
          workouts,
          recentWorkouts,
          analysis,
          _args3 = arguments,
          _t3,
          _t4,
          _t5,
          _t6,
          _t7,
          _t8,
          _t9,
          _t0,
          _t1;
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.p = _context3.n) {
            case 0:
              days = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : 90;
              cacheKey = "overall_".concat(days);
              cached = this.getCachedAnalysis(cacheKey);
              if (!cached) {
                _context3.n = 1;
                break;
              }
              return _context3.a(2, cached);
            case 1:
              _context3.p = 1;
              _context3.n = 2;
              return _workoutDataService.workoutDataService.loadWorkouts({
                limit: 1000
              });
            case 2:
              workouts = _context3.v;
              recentWorkouts = this.filterRecentWorkouts(workouts, days);
              _t3 = days;
              _t4 = recentWorkouts.length;
              _t5 = this.calculateOverallMetrics(recentWorkouts);
              _context3.n = 3;
              return this.calculateAllMuscleGroupProgress(recentWorkouts);
            case 3:
              _t6 = _context3.v;
              _context3.n = 4;
              return this.calculateAllExerciseProgress(recentWorkouts);
            case 4:
              _t7 = _context3.v;
              _t8 = this.calculateConsistencyScore(recentWorkouts);
              _t9 = this.generateOverallRecommendations(recentWorkouts);
              _t0 = new Date().toISOString();
              analysis = {
                period: _t3,
                totalWorkouts: _t4,
                overallMetrics: _t5,
                muscleGroupProgress: _t6,
                exerciseProgress: _t7,
                consistencyScore: _t8,
                recommendations: _t9,
                lastUpdated: _t0
              };
              this.setCachedAnalysis(cacheKey, analysis);
              return _context3.a(2, analysis);
            case 5:
              _context3.p = 5;
              _t1 = _context3.v;
              console.error('Error analyzing overall progress:', _t1);
              throw _t1;
            case 6:
              return _context3.a(2);
          }
        }, _callee3, this, [[1, 5]]);
      }));
      function getOverallProgress() {
        return _getOverallProgress.apply(this, arguments);
      }
      return getOverallProgress;
    }()
    /**
     * エクササイズデータをフィルタリング
     * @param {Array} workouts - ワークアウトデータ
     * @param {string} exerciseName - エクササイズ名
     * @param {number} days - 期間
     * @returns {Array} フィルタされたデータ
     */
    )
  }, {
    key: "filterExerciseData",
    value: function filterExerciseData(workouts, exerciseName, days) {
      var cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - days);
      return workouts.filter(function (workout) {
        var workoutDate = new Date(workout.date || workout.startTime);
        return workoutDate >= cutoffDate;
      }).map(function (workout) {
        return _objectSpread(_objectSpread({}, workout), {}, {
          exerciseData: (workout.exercises || []).filter(function (exercise) {
            return exercise.name && exercise.name.toLowerCase().includes(exerciseName.toLowerCase());
          })
        });
      }).filter(function (workout) {
        return workout.exerciseData.length > 0;
      });
    }

    /**
     * 筋肉部位データをフィルタリング
     * @param {Array} workouts - ワークアウトデータ
     * @param {string} muscleGroup - 筋肉部位
     * @param {number} days - 期間
     * @returns {Array} フィルタされたデータ
     */
  }, {
    key: "filterMuscleGroupData",
    value: function filterMuscleGroupData(workouts, muscleGroup, days) {
      var cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - days);
      return workouts.filter(function (workout) {
        var workoutDate = new Date(workout.date || workout.startTime);
        return workoutDate >= cutoffDate;
      }).filter(function (workout) {
        var muscleGroups = workout.muscle_groups || [];
        return muscleGroups.some(function (muscle) {
          return muscle.toLowerCase().includes(muscleGroup.toLowerCase());
        });
      });
    }

    /**
     * 最近のワークアウトをフィルタリング
     * @param {Array} workouts - ワークアウトデータ
     * @param {number} days - 期間
     * @returns {Array} フィルタされたデータ
     */
  }, {
    key: "filterRecentWorkouts",
    value: function filterRecentWorkouts(workouts, days) {
      var cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - days);
      return workouts.filter(function (workout) {
        var workoutDate = new Date(workout.date || workout.startTime);
        return workoutDate >= cutoffDate;
      });
    }

    /**
     * 進歩メトリクスを計算
     * @param {Array} exerciseData - エクササイズデータ
     * @returns {Object} 進歩メトリクス
     */
  }, {
    key: "calculateProgressMetrics",
    value: function calculateProgressMetrics(exerciseData) {
      if (exerciseData.length === 0) {
        return {
          volumeProgression: 0,
          intensityProgression: 0,
          consistencyScore: 0,
          averageWeight: 0,
          averageReps: 0,
          averageSets: 0
        };
      }
      var sessions = exerciseData.map(function (workout) {
        var exercise = workout.exerciseData[0];
        return {
          date: new Date(workout.date || workout.startTime),
          weight: exercise.weight || 0,
          reps: exercise.reps || 0,
          sets: exercise.sets || 0,
          volume: (exercise.weight || 0) * (exercise.reps || 0) * (exercise.sets || 0)
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
      var firstHalf = sessions.slice(0, Math.ceil(sessions.length / 2));
      var secondHalf = sessions.slice(Math.floor(sessions.length / 2));
      var firstHalfAvgVolume = this.calculateAverageVolume(firstHalf);
      var secondHalfAvgVolume = this.calculateAverageVolume(secondHalf);
      var volumeProgression = firstHalfAvgVolume > 0 ? (secondHalfAvgVolume - firstHalfAvgVolume) / firstHalfAvgVolume * 100 : 0;
      var firstHalfAvgWeight = this.calculateAverageWeight(firstHalf);
      var secondHalfAvgWeight = this.calculateAverageWeight(secondHalf);
      var intensityProgression = firstHalfAvgWeight > 0 ? (secondHalfAvgWeight - firstHalfAvgWeight) / firstHalfAvgWeight * 100 : 0;
      return {
        volumeProgression: Math.round(volumeProgression * 10) / 10,
        intensityProgression: Math.round(intensityProgression * 10) / 10,
        consistencyScore: this.calculateConsistencyScore(exerciseData),
        averageWeight: Math.round(this.calculateAverageWeight(sessions) * 10) / 10,
        averageReps: Math.round(this.calculateAverageReps(sessions) * 10) / 10,
        averageSets: Math.round(this.calculateAverageSets(sessions) * 10) / 10,
        totalSessions: sessions.length
      };
    }

    /**
     * ボリューム進歩を計算
     * @param {Array} exerciseData - エクササイズデータ
     * @returns {Array} ボリューム進歩データ
     */
  }, {
    key: "calculateVolumeProgression",
    value: function calculateVolumeProgression(exerciseData) {
      return exerciseData.map(function (workout) {
        var exercise = workout.exerciseData[0];
        var volume = (exercise.weight || 0) * (exercise.reps || 0) * (exercise.sets || 0);
        return {
          date: new Date(workout.date || workout.startTime),
          volume: volume,
          weight: exercise.weight || 0,
          reps: exercise.reps || 0,
          sets: exercise.sets || 0
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
    }

    /**
     * 強度進歩を計算
     * @param {Array} exerciseData - エクササイズデータ
     * @returns {Array} 強度進歩データ
     */
  }, {
    key: "calculateIntensityProgression",
    value: function calculateIntensityProgression(exerciseData) {
      return exerciseData.map(function (workout) {
        var exercise = workout.exerciseData[0];
        return {
          date: new Date(workout.date || workout.startTime),
          weight: exercise.weight || 0,
          reps: exercise.reps || 0,
          sets: exercise.sets || 0,
          intensity: exercise.weight || 0
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
    }

    /**
     * 筋肉部位のエクササイズ分析
     * @param {Array} muscleData - 筋肉部位データ
     * @returns {Object} エクササイズ分析
     */
  }, {
    key: "analyzeMuscleGroupExercises",
    value: function analyzeMuscleGroupExercises(muscleData) {
      var exerciseCounts = {};
      var exerciseProgress = {};
      muscleData.forEach(function (workout) {
        (workout.exercises || []).forEach(function (exercise) {
          var exerciseName = exercise.name;
          if (!exerciseCounts[exerciseName]) {
            exerciseCounts[exerciseName] = 0;
            exerciseProgress[exerciseName] = [];
          }
          exerciseCounts[exerciseName]++;
          exerciseProgress[exerciseName].push({
            date: new Date(workout.date || workout.startTime),
            weight: exercise.weight || 0,
            reps: exercise.reps || 0,
            sets: exercise.sets || 0
          });
        });
      });

      // 各エクササイズの進歩を計算
      Object.keys(exerciseProgress).forEach(function (exerciseName) {
        var sessions = exerciseProgress[exerciseName].sort(function (a, b) {
          return a.date - b.date;
        });
        if (sessions.length >= 2) {
          var firstSession = sessions[0];
          var lastSession = sessions[sessions.length - 1];
          var weightProgress = firstSession.weight > 0 ? (lastSession.weight - firstSession.weight) / firstSession.weight * 100 : 0;
          exerciseProgress[exerciseName] = {
            sessions: sessions,
            weightProgress: Math.round(weightProgress * 10) / 10,
            totalSessions: sessions.length
          };
        }
      });
      return {
        exerciseCounts: exerciseCounts,
        exerciseProgress: exerciseProgress
      };
    }

    /**
     * 筋肉部位のボリューム進歩を計算
     * @param {Array} muscleData - 筋肉部位データ
     * @returns {Array} ボリューム進歩データ
     */
  }, {
    key: "calculateMuscleGroupVolumeProgression",
    value: function calculateMuscleGroupVolumeProgression(muscleData) {
      return muscleData.map(function (workout) {
        var totalVolume = (workout.exercises || []).reduce(function (sum, exercise) {
          return sum + (exercise.weight || 0) * (exercise.reps || 0) * (exercise.sets || 0);
        }, 0);
        return {
          date: new Date(workout.date || workout.startTime),
          volume: totalVolume,
          exerciseCount: (workout.exercises || []).length,
          duration: workout.duration || 0
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
    }

    /**
     * 筋肉部位の頻度分析
     * @param {Array} muscleData - 筋肉部位データ
     * @returns {Object} 頻度分析データ
     */
  }, {
    key: "analyzeMuscleGroupFrequency",
    value: function analyzeMuscleGroupFrequency(muscleData) {
      var sessions = muscleData.map(function (workout) {
        return {
          date: new Date(workout.date || workout.startTime)
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
      if (sessions.length === 0) {
        return {
          averageDaysBetween: 0,
          frequencyScore: 0,
          lastWorkout: null,
          nextRecommended: null
        };
      }

      // セッション間隔を計算
      var intervals = [];
      for (var i = 1; i < sessions.length; i++) {
        var interval = (sessions[i].date - sessions[i - 1].date) / (1000 * 60 * 60 * 24);
        intervals.push(interval);
      }
      var averageDaysBetween = intervals.length > 0 ? intervals.reduce(function (sum, interval) {
        return sum + interval;
      }, 0) / intervals.length : 0;
      var lastWorkout = sessions[sessions.length - 1].date;
      var _daysSinceLastWorkout = (new Date() - lastWorkout) / (1000 * 60 * 60 * 24);

      // 頻度スコア（理想的には2-3日間隔）
      var idealInterval = 2.5;
      var frequencyScore = averageDaysBetween > 0 ? Math.max(0, 100 - Math.abs(averageDaysBetween - idealInterval) * 20) : 0;
      var nextRecommended = new Date(lastWorkout);
      nextRecommended.setDate(nextRecommended.getDate() + Math.round(averageDaysBetween));
      return {
        averageDaysBetween: Math.round(averageDaysBetween * 10) / 10,
        frequencyScore: Math.round(frequencyScore),
        lastWorkout: lastWorkout,
        nextRecommended: nextRecommended,
        totalSessions: sessions.length
      };
    }

    /**
     * 総合メトリクスを計算
     * @param {Array} workouts - ワークアウトデータ
     * @returns {Object} 総合メトリクス
     */
  }, {
    key: "calculateOverallMetrics",
    value: function calculateOverallMetrics(workouts) {
      var totalVolume = workouts.reduce(function (sum, workout) {
        return sum + (workout.exercises || []).reduce(function (exerciseSum, exercise) {
          return exerciseSum + (exercise.weight || 0) * (exercise.reps || 0) * (exercise.sets || 0);
        }, 0);
      }, 0);
      var totalDuration = workouts.reduce(function (sum, workout) {
        return sum + (workout.duration || 0);
      }, 0);
      var averageDuration = workouts.length > 0 ? totalDuration / workouts.length : 0;
      var muscleGroupCounts = {};
      workouts.forEach(function (workout) {
        (workout.muscle_groups || []).forEach(function (muscle) {
          muscleGroupCounts[muscle] = (muscleGroupCounts[muscle] || 0) + 1;
        });
      });
      return {
        totalVolume: Math.round(totalVolume),
        totalDuration: Math.round(totalDuration / 60),
        // 分単位
        averageDuration: Math.round(averageDuration / 60),
        // 分単位
        muscleGroupDistribution: muscleGroupCounts,
        totalWorkouts: workouts.length,
        averageVolumePerWorkout: workouts.length > 0 ? Math.round(totalVolume / workouts.length) : 0
      };
    }

    /**
     * 全筋肉部位の進歩を計算
     * @param {Array} workouts - ワークアウトデータ
     * @returns {Promise<Object>} 全筋肉部位進歩データ
     */
  }, {
    key: "calculateAllMuscleGroupProgress",
    value: (function () {
      var _calculateAllMuscleGroupProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(workouts) {
        var muscleGroups, progress, _iterator, _step, muscleGroup, _t10, _t11;
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.p = _context4.n) {
            case 0:
              muscleGroups = new Set();
              workouts.forEach(function (workout) {
                (workout.muscle_groups || []).forEach(function (muscle) {
                  return muscleGroups.add(muscle);
                });
              });
              progress = {};
              _iterator = _createForOfIteratorHelper(muscleGroups);
              _context4.p = 1;
              _iterator.s();
            case 2:
              if ((_step = _iterator.n()).done) {
                _context4.n = 7;
                break;
              }
              muscleGroup = _step.value;
              _context4.p = 3;
              _context4.n = 4;
              return this.getMuscleGroupProgress(muscleGroup, 90);
            case 4:
              progress[muscleGroup] = _context4.v;
              _context4.n = 6;
              break;
            case 5:
              _context4.p = 5;
              _t10 = _context4.v;
              console.warn("Error calculating progress for muscle group ".concat(muscleGroup, ":"), _t10);
              progress[muscleGroup] = null;
            case 6:
              _context4.n = 2;
              break;
            case 7:
              _context4.n = 9;
              break;
            case 8:
              _context4.p = 8;
              _t11 = _context4.v;
              _iterator.e(_t11);
            case 9:
              _context4.p = 9;
              _iterator.f();
              return _context4.f(9);
            case 10:
              return _context4.a(2, progress);
          }
        }, _callee4, this, [[3, 5], [1, 8, 9, 10]]);
      }));
      function calculateAllMuscleGroupProgress(_x3) {
        return _calculateAllMuscleGroupProgress.apply(this, arguments);
      }
      return calculateAllMuscleGroupProgress;
    }()
    /**
     * 全エクササイズの進歩を計算
     * @param {Array} workouts - ワークアウトデータ
     * @returns {Promise<Object>} 全エクササイズ進歩データ
     */
    )
  }, {
    key: "calculateAllExerciseProgress",
    value: (function () {
      var _calculateAllExerciseProgress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(workouts) {
        var exercises, progress, _iterator2, _step2, exerciseName, _t12, _t13;
        return _regenerator().w(function (_context5) {
          while (1) switch (_context5.p = _context5.n) {
            case 0:
              exercises = new Set();
              workouts.forEach(function (workout) {
                (workout.exercises || []).forEach(function (exercise) {
                  if (exercise.name) exercises.add(exercise.name);
                });
              });
              progress = {};
              _iterator2 = _createForOfIteratorHelper(exercises);
              _context5.p = 1;
              _iterator2.s();
            case 2:
              if ((_step2 = _iterator2.n()).done) {
                _context5.n = 7;
                break;
              }
              exerciseName = _step2.value;
              _context5.p = 3;
              _context5.n = 4;
              return this.getExerciseProgress(exerciseName, 90);
            case 4:
              progress[exerciseName] = _context5.v;
              _context5.n = 6;
              break;
            case 5:
              _context5.p = 5;
              _t12 = _context5.v;
              console.warn("Error calculating progress for exercise ".concat(exerciseName, ":"), _t12);
              progress[exerciseName] = null;
            case 6:
              _context5.n = 2;
              break;
            case 7:
              _context5.n = 9;
              break;
            case 8:
              _context5.p = 8;
              _t13 = _context5.v;
              _iterator2.e(_t13);
            case 9:
              _context5.p = 9;
              _iterator2.f();
              return _context5.f(9);
            case 10:
              return _context5.a(2, progress);
          }
        }, _callee5, this, [[3, 5], [1, 8, 9, 10]]);
      }));
      function calculateAllExerciseProgress(_x4) {
        return _calculateAllExerciseProgress.apply(this, arguments);
      }
      return calculateAllExerciseProgress;
    }()
    /**
     * 一貫性スコアを計算
     * @param {Array} workouts - ワークアウトデータ
     * @returns {number} 一貫性スコア（0-100）
     */
    )
  }, {
    key: "calculateConsistencyScore",
    value: function calculateConsistencyScore(workouts) {
      if (workouts.length < 2) return 0;
      var sessions = workouts.map(function (workout) {
        return {
          date: new Date(workout.date || workout.startTime)
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });

      // セッション間隔の一貫性を計算
      var intervals = [];
      for (var i = 1; i < sessions.length; i++) {
        var interval = (sessions[i].date - sessions[i - 1].date) / (1000 * 60 * 60 * 24);
        intervals.push(interval);
      }
      if (intervals.length === 0) return 0;
      var averageInterval = intervals.reduce(function (sum, interval) {
        return sum + interval;
      }, 0) / intervals.length;
      var variance = intervals.reduce(function (sum, interval) {
        return sum + Math.pow(interval - averageInterval, 2);
      }, 0) / intervals.length;
      var standardDeviation = Math.sqrt(variance);

      // 標準偏差が小さいほど一貫性が高い
      var consistencyScore = Math.max(0, 100 - standardDeviation * 10);
      return Math.round(consistencyScore);
    }

    /**
     * 推奨事項を生成
     * @param {Array} exerciseData - エクササイズデータ
     * @returns {Array} 推奨事項配列
     */
  }, {
    key: "generateRecommendations",
    value: function generateRecommendations(exerciseData) {
      var recommendations = [];
      var metrics = this.calculateProgressMetrics(exerciseData);
      if (metrics.volumeProgression < 5) {
        recommendations.push({
          type: 'volume',
          priority: 'high',
          message: 'ボリュームの増加が停滞しています。セット数やレップ数を増やすことを検討してください。',
          action: 'セット数を1-2セット増やすか、レップ数を2-3回増やす'
        });
      }
      if (metrics.intensityProgression < 2) {
        recommendations.push({
          type: 'intensity',
          priority: 'medium',
          message: '重量の増加が緩やかです。より重い重量にチャレンジしてみてください。',
          action: '重量を2.5-5kg増やすか、より重い重量でレップ数を減らす'
        });
      }
      if (metrics.consistencyScore < 70) {
        recommendations.push({
          type: 'consistency',
          priority: 'high',
          message: 'トレーニングの一貫性を改善する必要があります。',
          action: '定期的なスケジュールを設定し、週2-3回の頻度を維持する'
        });
      }
      if (recommendations.length === 0) {
        recommendations.push({
          type: 'positive',
          priority: 'low',
          message: '素晴らしい進歩です！現在のトレーニングを継続してください。',
          action: '現在のプログラムを維持し、必要に応じて微調整する'
        });
      }
      return recommendations;
    }

    /**
     * 筋肉部位の推奨事項を生成
     * @param {Array} muscleData - 筋肉部位データ
     * @returns {Array} 推奨事項配列
     */
  }, {
    key: "generateMuscleGroupRecommendations",
    value: function generateMuscleGroupRecommendations(muscleData) {
      var recommendations = [];
      var frequencyAnalysis = this.analyzeMuscleGroupFrequency(muscleData);
      if (frequencyAnalysis.frequencyScore < 60) {
        recommendations.push({
          type: 'frequency',
          priority: 'high',
          message: 'この部位のトレーニング頻度が低すぎます。',
          action: '週1-2回の頻度でトレーニングを増やす'
        });
      }
      if (frequencyAnalysis.averageDaysBetween > 7) {
        recommendations.push({
          type: 'recovery',
          priority: 'medium',
          message: 'トレーニング間隔が長すぎる可能性があります。',
          action: 'より頻繁にトレーニングするか、他の部位との組み合わせを検討する'
        });
      }
      return recommendations;
    }

    /**
     * 総合推奨事項を生成
     * @param {Array} workouts - ワークアウトデータ
     * @returns {Array} 推奨事項配列
     */
  }, {
    key: "generateOverallRecommendations",
    value: function generateOverallRecommendations(workouts) {
      var recommendations = [];
      var metrics = this.calculateOverallMetrics(workouts);
      var consistencyScore = this.calculateConsistencyScore(workouts);
      if (consistencyScore < 60) {
        recommendations.push({
          type: 'consistency',
          priority: 'high',
          message: 'トレーニングの一貫性を改善しましょう。',
          action: '定期的なスケジュールを設定し、週3-4回の頻度を目標にする'
        });
      }
      if (metrics.averageVolumePerWorkout < 1000) {
        recommendations.push({
          type: 'volume',
          priority: 'medium',
          message: 'セッションあたりのボリュームを増やすことを検討してください。',
          action: 'エクササイズ数やセット数を増やす'
        });
      }
      var muscleGroups = Object.keys(metrics.muscleGroupDistribution);
      if (muscleGroups.length < 4) {
        recommendations.push({
          type: 'balance',
          priority: 'medium',
          message: 'より多くの筋肉部位をトレーニングしましょう。',
          action: '新しいエクササイズや筋肉部位を追加する'
        });
      }
      return recommendations;
    }

    /**
     * トレンドを分析
     * @param {Array} exerciseData - エクササイズデータ
     * @returns {Object} トレンド分析データ
     */
  }, {
    key: "analyzeTrends",
    value: function analyzeTrends(exerciseData) {
      var sessions = exerciseData.map(function (workout) {
        var exercise = workout.exerciseData[0];
        return {
          date: new Date(workout.date || workout.startTime),
          weight: exercise.weight || 0,
          reps: exercise.reps || 0,
          sets: exercise.sets || 0,
          volume: (exercise.weight || 0) * (exercise.reps || 0) * (exercise.sets || 0)
        };
      }).sort(function (a, b) {
        return a.date - b.date;
      });
      if (sessions.length < 3) {
        return {
          weightTrend: 'insufficient_data',
          volumeTrend: 'insufficient_data',
          consistencyTrend: 'insufficient_data'
        };
      }

      // 線形回帰でトレンドを計算
      var weightTrend = this.calculateLinearTrend(sessions.map(function (s) {
        return s.weight;
      }));
      var volumeTrend = this.calculateLinearTrend(sessions.map(function (s) {
        return s.volume;
      }));
      return {
        weightTrend: weightTrend > 0.1 ? 'increasing' : weightTrend < -0.1 ? 'decreasing' : 'stable',
        volumeTrend: volumeTrend > 0.1 ? 'increasing' : volumeTrend < -0.1 ? 'decreasing' : 'stable',
        consistencyTrend: this.calculateConsistencyScore(exerciseData) > 70 ? 'good' : 'needs_improvement'
      };
    }

    /**
     * 線形トレンドを計算
     * @param {Array} values - 値の配列
     * @returns {number} トレンド係数
     */
  }, {
    key: "calculateLinearTrend",
    value: function calculateLinearTrend(values) {
      var n = values.length;
      var x = Array.from({
        length: n
      }, function (_, i) {
        return i;
      });
      var y = values;
      var sumX = x.reduce(function (sum, val) {
        return sum + val;
      }, 0);
      var sumY = y.reduce(function (sum, val) {
        return sum + val;
      }, 0);
      var sumXY = x.reduce(function (sum, val, i) {
        return sum + val * y[i];
      }, 0);
      var sumXX = x.reduce(function (sum, val) {
        return sum + val * val;
      }, 0);
      var slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
      return slope;
    }

    // ヘルパーメソッド
  }, {
    key: "calculateAverageVolume",
    value: function calculateAverageVolume(sessions) {
      return sessions.length > 0 ? sessions.reduce(function (sum, session) {
        return sum + session.volume;
      }, 0) / sessions.length : 0;
    }
  }, {
    key: "calculateAverageWeight",
    value: function calculateAverageWeight(sessions) {
      return sessions.length > 0 ? sessions.reduce(function (sum, session) {
        return sum + session.weight;
      }, 0) / sessions.length : 0;
    }
  }, {
    key: "calculateAverageReps",
    value: function calculateAverageReps(sessions) {
      return sessions.length > 0 ? sessions.reduce(function (sum, session) {
        return sum + session.reps;
      }, 0) / sessions.length : 0;
    }
  }, {
    key: "calculateAverageSets",
    value: function calculateAverageSets(sessions) {
      return sessions.length > 0 ? sessions.reduce(function (sum, session) {
        return sum + session.sets;
      }, 0) / sessions.length : 0;
    }

    // キャッシュ管理
  }, {
    key: "getCachedAnalysis",
    value: function getCachedAnalysis(key) {
      var cached = this.analysisCache.get(key);
      if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {
        return cached.data;
      }
      return null;
    }
  }, {
    key: "setCachedAnalysis",
    value: function setCachedAnalysis(key, data) {
      this.analysisCache.set(key, {
        data: data,
        timestamp: Date.now()
      });
    }

    /**
     * キャッシュをクリア
     */
  }, {
    key: "clearCache",
    value: function clearCache() {
      this.analysisCache.clear();
    }
  }]);
}(); // シングルトンインスタンスをエクスポート
var progressiveOverloadService = exports.progressiveOverloadService = new ProgressiveOverloadService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfd29ya291dERhdGFTZXJ2aWNlIiwicmVxdWlyZSIsIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwiciIsImUiLCJ0IiwiQXJyYXkiLCJpc0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibGVuZ3RoIiwiX24iLCJGIiwicyIsIm4iLCJkb25lIiwidmFsdWUiLCJmIiwiVHlwZUVycm9yIiwiYSIsInUiLCJjYWxsIiwibmV4dCIsIl9hcnJheUxpa2VUb0FycmF5IiwidG9TdHJpbmciLCJzbGljZSIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIm93bktleXMiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfcmVnZW5lcmF0b3IiLCJ0b1N0cmluZ1RhZyIsImkiLCJjIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiX3JlZ2VuZXJhdG9yRGVmaW5lMiIsInAiLCJ5IiwiRyIsInYiLCJkIiwiYmluZCIsImwiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImRpc3BsYXlOYW1lIiwidyIsIm0iLCJfcmVnZW5lcmF0b3JEZWZpbmUiLCJfaW52b2tlIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJfbmV4dCIsIl90aHJvdyIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwiX3RvUHJpbWl0aXZlIiwidG9QcmltaXRpdmUiLCJTdHJpbmciLCJOdW1iZXIiLCJQcm9ncmVzc2l2ZU92ZXJsb2FkU2VydmljZSIsImV4cG9ydHMiLCJhbmFseXNpc0NhY2hlIiwiTWFwIiwiY2FjaGVFeHBpcnkiLCJfZ2V0RXhlcmNpc2VQcm9ncmVzcyIsIl9jYWxsZWUiLCJleGVyY2lzZU5hbWUiLCJkYXlzIiwiY2FjaGVLZXkiLCJjYWNoZWQiLCJ3b3Jrb3V0cyIsImV4ZXJjaXNlRGF0YSIsImFuYWx5c2lzIiwiX2FyZ3MiLCJfdCIsIl9jb250ZXh0IiwidW5kZWZpbmVkIiwiY29uY2F0IiwiZ2V0Q2FjaGVkQW5hbHlzaXMiLCJ3b3Jrb3V0RGF0YVNlcnZpY2UiLCJsb2FkV29ya291dHMiLCJsaW1pdCIsImZpbHRlckV4ZXJjaXNlRGF0YSIsInBlcmlvZCIsInRvdGFsU2Vzc2lvbnMiLCJwcm9ncmVzc01ldHJpY3MiLCJjYWxjdWxhdGVQcm9ncmVzc01ldHJpY3MiLCJ2b2x1bWVQcm9ncmVzc2lvbiIsImNhbGN1bGF0ZVZvbHVtZVByb2dyZXNzaW9uIiwiaW50ZW5zaXR5UHJvZ3Jlc3Npb24iLCJjYWxjdWxhdGVJbnRlbnNpdHlQcm9ncmVzc2lvbiIsInJlY29tbWVuZGF0aW9ucyIsImdlbmVyYXRlUmVjb21tZW5kYXRpb25zIiwidHJlbmRzIiwiYW5hbHl6ZVRyZW5kcyIsImxhc3RVcGRhdGVkIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic2V0Q2FjaGVkQW5hbHlzaXMiLCJjb25zb2xlIiwiZXJyb3IiLCJnZXRFeGVyY2lzZVByb2dyZXNzIiwiX3giLCJfZ2V0TXVzY2xlR3JvdXBQcm9ncmVzcyIsIl9jYWxsZWUyIiwibXVzY2xlR3JvdXAiLCJtdXNjbGVEYXRhIiwiX2FyZ3MyIiwiX3QyIiwiX2NvbnRleHQyIiwiZmlsdGVyTXVzY2xlR3JvdXBEYXRhIiwiZXhlcmNpc2VzIiwiYW5hbHl6ZU11c2NsZUdyb3VwRXhlcmNpc2VzIiwiY2FsY3VsYXRlTXVzY2xlR3JvdXBWb2x1bWVQcm9ncmVzc2lvbiIsImZyZXF1ZW5jeUFuYWx5c2lzIiwiYW5hbHl6ZU11c2NsZUdyb3VwRnJlcXVlbmN5IiwiZ2VuZXJhdGVNdXNjbGVHcm91cFJlY29tbWVuZGF0aW9ucyIsImdldE11c2NsZUdyb3VwUHJvZ3Jlc3MiLCJfeDIiLCJfZ2V0T3ZlcmFsbFByb2dyZXNzIiwiX2NhbGxlZTMiLCJyZWNlbnRXb3Jrb3V0cyIsIl9hcmdzMyIsIl90MyIsIl90NCIsIl90NSIsIl90NiIsIl90NyIsIl90OCIsIl90OSIsIl90MCIsIl90MSIsIl9jb250ZXh0MyIsImZpbHRlclJlY2VudFdvcmtvdXRzIiwiY2FsY3VsYXRlT3ZlcmFsbE1ldHJpY3MiLCJjYWxjdWxhdGVBbGxNdXNjbGVHcm91cFByb2dyZXNzIiwiY2FsY3VsYXRlQWxsRXhlcmNpc2VQcm9ncmVzcyIsImNhbGN1bGF0ZUNvbnNpc3RlbmN5U2NvcmUiLCJnZW5lcmF0ZU92ZXJhbGxSZWNvbW1lbmRhdGlvbnMiLCJ0b3RhbFdvcmtvdXRzIiwib3ZlcmFsbE1ldHJpY3MiLCJtdXNjbGVHcm91cFByb2dyZXNzIiwiZXhlcmNpc2VQcm9ncmVzcyIsImNvbnNpc3RlbmN5U2NvcmUiLCJnZXRPdmVyYWxsUHJvZ3Jlc3MiLCJjdXRvZmZEYXRlIiwic2V0RGF0ZSIsImdldERhdGUiLCJ3b3Jrb3V0Iiwid29ya291dERhdGUiLCJkYXRlIiwic3RhcnRUaW1lIiwibWFwIiwiZXhlcmNpc2UiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwibXVzY2xlR3JvdXBzIiwibXVzY2xlX2dyb3VwcyIsInNvbWUiLCJtdXNjbGUiLCJhdmVyYWdlV2VpZ2h0IiwiYXZlcmFnZVJlcHMiLCJhdmVyYWdlU2V0cyIsInNlc3Npb25zIiwid2VpZ2h0IiwicmVwcyIsInNldHMiLCJ2b2x1bWUiLCJzb3J0IiwiYiIsImZpcnN0SGFsZiIsIk1hdGgiLCJjZWlsIiwic2Vjb25kSGFsZiIsImZsb29yIiwiZmlyc3RIYWxmQXZnVm9sdW1lIiwiY2FsY3VsYXRlQXZlcmFnZVZvbHVtZSIsInNlY29uZEhhbGZBdmdWb2x1bWUiLCJmaXJzdEhhbGZBdmdXZWlnaHQiLCJjYWxjdWxhdGVBdmVyYWdlV2VpZ2h0Iiwic2Vjb25kSGFsZkF2Z1dlaWdodCIsInJvdW5kIiwiY2FsY3VsYXRlQXZlcmFnZVJlcHMiLCJjYWxjdWxhdGVBdmVyYWdlU2V0cyIsImludGVuc2l0eSIsImV4ZXJjaXNlQ291bnRzIiwiZmlyc3RTZXNzaW9uIiwibGFzdFNlc3Npb24iLCJ3ZWlnaHRQcm9ncmVzcyIsInRvdGFsVm9sdW1lIiwicmVkdWNlIiwic3VtIiwiZXhlcmNpc2VDb3VudCIsImR1cmF0aW9uIiwiYXZlcmFnZURheXNCZXR3ZWVuIiwiZnJlcXVlbmN5U2NvcmUiLCJsYXN0V29ya291dCIsIm5leHRSZWNvbW1lbmRlZCIsImludGVydmFscyIsImludGVydmFsIiwiX2RheXNTaW5jZUxhc3RXb3Jrb3V0IiwiaWRlYWxJbnRlcnZhbCIsIm1heCIsImFicyIsImV4ZXJjaXNlU3VtIiwidG90YWxEdXJhdGlvbiIsImF2ZXJhZ2VEdXJhdGlvbiIsIm11c2NsZUdyb3VwQ291bnRzIiwibXVzY2xlR3JvdXBEaXN0cmlidXRpb24iLCJhdmVyYWdlVm9sdW1lUGVyV29ya291dCIsIl9jYWxjdWxhdGVBbGxNdXNjbGVHcm91cFByb2dyZXNzIiwiX2NhbGxlZTQiLCJwcm9ncmVzcyIsIl9pdGVyYXRvciIsIl9zdGVwIiwiX3QxMCIsIl90MTEiLCJfY29udGV4dDQiLCJTZXQiLCJhZGQiLCJ3YXJuIiwiX3gzIiwiX2NhbGN1bGF0ZUFsbEV4ZXJjaXNlUHJvZ3Jlc3MiLCJfY2FsbGVlNSIsIl9pdGVyYXRvcjIiLCJfc3RlcDIiLCJfdDEyIiwiX3QxMyIsIl9jb250ZXh0NSIsIl94NCIsImF2ZXJhZ2VJbnRlcnZhbCIsInZhcmlhbmNlIiwicG93Iiwic3RhbmRhcmREZXZpYXRpb24iLCJzcXJ0IiwibWV0cmljcyIsInR5cGUiLCJwcmlvcml0eSIsIm1lc3NhZ2UiLCJhY3Rpb24iLCJ3ZWlnaHRUcmVuZCIsInZvbHVtZVRyZW5kIiwiY29uc2lzdGVuY3lUcmVuZCIsImNhbGN1bGF0ZUxpbmVhclRyZW5kIiwidmFsdWVzIiwieCIsIl8iLCJzdW1YIiwidmFsIiwic3VtWSIsInN1bVhZIiwic3VtWFgiLCJzbG9wZSIsInNlc3Npb24iLCJnZXQiLCJub3ciLCJ0aW1lc3RhbXAiLCJkYXRhIiwic2V0IiwiY2xlYXJDYWNoZSIsImNsZWFyIiwicHJvZ3Jlc3NpdmVPdmVybG9hZFNlcnZpY2UiXSwic291cmNlcyI6WyJwcm9ncmVzc2l2ZU92ZXJsb2FkU2VydmljZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBqcy9zZXJ2aWNlcy9wcm9ncmVzc2l2ZU92ZXJsb2FkU2VydmljZS5qcyAtIOODl+ODreOCsOODrOODg+OCt+ODluODu+OCquODvOODkOODvOODreODvOODieWIhuaekOOCteODvOODk+OCuVxuXG5pbXBvcnQgeyB3b3Jrb3V0RGF0YVNlcnZpY2UgfSBmcm9tICcuL3dvcmtvdXREYXRhU2VydmljZS5qcyc7XG5cbi8qKlxuICog44OX44Ot44Kw44Os44OD44K344OW44O744Kq44O844OQ44O844Ot44O844OJ5YiG5p6Q44K144O844OT44K5XG4gKiDjg4jjg6zjg7zjg4vjg7PjgrDjga7pgLLmranjgpLlrprph4/nmoTjgavliIbmnpDjgZfjgIHmnIDpganljJbmj5DmoYjjgpLooYzjgYZcbiAqL1xuZXhwb3J0IGNsYXNzIFByb2dyZXNzaXZlT3ZlcmxvYWRTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hbmFseXNpc0NhY2hlID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuY2FjaGVFeHBpcnkgPSA1ICogNjAgKiAxMDAwOyAvLyA15YiG6ZaT44Kt44Oj44OD44K344OlXG4gIH1cblxuICAvKipcbiAgICog44Ko44Kv44K144K144Kk44K65Yil44Gu6YCy5q2p5YiG5p6Q44KS5Y+W5b6XXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleGVyY2lzZU5hbWUgLSDjgqjjgq/jgrXjgrXjgqTjgrrlkI1cbiAgICogQHBhcmFtIHtudW1iZXJ9IGRheXMgLSDliIbmnpDmnJ/plpPvvIjml6XmlbDvvIlcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0g6YCy5q2p5YiG5p6Q44OH44O844K/XG4gICAqL1xuICBhc3luYyBnZXRFeGVyY2lzZVByb2dyZXNzKGV4ZXJjaXNlTmFtZSwgZGF5cyA9IDkwKSB7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBgZXhlcmNpc2VfJHtleGVyY2lzZU5hbWV9XyR7ZGF5c31gO1xuICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuZ2V0Q2FjaGVkQW5hbHlzaXMoY2FjaGVLZXkpO1xuICAgIGlmIChjYWNoZWQpIHJldHVybiBjYWNoZWQ7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3Qgd29ya291dHMgPSBhd2FpdCB3b3Jrb3V0RGF0YVNlcnZpY2UubG9hZFdvcmtvdXRzKHsgbGltaXQ6IDEwMDAgfSk7XG4gICAgICBjb25zdCBleGVyY2lzZURhdGEgPSB0aGlzLmZpbHRlckV4ZXJjaXNlRGF0YShcbiAgICAgICAgd29ya291dHMsXG4gICAgICAgIGV4ZXJjaXNlTmFtZSxcbiAgICAgICAgZGF5c1xuICAgICAgKTtcblxuICAgICAgY29uc3QgYW5hbHlzaXMgPSB7XG4gICAgICAgIGV4ZXJjaXNlTmFtZSxcbiAgICAgICAgcGVyaW9kOiBkYXlzLFxuICAgICAgICB0b3RhbFNlc3Npb25zOiBleGVyY2lzZURhdGEubGVuZ3RoLFxuICAgICAgICBwcm9ncmVzc01ldHJpY3M6IHRoaXMuY2FsY3VsYXRlUHJvZ3Jlc3NNZXRyaWNzKGV4ZXJjaXNlRGF0YSksXG4gICAgICAgIHZvbHVtZVByb2dyZXNzaW9uOiB0aGlzLmNhbGN1bGF0ZVZvbHVtZVByb2dyZXNzaW9uKGV4ZXJjaXNlRGF0YSksXG4gICAgICAgIGludGVuc2l0eVByb2dyZXNzaW9uOiB0aGlzLmNhbGN1bGF0ZUludGVuc2l0eVByb2dyZXNzaW9uKGV4ZXJjaXNlRGF0YSksXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogdGhpcy5nZW5lcmF0ZVJlY29tbWVuZGF0aW9ucyhleGVyY2lzZURhdGEpLFxuICAgICAgICB0cmVuZHM6IHRoaXMuYW5hbHl6ZVRyZW5kcyhleGVyY2lzZURhdGEpLFxuICAgICAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfTtcblxuICAgICAgdGhpcy5zZXRDYWNoZWRBbmFseXNpcyhjYWNoZUtleSwgYW5hbHlzaXMpO1xuICAgICAgcmV0dXJuIGFuYWx5c2lzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhbmFseXppbmcgZXhlcmNpc2UgcHJvZ3Jlc3M6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOmDqOS9jeWIpeOBrumAsuatqeWIhuaekOOCkuWPluW+l1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbXVzY2xlR3JvdXAgLSDnrYvogonpg6jkvY1cbiAgICogQHBhcmFtIHtudW1iZXJ9IGRheXMgLSDliIbmnpDmnJ/plpPvvIjml6XmlbDvvIlcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0g6YOo5L2N5Yil6YCy5q2p5YiG5p6Q44OH44O844K/XG4gICAqL1xuICBhc3luYyBnZXRNdXNjbGVHcm91cFByb2dyZXNzKG11c2NsZUdyb3VwLCBkYXlzID0gOTApIHtcbiAgICBjb25zdCBjYWNoZUtleSA9IGBtdXNjbGVfJHttdXNjbGVHcm91cH1fJHtkYXlzfWA7XG4gICAgY29uc3QgY2FjaGVkID0gdGhpcy5nZXRDYWNoZWRBbmFseXNpcyhjYWNoZUtleSk7XG4gICAgaWYgKGNhY2hlZCkgcmV0dXJuIGNhY2hlZDtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB3b3Jrb3V0cyA9IGF3YWl0IHdvcmtvdXREYXRhU2VydmljZS5sb2FkV29ya291dHMoeyBsaW1pdDogMTAwMCB9KTtcbiAgICAgIGNvbnN0IG11c2NsZURhdGEgPSB0aGlzLmZpbHRlck11c2NsZUdyb3VwRGF0YShcbiAgICAgICAgd29ya291dHMsXG4gICAgICAgIG11c2NsZUdyb3VwLFxuICAgICAgICBkYXlzXG4gICAgICApO1xuXG4gICAgICBjb25zdCBhbmFseXNpcyA9IHtcbiAgICAgICAgbXVzY2xlR3JvdXAsXG4gICAgICAgIHBlcmlvZDogZGF5cyxcbiAgICAgICAgdG90YWxTZXNzaW9uczogbXVzY2xlRGF0YS5sZW5ndGgsXG4gICAgICAgIGV4ZXJjaXNlczogdGhpcy5hbmFseXplTXVzY2xlR3JvdXBFeGVyY2lzZXMobXVzY2xlRGF0YSksXG4gICAgICAgIHZvbHVtZVByb2dyZXNzaW9uOlxuICAgICAgICAgIHRoaXMuY2FsY3VsYXRlTXVzY2xlR3JvdXBWb2x1bWVQcm9ncmVzc2lvbihtdXNjbGVEYXRhKSxcbiAgICAgICAgZnJlcXVlbmN5QW5hbHlzaXM6IHRoaXMuYW5hbHl6ZU11c2NsZUdyb3VwRnJlcXVlbmN5KG11c2NsZURhdGEpLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IHRoaXMuZ2VuZXJhdGVNdXNjbGVHcm91cFJlY29tbWVuZGF0aW9ucyhtdXNjbGVEYXRhKSxcbiAgICAgICAgbGFzdFVwZGF0ZWQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuc2V0Q2FjaGVkQW5hbHlzaXMoY2FjaGVLZXksIGFuYWx5c2lzKTtcbiAgICAgIHJldHVybiBhbmFseXNpcztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgYW5hbHl6aW5nIG11c2NsZSBncm91cCBwcm9ncmVzczonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog57eP5ZCI55qE44Gq6YCy5q2p5YiG5p6Q44KS5Y+W5b6XXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkYXlzIC0g5YiG5p6Q5pyf6ZaT77yI5pel5pWw77yJXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IOe3j+WQiOmAsuatqeWIhuaekOODh+ODvOOCv1xuICAgKi9cbiAgYXN5bmMgZ2V0T3ZlcmFsbFByb2dyZXNzKGRheXMgPSA5MCkge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYG92ZXJhbGxfJHtkYXlzfWA7XG4gICAgY29uc3QgY2FjaGVkID0gdGhpcy5nZXRDYWNoZWRBbmFseXNpcyhjYWNoZUtleSk7XG4gICAgaWYgKGNhY2hlZCkgcmV0dXJuIGNhY2hlZDtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB3b3Jrb3V0cyA9IGF3YWl0IHdvcmtvdXREYXRhU2VydmljZS5sb2FkV29ya291dHMoeyBsaW1pdDogMTAwMCB9KTtcbiAgICAgIGNvbnN0IHJlY2VudFdvcmtvdXRzID0gdGhpcy5maWx0ZXJSZWNlbnRXb3Jrb3V0cyh3b3Jrb3V0cywgZGF5cyk7XG5cbiAgICAgIGNvbnN0IGFuYWx5c2lzID0ge1xuICAgICAgICBwZXJpb2Q6IGRheXMsXG4gICAgICAgIHRvdGFsV29ya291dHM6IHJlY2VudFdvcmtvdXRzLmxlbmd0aCxcbiAgICAgICAgb3ZlcmFsbE1ldHJpY3M6IHRoaXMuY2FsY3VsYXRlT3ZlcmFsbE1ldHJpY3MocmVjZW50V29ya291dHMpLFxuICAgICAgICBtdXNjbGVHcm91cFByb2dyZXNzOlxuICAgICAgICAgIGF3YWl0IHRoaXMuY2FsY3VsYXRlQWxsTXVzY2xlR3JvdXBQcm9ncmVzcyhyZWNlbnRXb3Jrb3V0cyksXG4gICAgICAgIGV4ZXJjaXNlUHJvZ3Jlc3M6XG4gICAgICAgICAgYXdhaXQgdGhpcy5jYWxjdWxhdGVBbGxFeGVyY2lzZVByb2dyZXNzKHJlY2VudFdvcmtvdXRzKSxcbiAgICAgICAgY29uc2lzdGVuY3lTY29yZTogdGhpcy5jYWxjdWxhdGVDb25zaXN0ZW5jeVNjb3JlKHJlY2VudFdvcmtvdXRzKSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiB0aGlzLmdlbmVyYXRlT3ZlcmFsbFJlY29tbWVuZGF0aW9ucyhyZWNlbnRXb3Jrb3V0cyksXG4gICAgICAgIGxhc3RVcGRhdGVkOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB9O1xuXG4gICAgICB0aGlzLnNldENhY2hlZEFuYWx5c2lzKGNhY2hlS2V5LCBhbmFseXNpcyk7XG4gICAgICByZXR1cm4gYW5hbHlzaXM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFuYWx5emluZyBvdmVyYWxsIHByb2dyZXNzOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgqjjgq/jgrXjgrXjgqTjgrrjg4fjg7zjgr/jgpLjg5XjgqPjg6vjgr/jg6rjg7PjgrBcbiAgICogQHBhcmFtIHtBcnJheX0gd29ya291dHMgLSDjg6/jg7zjgq/jgqLjgqbjg4jjg4fjg7zjgr9cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV4ZXJjaXNlTmFtZSAtIOOCqOOCr+OCteOCteOCpOOCuuWQjVxuICAgKiBAcGFyYW0ge251bWJlcn0gZGF5cyAtIOacn+mWk1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IOODleOCo+ODq+OCv+OBleOCjOOBn+ODh+ODvOOCv1xuICAgKi9cbiAgZmlsdGVyRXhlcmNpc2VEYXRhKHdvcmtvdXRzLCBleGVyY2lzZU5hbWUsIGRheXMpIHtcbiAgICBjb25zdCBjdXRvZmZEYXRlID0gbmV3IERhdGUoKTtcbiAgICBjdXRvZmZEYXRlLnNldERhdGUoY3V0b2ZmRGF0ZS5nZXREYXRlKCkgLSBkYXlzKTtcblxuICAgIHJldHVybiB3b3Jrb3V0c1xuICAgICAgLmZpbHRlcigod29ya291dCkgPT4ge1xuICAgICAgICBjb25zdCB3b3Jrb3V0RGF0ZSA9IG5ldyBEYXRlKHdvcmtvdXQuZGF0ZSB8fCB3b3Jrb3V0LnN0YXJ0VGltZSk7XG4gICAgICAgIHJldHVybiB3b3Jrb3V0RGF0ZSA+PSBjdXRvZmZEYXRlO1xuICAgICAgfSlcbiAgICAgIC5tYXAoKHdvcmtvdXQpID0+ICh7XG4gICAgICAgIC4uLndvcmtvdXQsXG4gICAgICAgIGV4ZXJjaXNlRGF0YTogKHdvcmtvdXQuZXhlcmNpc2VzIHx8IFtdKS5maWx0ZXIoXG4gICAgICAgICAgKGV4ZXJjaXNlKSA9PlxuICAgICAgICAgICAgZXhlcmNpc2UubmFtZSAmJlxuICAgICAgICAgICAgZXhlcmNpc2UubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGV4ZXJjaXNlTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICApLFxuICAgICAgfSkpXG4gICAgICAuZmlsdGVyKCh3b3Jrb3V0KSA9PiB3b3Jrb3V0LmV4ZXJjaXNlRGF0YS5sZW5ndGggPiAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnrYvogonpg6jkvY3jg4fjg7zjgr/jgpLjg5XjgqPjg6vjgr/jg6rjg7PjgrBcbiAgICogQHBhcmFtIHtBcnJheX0gd29ya291dHMgLSDjg6/jg7zjgq/jgqLjgqbjg4jjg4fjg7zjgr9cbiAgICogQHBhcmFtIHtzdHJpbmd9IG11c2NsZUdyb3VwIC0g562L6IKJ6YOo5L2NXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkYXlzIC0g5pyf6ZaTXG4gICAqIEByZXR1cm5zIHtBcnJheX0g44OV44Kj44Or44K/44GV44KM44Gf44OH44O844K/XG4gICAqL1xuICBmaWx0ZXJNdXNjbGVHcm91cERhdGEod29ya291dHMsIG11c2NsZUdyb3VwLCBkYXlzKSB7XG4gICAgY29uc3QgY3V0b2ZmRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgY3V0b2ZmRGF0ZS5zZXREYXRlKGN1dG9mZkRhdGUuZ2V0RGF0ZSgpIC0gZGF5cyk7XG5cbiAgICByZXR1cm4gd29ya291dHNcbiAgICAgIC5maWx0ZXIoKHdvcmtvdXQpID0+IHtcbiAgICAgICAgY29uc3Qgd29ya291dERhdGUgPSBuZXcgRGF0ZSh3b3Jrb3V0LmRhdGUgfHwgd29ya291dC5zdGFydFRpbWUpO1xuICAgICAgICByZXR1cm4gd29ya291dERhdGUgPj0gY3V0b2ZmRGF0ZTtcbiAgICAgIH0pXG4gICAgICAuZmlsdGVyKCh3b3Jrb3V0KSA9PiB7XG4gICAgICAgIGNvbnN0IG11c2NsZUdyb3VwcyA9IHdvcmtvdXQubXVzY2xlX2dyb3VwcyB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG11c2NsZUdyb3Vwcy5zb21lKChtdXNjbGUpID0+XG4gICAgICAgICAgbXVzY2xlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMobXVzY2xlR3JvdXAudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIOacgOi/keOBruODr+ODvOOCr+OCouOCpuODiOOCkuODleOCo+ODq+OCv+ODquODs+OCsFxuICAgKiBAcGFyYW0ge0FycmF5fSB3b3Jrb3V0cyAtIOODr+ODvOOCr+OCouOCpuODiOODh+ODvOOCv1xuICAgKiBAcGFyYW0ge251bWJlcn0gZGF5cyAtIOacn+mWk1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IOODleOCo+ODq+OCv+OBleOCjOOBn+ODh+ODvOOCv1xuICAgKi9cbiAgZmlsdGVyUmVjZW50V29ya291dHMod29ya291dHMsIGRheXMpIHtcbiAgICBjb25zdCBjdXRvZmZEYXRlID0gbmV3IERhdGUoKTtcbiAgICBjdXRvZmZEYXRlLnNldERhdGUoY3V0b2ZmRGF0ZS5nZXREYXRlKCkgLSBkYXlzKTtcblxuICAgIHJldHVybiB3b3Jrb3V0cy5maWx0ZXIoKHdvcmtvdXQpID0+IHtcbiAgICAgIGNvbnN0IHdvcmtvdXREYXRlID0gbmV3IERhdGUod29ya291dC5kYXRlIHx8IHdvcmtvdXQuc3RhcnRUaW1lKTtcbiAgICAgIHJldHVybiB3b3Jrb3V0RGF0ZSA+PSBjdXRvZmZEYXRlO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIOmAsuatqeODoeODiOODquOCr+OCueOCkuioiOeul1xuICAgKiBAcGFyYW0ge0FycmF5fSBleGVyY2lzZURhdGEgLSDjgqjjgq/jgrXjgrXjgqTjgrrjg4fjg7zjgr9cbiAgICogQHJldHVybnMge09iamVjdH0g6YCy5q2p44Oh44OI44Oq44Kv44K5XG4gICAqL1xuICBjYWxjdWxhdGVQcm9ncmVzc01ldHJpY3MoZXhlcmNpc2VEYXRhKSB7XG4gICAgaWYgKGV4ZXJjaXNlRGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZvbHVtZVByb2dyZXNzaW9uOiAwLFxuICAgICAgICBpbnRlbnNpdHlQcm9ncmVzc2lvbjogMCxcbiAgICAgICAgY29uc2lzdGVuY3lTY29yZTogMCxcbiAgICAgICAgYXZlcmFnZVdlaWdodDogMCxcbiAgICAgICAgYXZlcmFnZVJlcHM6IDAsXG4gICAgICAgIGF2ZXJhZ2VTZXRzOiAwLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBzZXNzaW9ucyA9IGV4ZXJjaXNlRGF0YVxuICAgICAgLm1hcCgod29ya291dCkgPT4ge1xuICAgICAgICBjb25zdCBleGVyY2lzZSA9IHdvcmtvdXQuZXhlcmNpc2VEYXRhWzBdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKHdvcmtvdXQuZGF0ZSB8fCB3b3Jrb3V0LnN0YXJ0VGltZSksXG4gICAgICAgICAgd2VpZ2h0OiBleGVyY2lzZS53ZWlnaHQgfHwgMCxcbiAgICAgICAgICByZXBzOiBleGVyY2lzZS5yZXBzIHx8IDAsXG4gICAgICAgICAgc2V0czogZXhlcmNpc2Uuc2V0cyB8fCAwLFxuICAgICAgICAgIHZvbHVtZTpcbiAgICAgICAgICAgIChleGVyY2lzZS53ZWlnaHQgfHwgMCkgKlxuICAgICAgICAgICAgKGV4ZXJjaXNlLnJlcHMgfHwgMCkgKlxuICAgICAgICAgICAgKGV4ZXJjaXNlLnNldHMgfHwgMCksXG4gICAgICAgIH07XG4gICAgICB9KVxuICAgICAgLnNvcnQoKGEsIGIpID0+IGEuZGF0ZSAtIGIuZGF0ZSk7XG5cbiAgICBjb25zdCBmaXJzdEhhbGYgPSBzZXNzaW9ucy5zbGljZSgwLCBNYXRoLmNlaWwoc2Vzc2lvbnMubGVuZ3RoIC8gMikpO1xuICAgIGNvbnN0IHNlY29uZEhhbGYgPSBzZXNzaW9ucy5zbGljZShNYXRoLmZsb29yKHNlc3Npb25zLmxlbmd0aCAvIDIpKTtcblxuICAgIGNvbnN0IGZpcnN0SGFsZkF2Z1ZvbHVtZSA9IHRoaXMuY2FsY3VsYXRlQXZlcmFnZVZvbHVtZShmaXJzdEhhbGYpO1xuICAgIGNvbnN0IHNlY29uZEhhbGZBdmdWb2x1bWUgPSB0aGlzLmNhbGN1bGF0ZUF2ZXJhZ2VWb2x1bWUoc2Vjb25kSGFsZik7XG4gICAgY29uc3Qgdm9sdW1lUHJvZ3Jlc3Npb24gPVxuICAgICAgZmlyc3RIYWxmQXZnVm9sdW1lID4gMFxuICAgICAgICA/ICgoc2Vjb25kSGFsZkF2Z1ZvbHVtZSAtIGZpcnN0SGFsZkF2Z1ZvbHVtZSkgLyBmaXJzdEhhbGZBdmdWb2x1bWUpICpcbiAgICAgICAgICAxMDBcbiAgICAgICAgOiAwO1xuXG4gICAgY29uc3QgZmlyc3RIYWxmQXZnV2VpZ2h0ID0gdGhpcy5jYWxjdWxhdGVBdmVyYWdlV2VpZ2h0KGZpcnN0SGFsZik7XG4gICAgY29uc3Qgc2Vjb25kSGFsZkF2Z1dlaWdodCA9IHRoaXMuY2FsY3VsYXRlQXZlcmFnZVdlaWdodChzZWNvbmRIYWxmKTtcbiAgICBjb25zdCBpbnRlbnNpdHlQcm9ncmVzc2lvbiA9XG4gICAgICBmaXJzdEhhbGZBdmdXZWlnaHQgPiAwXG4gICAgICAgID8gKChzZWNvbmRIYWxmQXZnV2VpZ2h0IC0gZmlyc3RIYWxmQXZnV2VpZ2h0KSAvIGZpcnN0SGFsZkF2Z1dlaWdodCkgKlxuICAgICAgICAgIDEwMFxuICAgICAgICA6IDA7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdm9sdW1lUHJvZ3Jlc3Npb246IE1hdGgucm91bmQodm9sdW1lUHJvZ3Jlc3Npb24gKiAxMCkgLyAxMCxcbiAgICAgIGludGVuc2l0eVByb2dyZXNzaW9uOiBNYXRoLnJvdW5kKGludGVuc2l0eVByb2dyZXNzaW9uICogMTApIC8gMTAsXG4gICAgICBjb25zaXN0ZW5jeVNjb3JlOiB0aGlzLmNhbGN1bGF0ZUNvbnNpc3RlbmN5U2NvcmUoZXhlcmNpc2VEYXRhKSxcbiAgICAgIGF2ZXJhZ2VXZWlnaHQ6XG4gICAgICAgIE1hdGgucm91bmQodGhpcy5jYWxjdWxhdGVBdmVyYWdlV2VpZ2h0KHNlc3Npb25zKSAqIDEwKSAvIDEwLFxuICAgICAgYXZlcmFnZVJlcHM6IE1hdGgucm91bmQodGhpcy5jYWxjdWxhdGVBdmVyYWdlUmVwcyhzZXNzaW9ucykgKiAxMCkgLyAxMCxcbiAgICAgIGF2ZXJhZ2VTZXRzOiBNYXRoLnJvdW5kKHRoaXMuY2FsY3VsYXRlQXZlcmFnZVNldHMoc2Vzc2lvbnMpICogMTApIC8gMTAsXG4gICAgICB0b3RhbFNlc3Npb25zOiBzZXNzaW9ucy5sZW5ndGgsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5zjg6rjg6Xjg7zjg6DpgLLmranjgpLoqIjnrpdcbiAgICogQHBhcmFtIHtBcnJheX0gZXhlcmNpc2VEYXRhIC0g44Ko44Kv44K144K144Kk44K644OH44O844K/XG4gICAqIEByZXR1cm5zIHtBcnJheX0g44Oc44Oq44Ol44O844Og6YCy5q2p44OH44O844K/XG4gICAqL1xuICBjYWxjdWxhdGVWb2x1bWVQcm9ncmVzc2lvbihleGVyY2lzZURhdGEpIHtcbiAgICByZXR1cm4gZXhlcmNpc2VEYXRhXG4gICAgICAubWFwKCh3b3Jrb3V0KSA9PiB7XG4gICAgICAgIGNvbnN0IGV4ZXJjaXNlID0gd29ya291dC5leGVyY2lzZURhdGFbMF07XG4gICAgICAgIGNvbnN0IHZvbHVtZSA9XG4gICAgICAgICAgKGV4ZXJjaXNlLndlaWdodCB8fCAwKSAqIChleGVyY2lzZS5yZXBzIHx8IDApICogKGV4ZXJjaXNlLnNldHMgfHwgMCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGF0ZTogbmV3IERhdGUod29ya291dC5kYXRlIHx8IHdvcmtvdXQuc3RhcnRUaW1lKSxcbiAgICAgICAgICB2b2x1bWUsXG4gICAgICAgICAgd2VpZ2h0OiBleGVyY2lzZS53ZWlnaHQgfHwgMCxcbiAgICAgICAgICByZXBzOiBleGVyY2lzZS5yZXBzIHx8IDAsXG4gICAgICAgICAgc2V0czogZXhlcmNpc2Uuc2V0cyB8fCAwLFxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmRhdGUgLSBiLmRhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8t+W6pumAsuatqeOCkuioiOeul1xuICAgKiBAcGFyYW0ge0FycmF5fSBleGVyY2lzZURhdGEgLSDjgqjjgq/jgrXjgrXjgqTjgrrjg4fjg7zjgr9cbiAgICogQHJldHVybnMge0FycmF5fSDlvLfluqbpgLLmranjg4fjg7zjgr9cbiAgICovXG4gIGNhbGN1bGF0ZUludGVuc2l0eVByb2dyZXNzaW9uKGV4ZXJjaXNlRGF0YSkge1xuICAgIHJldHVybiBleGVyY2lzZURhdGFcbiAgICAgIC5tYXAoKHdvcmtvdXQpID0+IHtcbiAgICAgICAgY29uc3QgZXhlcmNpc2UgPSB3b3Jrb3V0LmV4ZXJjaXNlRGF0YVswXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSh3b3Jrb3V0LmRhdGUgfHwgd29ya291dC5zdGFydFRpbWUpLFxuICAgICAgICAgIHdlaWdodDogZXhlcmNpc2Uud2VpZ2h0IHx8IDAsXG4gICAgICAgICAgcmVwczogZXhlcmNpc2UucmVwcyB8fCAwLFxuICAgICAgICAgIHNldHM6IGV4ZXJjaXNlLnNldHMgfHwgMCxcbiAgICAgICAgICBpbnRlbnNpdHk6IGV4ZXJjaXNlLndlaWdodCB8fCAwLFxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmRhdGUgLSBiLmRhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeti+iCiemDqOS9jeOBruOCqOOCr+OCteOCteOCpOOCuuWIhuaekFxuICAgKiBAcGFyYW0ge0FycmF5fSBtdXNjbGVEYXRhIC0g562L6IKJ6YOo5L2N44OH44O844K/XG4gICAqIEByZXR1cm5zIHtPYmplY3R9IOOCqOOCr+OCteOCteOCpOOCuuWIhuaekFxuICAgKi9cbiAgYW5hbHl6ZU11c2NsZUdyb3VwRXhlcmNpc2VzKG11c2NsZURhdGEpIHtcbiAgICBjb25zdCBleGVyY2lzZUNvdW50cyA9IHt9O1xuICAgIGNvbnN0IGV4ZXJjaXNlUHJvZ3Jlc3MgPSB7fTtcblxuICAgIG11c2NsZURhdGEuZm9yRWFjaCgod29ya291dCkgPT4ge1xuICAgICAgKHdvcmtvdXQuZXhlcmNpc2VzIHx8IFtdKS5mb3JFYWNoKChleGVyY2lzZSkgPT4ge1xuICAgICAgICBjb25zdCBleGVyY2lzZU5hbWUgPSBleGVyY2lzZS5uYW1lO1xuICAgICAgICBpZiAoIWV4ZXJjaXNlQ291bnRzW2V4ZXJjaXNlTmFtZV0pIHtcbiAgICAgICAgICBleGVyY2lzZUNvdW50c1tleGVyY2lzZU5hbWVdID0gMDtcbiAgICAgICAgICBleGVyY2lzZVByb2dyZXNzW2V4ZXJjaXNlTmFtZV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBleGVyY2lzZUNvdW50c1tleGVyY2lzZU5hbWVdKys7XG4gICAgICAgIGV4ZXJjaXNlUHJvZ3Jlc3NbZXhlcmNpc2VOYW1lXS5wdXNoKHtcbiAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSh3b3Jrb3V0LmRhdGUgfHwgd29ya291dC5zdGFydFRpbWUpLFxuICAgICAgICAgIHdlaWdodDogZXhlcmNpc2Uud2VpZ2h0IHx8IDAsXG4gICAgICAgICAgcmVwczogZXhlcmNpc2UucmVwcyB8fCAwLFxuICAgICAgICAgIHNldHM6IGV4ZXJjaXNlLnNldHMgfHwgMCxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIOWQhOOCqOOCr+OCteOCteOCpOOCuuOBrumAsuatqeOCkuioiOeul1xuICAgIE9iamVjdC5rZXlzKGV4ZXJjaXNlUHJvZ3Jlc3MpLmZvckVhY2goKGV4ZXJjaXNlTmFtZSkgPT4ge1xuICAgICAgY29uc3Qgc2Vzc2lvbnMgPSBleGVyY2lzZVByb2dyZXNzW2V4ZXJjaXNlTmFtZV0uc29ydChcbiAgICAgICAgKGEsIGIpID0+IGEuZGF0ZSAtIGIuZGF0ZVxuICAgICAgKTtcbiAgICAgIGlmIChzZXNzaW9ucy5sZW5ndGggPj0gMikge1xuICAgICAgICBjb25zdCBmaXJzdFNlc3Npb24gPSBzZXNzaW9uc1swXTtcbiAgICAgICAgY29uc3QgbGFzdFNlc3Npb24gPSBzZXNzaW9uc1tzZXNzaW9ucy5sZW5ndGggLSAxXTtcbiAgICAgICAgY29uc3Qgd2VpZ2h0UHJvZ3Jlc3MgPVxuICAgICAgICAgIGZpcnN0U2Vzc2lvbi53ZWlnaHQgPiAwXG4gICAgICAgICAgICA/ICgobGFzdFNlc3Npb24ud2VpZ2h0IC0gZmlyc3RTZXNzaW9uLndlaWdodCkgL1xuICAgICAgICAgICAgICAgIGZpcnN0U2Vzc2lvbi53ZWlnaHQpICpcbiAgICAgICAgICAgICAgMTAwXG4gICAgICAgICAgICA6IDA7XG5cbiAgICAgICAgZXhlcmNpc2VQcm9ncmVzc1tleGVyY2lzZU5hbWVdID0ge1xuICAgICAgICAgIHNlc3Npb25zOiBzZXNzaW9ucyxcbiAgICAgICAgICB3ZWlnaHRQcm9ncmVzczogTWF0aC5yb3VuZCh3ZWlnaHRQcm9ncmVzcyAqIDEwKSAvIDEwLFxuICAgICAgICAgIHRvdGFsU2Vzc2lvbnM6IHNlc3Npb25zLmxlbmd0aCxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBleGVyY2lzZUNvdW50cyxcbiAgICAgIGV4ZXJjaXNlUHJvZ3Jlc3MsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnrYvogonpg6jkvY3jga7jg5zjg6rjg6Xjg7zjg6DpgLLmranjgpLoqIjnrpdcbiAgICogQHBhcmFtIHtBcnJheX0gbXVzY2xlRGF0YSAtIOeti+iCiemDqOS9jeODh+ODvOOCv1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IOODnOODquODpeODvOODoOmAsuatqeODh+ODvOOCv1xuICAgKi9cbiAgY2FsY3VsYXRlTXVzY2xlR3JvdXBWb2x1bWVQcm9ncmVzc2lvbihtdXNjbGVEYXRhKSB7XG4gICAgcmV0dXJuIG11c2NsZURhdGFcbiAgICAgIC5tYXAoKHdvcmtvdXQpID0+IHtcbiAgICAgICAgY29uc3QgdG90YWxWb2x1bWUgPSAod29ya291dC5leGVyY2lzZXMgfHwgW10pLnJlZHVjZShcbiAgICAgICAgICAoc3VtLCBleGVyY2lzZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgc3VtICtcbiAgICAgICAgICAgICAgKGV4ZXJjaXNlLndlaWdodCB8fCAwKSAqXG4gICAgICAgICAgICAgICAgKGV4ZXJjaXNlLnJlcHMgfHwgMCkgKlxuICAgICAgICAgICAgICAgIChleGVyY2lzZS5zZXRzIHx8IDApXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgMFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGF0ZTogbmV3IERhdGUod29ya291dC5kYXRlIHx8IHdvcmtvdXQuc3RhcnRUaW1lKSxcbiAgICAgICAgICB2b2x1bWU6IHRvdGFsVm9sdW1lLFxuICAgICAgICAgIGV4ZXJjaXNlQ291bnQ6ICh3b3Jrb3V0LmV4ZXJjaXNlcyB8fCBbXSkubGVuZ3RoLFxuICAgICAgICAgIGR1cmF0aW9uOiB3b3Jrb3V0LmR1cmF0aW9uIHx8IDAsXG4gICAgICAgIH07XG4gICAgICB9KVxuICAgICAgLnNvcnQoKGEsIGIpID0+IGEuZGF0ZSAtIGIuZGF0ZSk7XG4gIH1cblxuICAvKipcbiAgICog562L6IKJ6YOo5L2N44Gu6aC75bqm5YiG5p6QXG4gICAqIEBwYXJhbSB7QXJyYXl9IG11c2NsZURhdGEgLSDnrYvogonpg6jkvY3jg4fjg7zjgr9cbiAgICogQHJldHVybnMge09iamVjdH0g6aC75bqm5YiG5p6Q44OH44O844K/XG4gICAqL1xuICBhbmFseXplTXVzY2xlR3JvdXBGcmVxdWVuY3kobXVzY2xlRGF0YSkge1xuICAgIGNvbnN0IHNlc3Npb25zID0gbXVzY2xlRGF0YVxuICAgICAgLm1hcCgod29ya291dCkgPT4gKHtcbiAgICAgICAgZGF0ZTogbmV3IERhdGUod29ya291dC5kYXRlIHx8IHdvcmtvdXQuc3RhcnRUaW1lKSxcbiAgICAgIH0pKVxuICAgICAgLnNvcnQoKGEsIGIpID0+IGEuZGF0ZSAtIGIuZGF0ZSk7XG5cbiAgICBpZiAoc2Vzc2lvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhdmVyYWdlRGF5c0JldHdlZW46IDAsXG4gICAgICAgIGZyZXF1ZW5jeVNjb3JlOiAwLFxuICAgICAgICBsYXN0V29ya291dDogbnVsbCxcbiAgICAgICAgbmV4dFJlY29tbWVuZGVkOiBudWxsLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyDjgrvjg4Pjgrfjg6fjg7PplpPpmpTjgpLoqIjnrpdcbiAgICBjb25zdCBpbnRlcnZhbHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNlc3Npb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpbnRlcnZhbCA9XG4gICAgICAgIChzZXNzaW9uc1tpXS5kYXRlIC0gc2Vzc2lvbnNbaSAtIDFdLmRhdGUpIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpO1xuICAgICAgaW50ZXJ2YWxzLnB1c2goaW50ZXJ2YWwpO1xuICAgIH1cblxuICAgIGNvbnN0IGF2ZXJhZ2VEYXlzQmV0d2VlbiA9XG4gICAgICBpbnRlcnZhbHMubGVuZ3RoID4gMFxuICAgICAgICA/IGludGVydmFscy5yZWR1Y2UoKHN1bSwgaW50ZXJ2YWwpID0+IHN1bSArIGludGVydmFsLCAwKSAvXG4gICAgICAgICAgaW50ZXJ2YWxzLmxlbmd0aFxuICAgICAgICA6IDA7XG5cbiAgICBjb25zdCBsYXN0V29ya291dCA9IHNlc3Npb25zW3Nlc3Npb25zLmxlbmd0aCAtIDFdLmRhdGU7XG4gICAgY29uc3QgX2RheXNTaW5jZUxhc3RXb3Jrb3V0ID1cbiAgICAgIChuZXcgRGF0ZSgpIC0gbGFzdFdvcmtvdXQpIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpO1xuXG4gICAgLy8g6aC75bqm44K544Kz44Ki77yI55CG5oOz55qE44Gr44GvMi0z5pel6ZaT6ZqU77yJXG4gICAgY29uc3QgaWRlYWxJbnRlcnZhbCA9IDIuNTtcbiAgICBjb25zdCBmcmVxdWVuY3lTY29yZSA9XG4gICAgICBhdmVyYWdlRGF5c0JldHdlZW4gPiAwXG4gICAgICAgID8gTWF0aC5tYXgoMCwgMTAwIC0gTWF0aC5hYnMoYXZlcmFnZURheXNCZXR3ZWVuIC0gaWRlYWxJbnRlcnZhbCkgKiAyMClcbiAgICAgICAgOiAwO1xuXG4gICAgY29uc3QgbmV4dFJlY29tbWVuZGVkID0gbmV3IERhdGUobGFzdFdvcmtvdXQpO1xuICAgIG5leHRSZWNvbW1lbmRlZC5zZXREYXRlKFxuICAgICAgbmV4dFJlY29tbWVuZGVkLmdldERhdGUoKSArIE1hdGgucm91bmQoYXZlcmFnZURheXNCZXR3ZWVuKVxuICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgYXZlcmFnZURheXNCZXR3ZWVuOiBNYXRoLnJvdW5kKGF2ZXJhZ2VEYXlzQmV0d2VlbiAqIDEwKSAvIDEwLFxuICAgICAgZnJlcXVlbmN5U2NvcmU6IE1hdGgucm91bmQoZnJlcXVlbmN5U2NvcmUpLFxuICAgICAgbGFzdFdvcmtvdXQsXG4gICAgICBuZXh0UmVjb21tZW5kZWQsXG4gICAgICB0b3RhbFNlc3Npb25zOiBzZXNzaW9ucy5sZW5ndGgsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnt4/lkIjjg6Hjg4jjg6rjgq/jgrnjgpLoqIjnrpdcbiAgICogQHBhcmFtIHtBcnJheX0gd29ya291dHMgLSDjg6/jg7zjgq/jgqLjgqbjg4jjg4fjg7zjgr9cbiAgICogQHJldHVybnMge09iamVjdH0g57eP5ZCI44Oh44OI44Oq44Kv44K5XG4gICAqL1xuICBjYWxjdWxhdGVPdmVyYWxsTWV0cmljcyh3b3Jrb3V0cykge1xuICAgIGNvbnN0IHRvdGFsVm9sdW1lID0gd29ya291dHMucmVkdWNlKChzdW0sIHdvcmtvdXQpID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHN1bSArXG4gICAgICAgICh3b3Jrb3V0LmV4ZXJjaXNlcyB8fCBbXSkucmVkdWNlKChleGVyY2lzZVN1bSwgZXhlcmNpc2UpID0+IHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgZXhlcmNpc2VTdW0gK1xuICAgICAgICAgICAgKGV4ZXJjaXNlLndlaWdodCB8fCAwKSAqIChleGVyY2lzZS5yZXBzIHx8IDApICogKGV4ZXJjaXNlLnNldHMgfHwgMClcbiAgICAgICAgICApO1xuICAgICAgICB9LCAwKVxuICAgICAgKTtcbiAgICB9LCAwKTtcblxuICAgIGNvbnN0IHRvdGFsRHVyYXRpb24gPSB3b3Jrb3V0cy5yZWR1Y2UoXG4gICAgICAoc3VtLCB3b3Jrb3V0KSA9PiBzdW0gKyAod29ya291dC5kdXJhdGlvbiB8fCAwKSxcbiAgICAgIDBcbiAgICApO1xuICAgIGNvbnN0IGF2ZXJhZ2VEdXJhdGlvbiA9XG4gICAgICB3b3Jrb3V0cy5sZW5ndGggPiAwID8gdG90YWxEdXJhdGlvbiAvIHdvcmtvdXRzLmxlbmd0aCA6IDA7XG5cbiAgICBjb25zdCBtdXNjbGVHcm91cENvdW50cyA9IHt9O1xuICAgIHdvcmtvdXRzLmZvckVhY2goKHdvcmtvdXQpID0+IHtcbiAgICAgICh3b3Jrb3V0Lm11c2NsZV9ncm91cHMgfHwgW10pLmZvckVhY2goKG11c2NsZSkgPT4ge1xuICAgICAgICBtdXNjbGVHcm91cENvdW50c1ttdXNjbGVdID0gKG11c2NsZUdyb3VwQ291bnRzW211c2NsZV0gfHwgMCkgKyAxO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdG90YWxWb2x1bWU6IE1hdGgucm91bmQodG90YWxWb2x1bWUpLFxuICAgICAgdG90YWxEdXJhdGlvbjogTWF0aC5yb3VuZCh0b3RhbER1cmF0aW9uIC8gNjApLCAvLyDliIbljZjkvY1cbiAgICAgIGF2ZXJhZ2VEdXJhdGlvbjogTWF0aC5yb3VuZChhdmVyYWdlRHVyYXRpb24gLyA2MCksIC8vIOWIhuWNmOS9jVxuICAgICAgbXVzY2xlR3JvdXBEaXN0cmlidXRpb246IG11c2NsZUdyb3VwQ291bnRzLFxuICAgICAgdG90YWxXb3Jrb3V0czogd29ya291dHMubGVuZ3RoLFxuICAgICAgYXZlcmFnZVZvbHVtZVBlcldvcmtvdXQ6XG4gICAgICAgIHdvcmtvdXRzLmxlbmd0aCA+IDAgPyBNYXRoLnJvdW5kKHRvdGFsVm9sdW1lIC8gd29ya291dHMubGVuZ3RoKSA6IDAsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhajnrYvogonpg6jkvY3jga7pgLLmranjgpLoqIjnrpdcbiAgICogQHBhcmFtIHtBcnJheX0gd29ya291dHMgLSDjg6/jg7zjgq/jgqLjgqbjg4jjg4fjg7zjgr9cbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0g5YWo562L6IKJ6YOo5L2N6YCy5q2p44OH44O844K/XG4gICAqL1xuICBhc3luYyBjYWxjdWxhdGVBbGxNdXNjbGVHcm91cFByb2dyZXNzKHdvcmtvdXRzKSB7XG4gICAgY29uc3QgbXVzY2xlR3JvdXBzID0gbmV3IFNldCgpO1xuICAgIHdvcmtvdXRzLmZvckVhY2goKHdvcmtvdXQpID0+IHtcbiAgICAgICh3b3Jrb3V0Lm11c2NsZV9ncm91cHMgfHwgW10pLmZvckVhY2goKG11c2NsZSkgPT5cbiAgICAgICAgbXVzY2xlR3JvdXBzLmFkZChtdXNjbGUpXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcHJvZ3Jlc3MgPSB7fTtcbiAgICBmb3IgKGNvbnN0IG11c2NsZUdyb3VwIG9mIG11c2NsZUdyb3Vwcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcHJvZ3Jlc3NbbXVzY2xlR3JvdXBdID0gYXdhaXQgdGhpcy5nZXRNdXNjbGVHcm91cFByb2dyZXNzKFxuICAgICAgICAgIG11c2NsZUdyb3VwLFxuICAgICAgICAgIDkwXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYEVycm9yIGNhbGN1bGF0aW5nIHByb2dyZXNzIGZvciBtdXNjbGUgZ3JvdXAgJHttdXNjbGVHcm91cH06YCxcbiAgICAgICAgICBlcnJvclxuICAgICAgICApO1xuICAgICAgICBwcm9ncmVzc1ttdXNjbGVHcm91cF0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcm9ncmVzcztcbiAgfVxuXG4gIC8qKlxuICAgKiDlhajjgqjjgq/jgrXjgrXjgqTjgrrjga7pgLLmranjgpLoqIjnrpdcbiAgICogQHBhcmFtIHtBcnJheX0gd29ya291dHMgLSDjg6/jg7zjgq/jgqLjgqbjg4jjg4fjg7zjgr9cbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0g5YWo44Ko44Kv44K144K144Kk44K66YCy5q2p44OH44O844K/XG4gICAqL1xuICBhc3luYyBjYWxjdWxhdGVBbGxFeGVyY2lzZVByb2dyZXNzKHdvcmtvdXRzKSB7XG4gICAgY29uc3QgZXhlcmNpc2VzID0gbmV3IFNldCgpO1xuICAgIHdvcmtvdXRzLmZvckVhY2goKHdvcmtvdXQpID0+IHtcbiAgICAgICh3b3Jrb3V0LmV4ZXJjaXNlcyB8fCBbXSkuZm9yRWFjaCgoZXhlcmNpc2UpID0+IHtcbiAgICAgICAgaWYgKGV4ZXJjaXNlLm5hbWUpIGV4ZXJjaXNlcy5hZGQoZXhlcmNpc2UubmFtZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHByb2dyZXNzID0ge307XG4gICAgZm9yIChjb25zdCBleGVyY2lzZU5hbWUgb2YgZXhlcmNpc2VzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBwcm9ncmVzc1tleGVyY2lzZU5hbWVdID0gYXdhaXQgdGhpcy5nZXRFeGVyY2lzZVByb2dyZXNzKFxuICAgICAgICAgIGV4ZXJjaXNlTmFtZSxcbiAgICAgICAgICA5MFxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBFcnJvciBjYWxjdWxhdGluZyBwcm9ncmVzcyBmb3IgZXhlcmNpc2UgJHtleGVyY2lzZU5hbWV9OmAsXG4gICAgICAgICAgZXJyb3JcbiAgICAgICAgKTtcbiAgICAgICAgcHJvZ3Jlc3NbZXhlcmNpc2VOYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2dyZXNzO1xuICB9XG5cbiAgLyoqXG4gICAqIOS4gOiyq+aAp+OCueOCs+OCouOCkuioiOeul1xuICAgKiBAcGFyYW0ge0FycmF5fSB3b3Jrb3V0cyAtIOODr+ODvOOCr+OCouOCpuODiOODh+ODvOOCv1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfSDkuIDosqvmgKfjgrnjgrPjgqLvvIgwLTEwMO+8iVxuICAgKi9cbiAgY2FsY3VsYXRlQ29uc2lzdGVuY3lTY29yZSh3b3Jrb3V0cykge1xuICAgIGlmICh3b3Jrb3V0cy5sZW5ndGggPCAyKSByZXR1cm4gMDtcblxuICAgIGNvbnN0IHNlc3Npb25zID0gd29ya291dHNcbiAgICAgIC5tYXAoKHdvcmtvdXQpID0+ICh7XG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKHdvcmtvdXQuZGF0ZSB8fCB3b3Jrb3V0LnN0YXJ0VGltZSksXG4gICAgICB9KSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmRhdGUgLSBiLmRhdGUpO1xuXG4gICAgLy8g44K744OD44K344On44Oz6ZaT6ZqU44Gu5LiA6LKr5oCn44KS6KiI566XXG4gICAgY29uc3QgaW50ZXJ2YWxzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzZXNzaW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaW50ZXJ2YWwgPVxuICAgICAgICAoc2Vzc2lvbnNbaV0uZGF0ZSAtIHNlc3Npb25zW2kgLSAxXS5kYXRlKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KTtcbiAgICAgIGludGVydmFscy5wdXNoKGludGVydmFsKTtcbiAgICB9XG5cbiAgICBpZiAoaW50ZXJ2YWxzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XG5cbiAgICBjb25zdCBhdmVyYWdlSW50ZXJ2YWwgPVxuICAgICAgaW50ZXJ2YWxzLnJlZHVjZSgoc3VtLCBpbnRlcnZhbCkgPT4gc3VtICsgaW50ZXJ2YWwsIDApIC8gaW50ZXJ2YWxzLmxlbmd0aDtcbiAgICBjb25zdCB2YXJpYW5jZSA9XG4gICAgICBpbnRlcnZhbHMucmVkdWNlKFxuICAgICAgICAoc3VtLCBpbnRlcnZhbCkgPT4gc3VtICsgTWF0aC5wb3coaW50ZXJ2YWwgLSBhdmVyYWdlSW50ZXJ2YWwsIDIpLFxuICAgICAgICAwXG4gICAgICApIC8gaW50ZXJ2YWxzLmxlbmd0aDtcbiAgICBjb25zdCBzdGFuZGFyZERldmlhdGlvbiA9IE1hdGguc3FydCh2YXJpYW5jZSk7XG5cbiAgICAvLyDmqJnmupblgY/lt67jgYzlsI/jgZXjgYTjgbvjgankuIDosqvmgKfjgYzpq5jjgYRcbiAgICBjb25zdCBjb25zaXN0ZW5jeVNjb3JlID0gTWF0aC5tYXgoMCwgMTAwIC0gc3RhbmRhcmREZXZpYXRpb24gKiAxMCk7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoY29uc2lzdGVuY3lTY29yZSk7XG4gIH1cblxuICAvKipcbiAgICog5o6o5aWo5LqL6aCF44KS55Sf5oiQXG4gICAqIEBwYXJhbSB7QXJyYXl9IGV4ZXJjaXNlRGF0YSAtIOOCqOOCr+OCteOCteOCpOOCuuODh+ODvOOCv1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IOaOqOWlqOS6i+mghemFjeWIl1xuICAgKi9cbiAgZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbnMoZXhlcmNpc2VEYXRhKSB7XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gW107XG4gICAgY29uc3QgbWV0cmljcyA9IHRoaXMuY2FsY3VsYXRlUHJvZ3Jlc3NNZXRyaWNzKGV4ZXJjaXNlRGF0YSk7XG5cbiAgICBpZiAobWV0cmljcy52b2x1bWVQcm9ncmVzc2lvbiA8IDUpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3ZvbHVtZScsXG4gICAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgJ+ODnOODquODpeODvOODoOOBruWil+WKoOOBjOWBnOa7nuOBl+OBpuOBhOOBvuOBmeOAguOCu+ODg+ODiOaVsOOChOODrOODg+ODl+aVsOOCkuWil+OChOOBmeOBk+OBqOOCkuaknOiojuOBl+OBpuOBj+OBoOOBleOBhOOAgicsXG4gICAgICAgIGFjdGlvbjogJ+OCu+ODg+ODiOaVsOOCkjEtMuOCu+ODg+ODiOWil+OChOOBmeOBi+OAgeODrOODg+ODl+aVsOOCkjItM+WbnuWil+OChOOBmScsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobWV0cmljcy5pbnRlbnNpdHlQcm9ncmVzc2lvbiA8IDIpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2ludGVuc2l0eScsXG4gICAgICAgIHByaW9yaXR5OiAnbWVkaXVtJyxcbiAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAn6YeN6YeP44Gu5aKX5Yqg44GM57ep44KE44GL44Gn44GZ44CC44KI44KK6YeN44GE6YeN6YeP44Gr44OB44Oj44Os44Oz44K444GX44Gm44G/44Gm44GP44Gg44GV44GE44CCJyxcbiAgICAgICAgYWN0aW9uOiAn6YeN6YeP44KSMi41LTVrZ+Wil+OChOOBmeOBi+OAgeOCiOOCiumHjeOBhOmHjemHj+OBp+ODrOODg+ODl+aVsOOCkua4m+OCieOBmScsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobWV0cmljcy5jb25zaXN0ZW5jeVNjb3JlIDwgNzApIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2NvbnNpc3RlbmN5JyxcbiAgICAgICAgcHJpb3JpdHk6ICdoaWdoJyxcbiAgICAgICAgbWVzc2FnZTogJ+ODiOODrOODvOODi+ODs+OCsOOBruS4gOiyq+aAp+OCkuaUueWWhOOBmeOCi+W/heimgeOBjOOBguOCiuOBvuOBmeOAgicsXG4gICAgICAgIGFjdGlvbjogJ+Wumuacn+eahOOBquOCueOCseOCuOODpeODvOODq+OCkuioreWumuOBl+OAgemAsTItM+WbnuOBrumgu+W6puOCkue2reaMgeOBmeOCiycsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVjb21tZW5kYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgICAgICB0eXBlOiAncG9zaXRpdmUnLFxuICAgICAgICBwcmlvcml0eTogJ2xvdycsXG4gICAgICAgIG1lc3NhZ2U6ICfntKDmmbTjgonjgZfjgYTpgLLmranjgafjgZnvvIHnj77lnKjjga7jg4jjg6zjg7zjg4vjg7PjgrDjgpLntpnntprjgZfjgabjgY/jgaDjgZXjgYTjgIInLFxuICAgICAgICBhY3Rpb246ICfnj77lnKjjga7jg5fjg63jgrDjg6njg6DjgpLntq3mjIHjgZfjgIHlv4XopoHjgavlv5zjgZjjgablvq7oqr/mlbTjgZnjgosnLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlY29tbWVuZGF0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiDnrYvogonpg6jkvY3jga7mjqjlpajkuovpoIXjgpLnlJ/miJBcbiAgICogQHBhcmFtIHtBcnJheX0gbXVzY2xlRGF0YSAtIOeti+iCiemDqOS9jeODh+ODvOOCv1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IOaOqOWlqOS6i+mghemFjeWIl1xuICAgKi9cbiAgZ2VuZXJhdGVNdXNjbGVHcm91cFJlY29tbWVuZGF0aW9ucyhtdXNjbGVEYXRhKSB7XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gW107XG4gICAgY29uc3QgZnJlcXVlbmN5QW5hbHlzaXMgPSB0aGlzLmFuYWx5emVNdXNjbGVHcm91cEZyZXF1ZW5jeShtdXNjbGVEYXRhKTtcblxuICAgIGlmIChmcmVxdWVuY3lBbmFseXNpcy5mcmVxdWVuY3lTY29yZSA8IDYwKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdmcmVxdWVuY3knLFxuICAgICAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgICAgICBtZXNzYWdlOiAn44GT44Gu6YOo5L2N44Gu44OI44Os44O844OL44Oz44Kw6aC75bqm44GM5L2O44GZ44GO44G+44GZ44CCJyxcbiAgICAgICAgYWN0aW9uOiAn6YCxMS0y5Zue44Gu6aC75bqm44Gn44OI44Os44O844OL44Oz44Kw44KS5aKX44KE44GZJyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChmcmVxdWVuY3lBbmFseXNpcy5hdmVyYWdlRGF5c0JldHdlZW4gPiA3KSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdyZWNvdmVyeScsXG4gICAgICAgIHByaW9yaXR5OiAnbWVkaXVtJyxcbiAgICAgICAgbWVzc2FnZTogJ+ODiOODrOODvOODi+ODs+OCsOmWk+malOOBjOmVt+OBmeOBjuOCi+WPr+iDveaAp+OBjOOBguOCiuOBvuOBmeOAgicsXG4gICAgICAgIGFjdGlvbjpcbiAgICAgICAgICAn44KI44KK6aC757mB44Gr44OI44Os44O844OL44Oz44Kw44GZ44KL44GL44CB5LuW44Gu6YOo5L2N44Go44Gu57WE44G/5ZCI44KP44Gb44KS5qSc6KiO44GZ44KLJyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZWNvbW1lbmRhdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICog57eP5ZCI5o6o5aWo5LqL6aCF44KS55Sf5oiQXG4gICAqIEBwYXJhbSB7QXJyYXl9IHdvcmtvdXRzIC0g44Ov44O844Kv44Ki44Km44OI44OH44O844K/XG4gICAqIEByZXR1cm5zIHtBcnJheX0g5o6o5aWo5LqL6aCF6YWN5YiXXG4gICAqL1xuICBnZW5lcmF0ZU92ZXJhbGxSZWNvbW1lbmRhdGlvbnMod29ya291dHMpIHtcbiAgICBjb25zdCByZWNvbW1lbmRhdGlvbnMgPSBbXTtcbiAgICBjb25zdCBtZXRyaWNzID0gdGhpcy5jYWxjdWxhdGVPdmVyYWxsTWV0cmljcyh3b3Jrb3V0cyk7XG4gICAgY29uc3QgY29uc2lzdGVuY3lTY29yZSA9IHRoaXMuY2FsY3VsYXRlQ29uc2lzdGVuY3lTY29yZSh3b3Jrb3V0cyk7XG5cbiAgICBpZiAoY29uc2lzdGVuY3lTY29yZSA8IDYwKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdjb25zaXN0ZW5jeScsXG4gICAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICAgIG1lc3NhZ2U6ICfjg4jjg6zjg7zjg4vjg7PjgrDjga7kuIDosqvmgKfjgpLmlLnlloTjgZfjgb7jgZfjgofjgYbjgIInLFxuICAgICAgICBhY3Rpb246ICflrprmnJ/nmoTjgarjgrnjgrHjgrjjg6Xjg7zjg6vjgpLoqK3lrprjgZfjgIHpgLEzLTTlm57jga7poLvluqbjgpLnm67mqJnjgavjgZnjgosnLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG1ldHJpY3MuYXZlcmFnZVZvbHVtZVBlcldvcmtvdXQgPCAxMDAwKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICd2b2x1bWUnLFxuICAgICAgICBwcmlvcml0eTogJ21lZGl1bScsXG4gICAgICAgIG1lc3NhZ2U6ICfjgrvjg4Pjgrfjg6fjg7PjgYLjgZ/jgorjga7jg5zjg6rjg6Xjg7zjg6DjgpLlopfjgoTjgZnjgZPjgajjgpLmpJzoqI7jgZfjgabjgY/jgaDjgZXjgYTjgIInLFxuICAgICAgICBhY3Rpb246ICfjgqjjgq/jgrXjgrXjgqTjgrrmlbDjgoTjgrvjg4Pjg4jmlbDjgpLlopfjgoTjgZknLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgbXVzY2xlR3JvdXBzID0gT2JqZWN0LmtleXMobWV0cmljcy5tdXNjbGVHcm91cERpc3RyaWJ1dGlvbik7XG4gICAgaWYgKG11c2NsZUdyb3Vwcy5sZW5ndGggPCA0KSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdiYWxhbmNlJyxcbiAgICAgICAgcHJpb3JpdHk6ICdtZWRpdW0nLFxuICAgICAgICBtZXNzYWdlOiAn44KI44KK5aSa44GP44Gu562L6IKJ6YOo5L2N44KS44OI44Os44O844OL44Oz44Kw44GX44G+44GX44KH44GG44CCJyxcbiAgICAgICAgYWN0aW9uOiAn5paw44GX44GE44Ko44Kv44K144K144Kk44K644KE562L6IKJ6YOo5L2N44KS6L+95Yqg44GZ44KLJyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZWNvbW1lbmRhdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICog44OI44Os44Oz44OJ44KS5YiG5p6QXG4gICAqIEBwYXJhbSB7QXJyYXl9IGV4ZXJjaXNlRGF0YSAtIOOCqOOCr+OCteOCteOCpOOCuuODh+ODvOOCv1xuICAgKiBAcmV0dXJucyB7T2JqZWN0fSDjg4jjg6zjg7Pjg4nliIbmnpDjg4fjg7zjgr9cbiAgICovXG4gIGFuYWx5emVUcmVuZHMoZXhlcmNpc2VEYXRhKSB7XG4gICAgY29uc3Qgc2Vzc2lvbnMgPSBleGVyY2lzZURhdGFcbiAgICAgIC5tYXAoKHdvcmtvdXQpID0+IHtcbiAgICAgICAgY29uc3QgZXhlcmNpc2UgPSB3b3Jrb3V0LmV4ZXJjaXNlRGF0YVswXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSh3b3Jrb3V0LmRhdGUgfHwgd29ya291dC5zdGFydFRpbWUpLFxuICAgICAgICAgIHdlaWdodDogZXhlcmNpc2Uud2VpZ2h0IHx8IDAsXG4gICAgICAgICAgcmVwczogZXhlcmNpc2UucmVwcyB8fCAwLFxuICAgICAgICAgIHNldHM6IGV4ZXJjaXNlLnNldHMgfHwgMCxcbiAgICAgICAgICB2b2x1bWU6XG4gICAgICAgICAgICAoZXhlcmNpc2Uud2VpZ2h0IHx8IDApICpcbiAgICAgICAgICAgIChleGVyY2lzZS5yZXBzIHx8IDApICpcbiAgICAgICAgICAgIChleGVyY2lzZS5zZXRzIHx8IDApLFxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmRhdGUgLSBiLmRhdGUpO1xuXG4gICAgaWYgKHNlc3Npb25zLmxlbmd0aCA8IDMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdlaWdodFRyZW5kOiAnaW5zdWZmaWNpZW50X2RhdGEnLFxuICAgICAgICB2b2x1bWVUcmVuZDogJ2luc3VmZmljaWVudF9kYXRhJyxcbiAgICAgICAgY29uc2lzdGVuY3lUcmVuZDogJ2luc3VmZmljaWVudF9kYXRhJyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8g57ea5b2i5Zue5biw44Gn44OI44Os44Oz44OJ44KS6KiI566XXG4gICAgY29uc3Qgd2VpZ2h0VHJlbmQgPSB0aGlzLmNhbGN1bGF0ZUxpbmVhclRyZW5kKFxuICAgICAgc2Vzc2lvbnMubWFwKChzKSA9PiBzLndlaWdodClcbiAgICApO1xuICAgIGNvbnN0IHZvbHVtZVRyZW5kID0gdGhpcy5jYWxjdWxhdGVMaW5lYXJUcmVuZChcbiAgICAgIHNlc3Npb25zLm1hcCgocykgPT4gcy52b2x1bWUpXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICB3ZWlnaHRUcmVuZDpcbiAgICAgICAgd2VpZ2h0VHJlbmQgPiAwLjFcbiAgICAgICAgICA/ICdpbmNyZWFzaW5nJ1xuICAgICAgICAgIDogd2VpZ2h0VHJlbmQgPCAtMC4xXG4gICAgICAgICAgICA/ICdkZWNyZWFzaW5nJ1xuICAgICAgICAgICAgOiAnc3RhYmxlJyxcbiAgICAgIHZvbHVtZVRyZW5kOlxuICAgICAgICB2b2x1bWVUcmVuZCA+IDAuMVxuICAgICAgICAgID8gJ2luY3JlYXNpbmcnXG4gICAgICAgICAgOiB2b2x1bWVUcmVuZCA8IC0wLjFcbiAgICAgICAgICAgID8gJ2RlY3JlYXNpbmcnXG4gICAgICAgICAgICA6ICdzdGFibGUnLFxuICAgICAgY29uc2lzdGVuY3lUcmVuZDpcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVDb25zaXN0ZW5jeVNjb3JlKGV4ZXJjaXNlRGF0YSkgPiA3MFxuICAgICAgICAgID8gJ2dvb2QnXG4gICAgICAgICAgOiAnbmVlZHNfaW1wcm92ZW1lbnQnLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICog57ea5b2i44OI44Os44Oz44OJ44KS6KiI566XXG4gICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyAtIOWApOOBrumFjeWIl1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfSDjg4jjg6zjg7Pjg4nkv4LmlbBcbiAgICovXG4gIGNhbGN1bGF0ZUxpbmVhclRyZW5kKHZhbHVlcykge1xuICAgIGNvbnN0IG4gPSB2YWx1ZXMubGVuZ3RoO1xuICAgIGNvbnN0IHggPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBuIH0sIChfLCBpKSA9PiBpKTtcbiAgICBjb25zdCB5ID0gdmFsdWVzO1xuXG4gICAgY29uc3Qgc3VtWCA9IHgucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsLCAwKTtcbiAgICBjb25zdCBzdW1ZID0geS5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyB2YWwsIDApO1xuICAgIGNvbnN0IHN1bVhZID0geC5yZWR1Y2UoKHN1bSwgdmFsLCBpKSA9PiBzdW0gKyB2YWwgKiB5W2ldLCAwKTtcbiAgICBjb25zdCBzdW1YWCA9IHgucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsICogdmFsLCAwKTtcblxuICAgIGNvbnN0IHNsb3BlID0gKG4gKiBzdW1YWSAtIHN1bVggKiBzdW1ZKSAvIChuICogc3VtWFggLSBzdW1YICogc3VtWCk7XG4gICAgcmV0dXJuIHNsb3BlO1xuICB9XG5cbiAgLy8g44OY44Or44OR44O844Oh44K944OD44OJXG4gIGNhbGN1bGF0ZUF2ZXJhZ2VWb2x1bWUoc2Vzc2lvbnMpIHtcbiAgICByZXR1cm4gc2Vzc2lvbnMubGVuZ3RoID4gMFxuICAgICAgPyBzZXNzaW9ucy5yZWR1Y2UoKHN1bSwgc2Vzc2lvbikgPT4gc3VtICsgc2Vzc2lvbi52b2x1bWUsIDApIC9cbiAgICAgICAgICBzZXNzaW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuXG4gIGNhbGN1bGF0ZUF2ZXJhZ2VXZWlnaHQoc2Vzc2lvbnMpIHtcbiAgICByZXR1cm4gc2Vzc2lvbnMubGVuZ3RoID4gMFxuICAgICAgPyBzZXNzaW9ucy5yZWR1Y2UoKHN1bSwgc2Vzc2lvbikgPT4gc3VtICsgc2Vzc2lvbi53ZWlnaHQsIDApIC9cbiAgICAgICAgICBzZXNzaW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuXG4gIGNhbGN1bGF0ZUF2ZXJhZ2VSZXBzKHNlc3Npb25zKSB7XG4gICAgcmV0dXJuIHNlc3Npb25zLmxlbmd0aCA+IDBcbiAgICAgID8gc2Vzc2lvbnMucmVkdWNlKChzdW0sIHNlc3Npb24pID0+IHN1bSArIHNlc3Npb24ucmVwcywgMCkgL1xuICAgICAgICAgIHNlc3Npb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG5cbiAgY2FsY3VsYXRlQXZlcmFnZVNldHMoc2Vzc2lvbnMpIHtcbiAgICByZXR1cm4gc2Vzc2lvbnMubGVuZ3RoID4gMFxuICAgICAgPyBzZXNzaW9ucy5yZWR1Y2UoKHN1bSwgc2Vzc2lvbikgPT4gc3VtICsgc2Vzc2lvbi5zZXRzLCAwKSAvXG4gICAgICAgICAgc2Vzc2lvbnMubGVuZ3RoXG4gICAgICA6IDA7XG4gIH1cblxuICAvLyDjgq3jg6Pjg4Pjgrfjg6XnrqHnkIZcbiAgZ2V0Q2FjaGVkQW5hbHlzaXMoa2V5KSB7XG4gICAgY29uc3QgY2FjaGVkID0gdGhpcy5hbmFseXNpc0NhY2hlLmdldChrZXkpO1xuICAgIGlmIChjYWNoZWQgJiYgRGF0ZS5ub3coKSAtIGNhY2hlZC50aW1lc3RhbXAgPCB0aGlzLmNhY2hlRXhwaXJ5KSB7XG4gICAgICByZXR1cm4gY2FjaGVkLmRhdGE7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgc2V0Q2FjaGVkQW5hbHlzaXMoa2V5LCBkYXRhKSB7XG4gICAgdGhpcy5hbmFseXNpc0NhY2hlLnNldChrZXksIHtcbiAgICAgIGRhdGEsXG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICog44Kt44Oj44OD44K344Ol44KS44Kv44Oq44KiXG4gICAqL1xuICBjbGVhckNhY2hlKCkge1xuICAgIHRoaXMuYW5hbHlzaXNDYWNoZS5jbGVhcigpO1xuICB9XG59XG5cbi8vIOOCt+ODs+OCsOODq+ODiOODs+OCpOODs+OCueOCv+ODs+OCueOCkuOCqOOCr+OCueODneODvOODiFxuZXhwb3J0IGNvbnN0IHByb2dyZXNzaXZlT3ZlcmxvYWRTZXJ2aWNlID0gbmV3IFByb2dyZXNzaXZlT3ZlcmxvYWRTZXJ2aWNlKCk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLElBQUFBLG1CQUFBLEdBQUFDLE9BQUE7QUFBNkQsU0FBQUMsUUFBQUMsQ0FBQSxzQ0FBQUQsT0FBQSx3QkFBQUUsTUFBQSx1QkFBQUEsTUFBQSxDQUFBQyxRQUFBLGFBQUFGLENBQUEsa0JBQUFBLENBQUEsZ0JBQUFBLENBQUEsV0FBQUEsQ0FBQSx5QkFBQUMsTUFBQSxJQUFBRCxDQUFBLENBQUFHLFdBQUEsS0FBQUYsTUFBQSxJQUFBRCxDQUFBLEtBQUFDLE1BQUEsQ0FBQUcsU0FBQSxxQkFBQUosQ0FBQSxLQUFBRCxPQUFBLENBQUFDLENBQUE7QUFBQSxTQUFBSywyQkFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEseUJBQUFQLE1BQUEsSUFBQUssQ0FBQSxDQUFBTCxNQUFBLENBQUFDLFFBQUEsS0FBQUksQ0FBQSxxQkFBQUUsQ0FBQSxRQUFBQyxLQUFBLENBQUFDLE9BQUEsQ0FBQUosQ0FBQSxNQUFBRSxDQUFBLEdBQUFHLDJCQUFBLENBQUFMLENBQUEsTUFBQUMsQ0FBQSxJQUFBRCxDQUFBLHVCQUFBQSxDQUFBLENBQUFNLE1BQUEsSUFBQUosQ0FBQSxLQUFBRixDQUFB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