c35da9d4e4fb58da53570a4417619977
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reportService = exports.ReportService = void 0;
var _errorHandler = require("../utils/errorHandler.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * レポート生成サービス
 * PDFエクスポート、統計レポート生成を管理
 */
var ReportService = exports.ReportService = /*#__PURE__*/function () {
  function ReportService() {
    _classCallCheck(this, ReportService);
    this.jsPDF = null;
    this.html2canvas = null;
    this.isLibrariesLoaded = false;
  }

  /**
  * 必要なライブラリを動的に読み込み
  */
  return _createClass(ReportService, [{
    key: "loadLibraries",
    value: (function () {
      var _loadLibraries = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
        var _window$jsPDF, _t;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.p = _context.n) {
            case 0:
              if (!this.isLibrariesLoaded) {
                _context.n = 1;
                break;
              }
              return _context.a(2);
            case 1:
              _context.p = 1;
              if (!(typeof window !== 'undefined')) {
                _context.n = 4;
                break;
              }
              if (window.jsPDF) {
                _context.n = 2;
                break;
              }
              _context.n = 2;
              return this.loadScript('https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js');
            case 2:
              this.jsPDF = ((_window$jsPDF = window.jsPDF) === null || _window$jsPDF === void 0 ? void 0 : _window$jsPDF.jsPDF) || window.jsPDF;

              // html2canvas
              if (window.html2canvas) {
                _context.n = 3;
                break;
              }
              _context.n = 3;
              return this.loadScript('https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js');
            case 3:
              this.html2canvas = window.html2canvas;
              this.isLibrariesLoaded = true;
            case 4:
              _context.n = 6;
              break;
            case 5:
              _context.p = 5;
              _t = _context.v;
              (0, _errorHandler.handleError)(_t, 'ReportService.loadLibraries');
              throw new Error('PDFライブラリの読み込みに失敗しました');
            case 6:
              return _context.a(2);
          }
        }, _callee, this, [[1, 5]]);
      }));
      function loadLibraries() {
        return _loadLibraries.apply(this, arguments);
      }
      return loadLibraries;
    }()
    /**
    * スクリプトを動的に読み込み
    */
    )
  }, {
    key: "loadScript",
    value: function loadScript(src) {
      return new Promise(function (resolve, reject) {
        var script = document.createElement('script');
        script.src = src;
        script.onload = resolve;
        script.onerror = reject;
        document.head.appendChild(script);
      });
    }

    /**
    * 進捗レポートをPDF形式で生成
    * @param {Object} reportData - レポートデータ
    * @param {string} exerciseName - エクササイズ名
    * @returns {Promise<Blob>} PDFファイル
    */
  }, {
    key: "generateProgressReportPDF",
    value: (function () {
      var _generateProgressReportPDF = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(reportData, exerciseName) {
        var pdf, pageWidth, pageHeight, yPosition, _reportData$stats$max, _reportData$stats$avg, _reportData$stats$max2, _reportData$stats$avg2, _reportData$stats$avg3, _reportData$stats$imp, stats, _reportData$trend$str, trendText, headers, colWidths, xPosition, recentData, _t2;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.p = _context2.n) {
            case 0:
              _context2.p = 0;
              _context2.n = 1;
              return this.loadLibraries();
            case 1:
              if (this.jsPDF) {
                _context2.n = 2;
                break;
              }
              throw new Error('jsPDFライブラリが利用できません');
            case 2:
              pdf = new this.jsPDF('p', 'mm', 'a4');
              pageWidth = pdf.internal.pageSize.getWidth();
              pageHeight = pdf.internal.pageSize.getHeight();
              yPosition = 20; // フォント設定（日本語対応）
              pdf.setFont('helvetica');

              // タイトル
              pdf.setFontSize(20);
              pdf.setTextColor(60, 60, 60);
              pdf.text('プログレッシブ・オーバーロード レポート', pageWidth / 2, yPosition, {
                align: 'center'
              });
              yPosition += 15;

              // エクササイズ名
              pdf.setFontSize(16);
              pdf.setTextColor(100, 100, 100);
              pdf.text("\u30A8\u30AF\u30B5\u30B5\u30A4\u30BA: ".concat(exerciseName), pageWidth / 2, yPosition, {
                align: 'center'
              });
              yPosition += 20;

              // 期間
              if (reportData.dateRange) {
                pdf.setFontSize(12);
                pdf.text("\u671F\u9593: ".concat(reportData.dateRange.start, " - ").concat(reportData.dateRange.end), 20, yPosition);
                yPosition += 15;
              }

              // 統計サマリー
              if (reportData.stats) {
                pdf.setFontSize(14);
                pdf.setTextColor(50, 50, 50);
                pdf.text('パフォーマンス統計', 20, yPosition);
                yPosition += 10;
                pdf.setFontSize(10);
                pdf.setTextColor(80, 80, 80);
                stats = ["\u6700\u59271RM: ".concat(((_reportData$stats$max = reportData.stats.maxOneRM) === null || _reportData$stats$max === void 0 ? void 0 : _reportData$stats$max.toFixed(1)) || 'N/A', " kg"), "\u5E73\u57471RM: ".concat(((_reportData$stats$avg = reportData.stats.avgOneRM) === null || _reportData$stats$avg === void 0 ? void 0 : _reportData$stats$avg.toFixed(1)) || 'N/A', " kg"), "\u6700\u5927\u91CD\u91CF: ".concat(((_reportData$stats$max2 = reportData.stats.maxWeight) === null || _reportData$stats$max2 === void 0 ? void 0 : _reportData$stats$max2.toFixed(1)) || 'N/A', " kg"), "\u5E73\u5747\u91CD\u91CF: ".concat(((_reportData$stats$avg2 = reportData.stats.avgWeight) === null || _reportData$stats$avg2 === void 0 ? void 0 : _reportData$stats$avg2.toFixed(1)) || 'N/A', " kg"), "\u6700\u5927\u56DE\u6570: ".concat(reportData.stats.maxReps || 'N/A', " \u56DE"), "\u5E73\u5747\u56DE\u6570: ".concat(((_reportData$stats$avg3 = reportData.stats.avgReps) === null || _reportData$stats$avg3 === void 0 ? void 0 : _reportData$stats$avg3.toFixed(1)) || 'N/A', " \u56DE"), "\u6539\u5584\u7387: ".concat(reportData.stats.improvement > 0 ? '+' : '').concat(((_reportData$stats$imp = reportData.stats.improvement) === null || _reportData$stats$imp === void 0 ? void 0 : _reportData$stats$imp.toFixed(1)) || 'N/A', "%")];
                stats.forEach(function (stat) {
                  pdf.text(stat, 25, yPosition);
                  yPosition += 6;
                });
                yPosition += 10;
              }

              // トレンド分析
              if (reportData.trend) {
                pdf.setFontSize(14);
                pdf.setTextColor(50, 50, 50);
                pdf.text('トレンド分析', 20, yPosition);
                yPosition += 10;
                pdf.setFontSize(10);
                pdf.setTextColor(80, 80, 80);
                trendText = reportData.trend.direction === 'improving' ? '向上中' : reportData.trend.direction === 'declining' ? '低下中' : '安定';
                pdf.text("\u50BE\u5411: ".concat(trendText), 25, yPosition);
                yPosition += 6;
                pdf.text("\u5F37\u5EA6: ".concat(((_reportData$trend$str = reportData.trend.strength) === null || _reportData$trend$str === void 0 ? void 0 : _reportData$trend$str.toFixed(2)) || 'N/A'), 25, yPosition);
                yPosition += 15;
              }

              // 目標達成度
              if (reportData.goals && reportData.goals.length > 0) {
                pdf.setFontSize(14);
                pdf.setTextColor(50, 50, 50);
                pdf.text('目標達成度', 20, yPosition);
                yPosition += 10;
                pdf.setFontSize(10);
                pdf.setTextColor(80, 80, 80);
                reportData.goals.forEach(function (goal) {
                  var _goal$progress_percen;
                  var goalText = "".concat(goal.description || "".concat(goal.goal_type, "\u76EE\u6A19"), ": ").concat(((_goal$progress_percen = goal.progress_percentage) === null || _goal$progress_percen === void 0 ? void 0 : _goal$progress_percen.toFixed(1)) || 'N/A', "%");
                  var statusText = goal.is_achieved ? ' (達成済み)' : '';
                  pdf.text(goalText + statusText, 25, yPosition);
                  yPosition += 6;
                });
                yPosition += 10;
              }

              // 進捗データサマリー
              if (reportData.progressData && reportData.progressData.length > 0) {
                pdf.setFontSize(14);
                pdf.setTextColor(50, 50, 50);
                pdf.text('最近のセッション', 20, yPosition);
                yPosition += 10;
                pdf.setFontSize(8);
                pdf.setTextColor(80, 80, 80);

                // テーブルヘッダー
                headers = ['日付', '最大重量', '最大回数', '1RM', 'セット数'];
                colWidths = [35, 25, 25, 25, 25];
                xPosition = 20;
                headers.forEach(function (header, index) {
                  pdf.text(header, xPosition, yPosition);
                  xPosition += colWidths[index];
                });
                yPosition += 8;

                // 最新10件のデータを表示
                recentData = reportData.progressData.slice(-10);
                recentData.forEach(function (session) {
                  xPosition = 20;
                  var rowData = [new Date(session.workout_date).toLocaleDateString('ja-JP'), "".concat(Math.max.apply(Math, _toConsumableArray(session.weights)).toFixed(1), "kg"), "".concat(Math.max.apply(Math, _toConsumableArray(session.reps)), "\u56DE"), "".concat(session.one_rm.toFixed(1), "kg"), "".concat(session.sets, "\u30BB\u30C3\u30C8")];
                  rowData.forEach(function (data, index) {
                    pdf.text(data, xPosition, yPosition);
                    xPosition += colWidths[index];
                  });
                  yPosition += 6;

                  // ページ境界チェック
                  if (yPosition > pageHeight - 30) {
                    pdf.addPage();
                    yPosition = 20;
                  }
                });
              }

              // フッター
              pdf.setFontSize(8);
              pdf.setTextColor(150, 150, 150);
              pdf.text("\u751F\u6210\u65E5\u6642: ".concat(new Date().toLocaleString('ja-JP')), 20, pageHeight - 10);
              pdf.text('Muscle Rotation Manager', pageWidth - 20, pageHeight - 10, {
                align: 'right'
              });
              return _context2.a(2, pdf.output('blob'));
            case 3:
              _context2.p = 3;
              _t2 = _context2.v;
              (0, _errorHandler.handleError)(_t2, 'ReportService.generateProgressReportPDF');
              throw _t2;
            case 4:
              return _context2.a(2);
          }
        }, _callee2, this, [[0, 3]]);
      }));
      function generateProgressReportPDF(_x, _x2) {
        return _generateProgressReportPDF.apply(this, arguments);
      }
      return generateProgressReportPDF;
    }()
    /**
    * チャートを画像として取得してPDFに追加
    * @param {Object} pdf - jsPDFインスタンス
    * @param {string} canvasId - チャートのキャンバスID
    * @param {number} x - X座標
    * @param {number} y - Y座標
    * @param {number} width - 幅
    * @param {number} height - 高さ
    */
    )
  }, {
    key: "addChartToPDF",
    value: (function () {
      var _addChartToPDF = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(pdf, canvasId, x, y, width, height) {
        var canvas, chartImage, imgData, _t3;
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.p = _context3.n) {
            case 0:
              _context3.p = 0;
              _context3.n = 1;
              return this.loadLibraries();
            case 1:
              if (this.html2canvas) {
                _context3.n = 2;
                break;
              }
              throw new Error('html2canvasライブラリが利用できません');
            case 2:
              canvas = document.getElementById(canvasId);
              if (canvas) {
                _context3.n = 3;
                break;
              }
              throw new Error("Canvas element with id '".concat(canvasId, "' not found"));
            case 3:
              _context3.n = 4;
              return this.html2canvas(canvas, {
                backgroundColor: '#ffffff',
                scale: 2
              });
            case 4:
              chartImage = _context3.v;
              imgData = chartImage.toDataURL('image/png');
              pdf.addImage(imgData, 'PNG', x, y, width, height);
              _context3.n = 6;
              break;
            case 5:
              _context3.p = 5;
              _t3 = _context3.v;
              (0, _errorHandler.handleError)(_t3, 'ReportService.addChartToPDF');
            case 6:
              return _context3.a(2);
          }
        }, _callee3, this, [[0, 5]]);
      }));
      function addChartToPDF(_x3, _x4, _x5, _x6, _x7, _x8) {
        return _addChartToPDF.apply(this, arguments);
      }
      return addChartToPDF;
    }()
    /**
    * 週間サマリーレポートを生成
    * @param {Array} weeklyData - 週間データ
    * @param {string} exerciseName - エクササイズ名
    * @returns {Object} サマリーデータ
    */
    )
  }, {
    key: "generateWeeklySummary",
    value: function generateWeeklySummary(weeklyData, exerciseName) {
      try {
        if (!weeklyData || weeklyData.length === 0) {
          return {
            exerciseName: exerciseName,
            totalWeeks: 0,
            averageSessionsPerWeek: 0,
            maxWeightProgress: 0,
            oneRMProgress: 0,
            consistencyScore: 0
          };
        }
        var totalWeeks = weeklyData.length;
        var totalSessions = weeklyData.reduce(function (sum, week) {
          return sum + week.sessions.length;
        }, 0);
        var averageSessionsPerWeek = totalSessions / totalWeeks;

        // 重量とRM進歩の計算
        var firstWeek = weeklyData[0];
        var lastWeek = weeklyData[weeklyData.length - 1];
        var maxWeightProgress = lastWeek.maxWeight > 0 && firstWeek.maxWeight > 0 ? (lastWeek.maxWeight - firstWeek.maxWeight) / firstWeek.maxWeight * 100 : 0;
        var oneRMProgress = lastWeek.maxOneRM > 0 && firstWeek.maxOneRM > 0 ? (lastWeek.maxOneRM - firstWeek.maxOneRM) / firstWeek.maxOneRM * 100 : 0;

        // 一貫性スコア（週あたりのセッション数の標準偏差から計算）
        var sessionCounts = weeklyData.map(function (week) {
          return week.sessions.length;
        });
        var avgSessions = sessionCounts.reduce(function (sum, count) {
          return sum + count;
        }, 0) / sessionCounts.length;
        var variance = sessionCounts.reduce(function (sum, count) {
          return sum + Math.pow(count - avgSessions, 2);
        }, 0) / sessionCounts.length;
        var standardDeviation = Math.sqrt(variance);
        var consistencyScore = Math.max(0, 100 - standardDeviation * 20); // 0-100スケール

        return {
          exerciseName: exerciseName,
          totalWeeks: totalWeeks,
          averageSessionsPerWeek: Math.round(averageSessionsPerWeek * 10) / 10,
          maxWeightProgress: Math.round(maxWeightProgress * 10) / 10,
          oneRMProgress: Math.round(oneRMProgress * 10) / 10,
          consistencyScore: Math.round(consistencyScore * 10) / 10,
          weeklyData: weeklyData
        };
      } catch (error) {
        (0, _errorHandler.handleError)(error, 'ReportService.generateWeeklySummary');
        return null;
      }
    }

    /**
    * 月間サマリーレポートを生成
    * @param {Object} monthlyAnalysis - 月間分析データ
    * @param {string} exerciseName - エクササイズ名
    * @returns {Object} 月間サマリー
    */
  }, {
    key: "generateMonthlySummary",
    value: function generateMonthlySummary(monthlyAnalysis, exerciseName) {
      try {
        if (!monthlyAnalysis || !monthlyAnalysis.hasData) {
          return {
            exerciseName: exerciseName,
            hasData: false,
            message: 'データが不足しています'
          };
        }
        var stats = monthlyAnalysis.stats,
          trend = monthlyAnalysis.trend,
          totalSessions = monthlyAnalysis.totalSessions,
          dateRange = monthlyAnalysis.dateRange,
          weeklyData = monthlyAnalysis.weeklyData;

        // 週間一貫性の計算
        var weeklySessionCounts = weeklyData.map(function (week) {
          return week.sessions.length;
        });
        var avgWeeklySessions = weeklySessionCounts.reduce(function (sum, count) {
          return sum + count;
        }, 0) / weeklySessionCounts.length;

        // パフォーマンス評価
        var performanceScore = this.calculatePerformanceScore(stats, trend);
        return {
          exerciseName: exerciseName,
          hasData: true,
          period: "".concat(dateRange.start, " - ").concat(dateRange.end),
          totalSessions: totalSessions,
          avgWeeklySessions: Math.round(avgWeeklySessions * 10) / 10,
          performanceScore: performanceScore,
          stats: _objectSpread(_objectSpread({}, stats), {}, {
            improvement: Math.round(stats.improvement * 10) / 10
          }),
          trend: _objectSpread(_objectSpread({}, trend), {}, {
            description: this.getTrendDescription(trend)
          }),
          recommendations: this.generateRecommendations(stats, trend, avgWeeklySessions)
        };
      } catch (error) {
        (0, _errorHandler.handleError)(error, 'ReportService.generateMonthlySummary');
        return null;
      }
    }

    /**
    * パフォーマンススコアを計算
    * @param {Object} stats - 統計データ
    * @param {Object} trend - トレンドデータ
    * @returns {number} パフォーマンススコア (0-100)
    */
  }, {
    key: "calculatePerformanceScore",
    value: function calculatePerformanceScore(stats, trend) {
      try {
        var score = 50; // ベーススコア

        // 改善率によるスコア調整
        if (stats.improvement > 10) {
          score += 30;
        } else if (stats.improvement > 5) {
          score += 20;
        } else if (stats.improvement > 0) {
          score += 10;
        } else if (stats.improvement < -5) {
          score -= 20;
        }

        // トレンドによるスコア調整
        if (trend.direction === 'improving') {
          score += 20;
        } else if (trend.direction === 'declining') {
          score -= 15;
        }
        return Math.max(0, Math.min(100, Math.round(score)));
      } catch (error) {
        (0, _errorHandler.handleError)(error, 'ReportService.calculatePerformanceScore');
        return 50;
      }
    }

    /**
    * トレンドの説明文を生成
    * @param {Object} trend - トレンドデータ
    * @returns {string} 説明文
    */
  }, {
    key: "getTrendDescription",
    value: function getTrendDescription(trend) {
      switch (trend.direction) {
        case 'improving':
          return "\u30D1\u30D5\u30A9\u30FC\u30DE\u30F3\u30B9\u304C\u5411\u4E0A\u3057\u3066\u3044\u307E\u3059\uFF08\u5F37\u5EA6: ".concat(trend.strength, "\uFF09");
        case 'declining':
          return "\u30D1\u30D5\u30A9\u30FC\u30DE\u30F3\u30B9\u304C\u4F4E\u4E0B\u50BE\u5411\u306B\u3042\u308A\u307E\u3059\uFF08\u5F37\u5EA6: ".concat(trend.strength, "\uFF09");
        case 'stable':
          return 'パフォーマンスは安定しています';
        default:
          return 'データが不足しています';
      }
    }

    /**
    * 推奨事項を生成
    * @param {Object} stats - 統計データ
    * @param {Object} trend - トレンドデータ
    * @param {number} avgWeeklySessions - 週平均セッション数
    * @returns {Array} 推奨事項リスト
    */
  }, {
    key: "generateRecommendations",
    value: function generateRecommendations(stats, trend, avgWeeklySessions) {
      var recommendations = [];
      try {
        // 頻度に関する推奨
        if (avgWeeklySessions < 1) {
          recommendations.push('トレーニング頻度を増やすことを検討してください（週2-3回が理想的）');
        } else if (avgWeeklySessions > 4) {
          recommendations.push('オーバートレーニングに注意し、適切な休息を取ってください');
        }

        // パフォーマンストレンドに関する推奨
        if (trend.direction === 'declining') {
          recommendations.push('パフォーマンスが低下しています。休息期間を設けるか、トレーニング強度を見直してください');
          recommendations.push('フォームの確認や、栄養・睡眠の改善を検討してください');
        } else if (trend.direction === 'stable' && stats.improvement < 2) {
          recommendations.push('プログレッシブ・オーバーロードの原則に従い、重量や回数を段階的に増やしてください');
          recommendations.push('新しいエクササイズバリエーションを試してみてください');
        }

        // 改善率に関する推奨
        if (stats.improvement > 15) {
          recommendations.push('素晴らしい進歩です！現在のトレーニングプログラムを継続してください');
        } else if (stats.improvement < 0) {
          recommendations.push('パフォーマンスが低下しています。トレーニングプログラムの見直しを検討してください');
        }

        // 一般的な推奨事項
        if (recommendations.length === 0) {
          recommendations.push('現在のトレーニングを継続し、定期的に進捗を確認してください');
          recommendations.push('目標設定を行い、モチベーションを維持してください');
        }
        return recommendations;
      } catch (error) {
        (0, _errorHandler.handleError)(error, 'ReportService.generateRecommendations');
        return ['データの分析中にエラーが発生しました'];
      }
    }

    /**
    * データをCSV形式でエクスポート
    * @param {Array} progressData - 進捗データ
    * @param {string} exerciseName - エクササイズ名
    * @returns {Blob} CSVファイル
    */
  }, {
    key: "exportToCSV",
    value: function exportToCSV(progressData, exerciseName) {
      try {
        if (!progressData || progressData.length === 0) {
          throw new Error('エクスポートするデータがありません');
        }
        var headers = ['日付', 'エクササイズ', 'セット数', '重量(kg)', '回数', '1RM(kg)', 'メモ'];
        var csvContent = [headers.join(',')];
        progressData.forEach(function (session) {
          var weights = session.weights.join(';');
          var reps = session.reps.join(';');
          var row = [session.workout_date, exerciseName, session.sets, weights, reps, session.one_rm.toFixed(1), session.notes || ''];
          csvContent.push(row.map(function (field) {
            return "\"".concat(field, "\"");
          }).join(','));
        });
        var csvString = csvContent.join('\n');
        return new Blob([csvString], {
          type: 'text/csv;charset=utf-8;'
        });
      } catch (error) {
        (0, _errorHandler.handleError)(error, 'ReportService.exportToCSV');
        throw error;
      }
    }

    /**
    * ファイルをダウンロード
    * @param {Blob} blob - ファイルデータ
    * @param {string} filename - ファイル名
    */
  }, {
    key: "downloadFile",
    value: function downloadFile(blob, filename) {
      try {
        var url = URL.createObjectURL(blob);
        var a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      } catch (error) {
        (0, _errorHandler.handleError)(error, 'ReportService.downloadFile');
        throw error;
      }
    }

    /**
    * ワークアウトレポートをPDF形式で生成
    * @param {Object} workoutData - ワークアウトデータ
    * @returns {Promise<Blob>} PDFファイル
    */
  }, {
    key: "generateWorkoutReportPDF",
    value: (function () {
      var _generateWorkoutReportPDF = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(workoutData) {
        var pdf, pageWidth, pageHeight, yPosition, _t4;
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.p = _context4.n) {
            case 0:
              _context4.p = 0;
              _context4.n = 1;
              return this.loadLibraries();
            case 1:
              if (this.jsPDF) {
                _context4.n = 2;
                break;
              }
              throw new Error('jsPDFライブラリが利用できません');
            case 2:
              pdf = new this.jsPDF('p', 'mm', 'a4');
              pageWidth = pdf.internal.pageSize.getWidth();
              pageHeight = pdf.internal.pageSize.getHeight();
              yPosition = 20; // フォント設定
              pdf.setFont('helvetica');

              // タイトル
              pdf.setFontSize(20);
              pdf.setTextColor(60, 60, 60);
              pdf.text('ワークアウトレポート', pageWidth / 2, yPosition, {
                align: 'center'
              });
              yPosition += 15;

              // 日付
              if (workoutData.date) {
                pdf.setFontSize(12);
                pdf.setTextColor(100, 100, 100);
                pdf.text("\u65E5\u4ED8: ".concat(workoutData.date), 20, yPosition);
                yPosition += 15;
              }

              // エクササイズ一覧
              if (workoutData.exercises && workoutData.exercises.length > 0) {
                pdf.setFontSize(14);
                pdf.setTextColor(50, 50, 50);
                pdf.text('エクササイズ', 20, yPosition);
                yPosition += 10;
                pdf.setFontSize(10);
                pdf.setTextColor(80, 80, 80);
                workoutData.exercises.forEach(function (exercise) {
                  pdf.text("\u2022 ".concat(exercise.name), 25, yPosition);
                  yPosition += 6;
                  if (exercise.sets && exercise.reps && exercise.weight) {
                    pdf.text("  \u30BB\u30C3\u30C8: ".concat(exercise.sets, ", \u56DE\u6570: ").concat(exercise.reps, ", \u91CD\u91CF: ").concat(exercise.weight, "kg"), 30, yPosition);
                    yPosition += 6;
                  }
                  yPosition += 5;
                });
              }

              // フッター
              pdf.setFontSize(8);
              pdf.setTextColor(150, 150, 150);
              pdf.text("\u751F\u6210\u65E5\u6642: ".concat(new Date().toLocaleString('ja-JP')), 20, pageHeight - 10);
              pdf.text('Muscle Rotation Manager', pageWidth - 20, pageHeight - 10, {
                align: 'right'
              });
              return _context4.a(2, pdf.output('blob'));
            case 3:
              _context4.p = 3;
              _t4 = _context4.v;
              (0, _errorHandler.handleError)(_t4, 'ReportService.generateWorkoutReportPDF');
              throw _t4;
            case 4:
              return _context4.a(2);
          }
        }, _callee4, this, [[0, 3]]);
      }));
      function generateWorkoutReportPDF(_x9) {
        return _generateWorkoutReportPDF.apply(this, arguments);
      }
      return generateWorkoutReportPDF;
    }()
    /**
    * 統計レポートをPDF形式で生成
    * @param {Object} statisticsData - 統計データ
    * @returns {Promise<Blob>} PDFファイル
    */
    )
  }, {
    key: "generateStatisticsReportPDF",
    value: (function () {
      var _generateStatisticsReportPDF = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(statisticsData) {
        var pdf, pageWidth, pageHeight, yPosition, stats, _t5;
        return _regenerator().w(function (_context5) {
          while (1) switch (_context5.p = _context5.n) {
            case 0:
              _context5.p = 0;
              _context5.n = 1;
              return this.loadLibraries();
            case 1:
              if (this.jsPDF) {
                _context5.n = 2;
                break;
              }
              throw new Error('jsPDFライブラリが利用できません');
            case 2:
              pdf = new this.jsPDF('p', 'mm', 'a4');
              pageWidth = pdf.internal.pageSize.getWidth();
              pageHeight = pdf.internal.pageSize.getHeight();
              yPosition = 20; // フォント設定
              pdf.setFont('helvetica');

              // タイトル
              pdf.setFontSize(20);
              pdf.setTextColor(60, 60, 60);
              pdf.text('統計レポート', pageWidth / 2, yPosition, {
                align: 'center'
              });
              yPosition += 15;

              // 統計データ
              if (statisticsData) {
                pdf.setFontSize(14);
                pdf.setTextColor(50, 50, 50);
                pdf.text('統計サマリー', 20, yPosition);
                yPosition += 10;
                pdf.setFontSize(10);
                pdf.setTextColor(80, 80, 80);
                stats = ["\u7DCF\u30EF\u30FC\u30AF\u30A2\u30A6\u30C8\u6570: ".concat(statisticsData.totalWorkouts || 'N/A'), "\u5E73\u5747\u91CD\u91CF: ".concat(statisticsData.averageWeight || 'N/A', " kg"), "\u5BFE\u8C61\u7B4B\u7FA4: ".concat(statisticsData.muscleGroups ? statisticsData.muscleGroups.join(', ') : 'N/A')];
                stats.forEach(function (stat) {
                  pdf.text(stat, 25, yPosition);
                  yPosition += 6;
                });
              }

              // フッター
              pdf.setFontSize(8);
              pdf.setTextColor(150, 150, 150);
              pdf.text("\u751F\u6210\u65E5\u6642: ".concat(new Date().toLocaleString('ja-JP')), 20, pageHeight - 10);
              pdf.text('Muscle Rotation Manager', pageWidth - 20, pageHeight - 10, {
                align: 'right'
              });
              return _context5.a(2, pdf.output('blob'));
            case 3:
              _context5.p = 3;
              _t5 = _context5.v;
              (0, _errorHandler.handleError)(_t5, 'ReportService.generateStatisticsReportPDF');
              throw _t5;
            case 4:
              return _context5.a(2);
          }
        }, _callee5, this, [[0, 3]]);
      }));
      function generateStatisticsReportPDF(_x0) {
        return _generateStatisticsReportPDF.apply(this, arguments);
      }
      return generateStatisticsReportPDF;
    }()
    /**
    * 要素をPDFとしてエクスポート
    * @param {HTMLElement} element - エクスポートする要素
    * @param {string} filename - ファイル名
    * @returns {Promise<void>}
    */
    )
  }, {
    key: "exportToPDF",
    value: (function () {
      var _exportToPDF = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(element, filename) {
        var canvas, pdf, imgData, imgWidth, imgHeight, _t6;
        return _regenerator().w(function (_context6) {
          while (1) switch (_context6.p = _context6.n) {
            case 0:
              _context6.p = 0;
              _context6.n = 1;
              return this.loadLibraries();
            case 1:
              if (!(!this.html2canvas || !this.jsPDF)) {
                _context6.n = 2;
                break;
              }
              throw new Error('必要なライブラリが利用できません');
            case 2:
              _context6.n = 3;
              return this.html2canvas(element, {
                backgroundColor: '#ffffff',
                scale: 2
              });
            case 3:
              canvas = _context6.v;
              // PDFを作成
              pdf = new this.jsPDF('p', 'mm', 'a4');
              imgData = canvas.toDataURL('image/png');
              imgWidth = 210; // A4幅
              imgHeight = canvas.height * imgWidth / canvas.width;
              pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
              pdf.save(filename);
              _context6.n = 5;
              break;
            case 4:
              _context6.p = 4;
              _t6 = _context6.v;
              (0, _errorHandler.handleError)(_t6, 'ReportService.exportToPDF');
              throw _t6;
            case 5:
              return _context6.a(2);
          }
        }, _callee6, this, [[0, 4]]);
      }));
      function exportToPDF(_x1, _x10) {
        return _exportToPDF.apply(this, arguments);
      }
      return exportToPDF;
    }())
  }]);
}(); // クラスとシングルトンインスタンスをエクスポート
var reportService = exports.reportService = new ReportService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,