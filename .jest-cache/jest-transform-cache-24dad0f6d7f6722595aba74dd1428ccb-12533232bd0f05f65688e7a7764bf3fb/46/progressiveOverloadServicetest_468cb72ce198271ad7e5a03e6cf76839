cc31179a1cb5a8744d11e0640928a2f3
"use strict";

// モックの設定
_getJestObj().mock('../../js/services/workoutDataService.js', function () {
  return {
    workoutDataService: {
      loadWorkouts: jest.fn()
    }
  };
});
var _progressiveOverloadService = require("../../js/services/progressiveOverloadService.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
} // progressiveOverloadService.test.js - ProgressiveOverloadServiceクラスのテスト
describe('ProgressiveOverloadService', function () {
  var serviceInstance;
  var mockWorkoutDataService;
  beforeEach(function () {
    // モックをリセット
    jest.clearAllMocks();

    // モジュールの取得
    var workoutDataServiceModule = require('../../js/services/workoutDataService.js');
    mockWorkoutDataService = workoutDataServiceModule.workoutDataService;

    // ProgressiveOverloadServiceのインスタンス作成
    serviceInstance = new _progressiveOverloadService.ProgressiveOverloadService();
  });
  describe('constructor', function () {
    test('should initialize with default values', function () {
      expect(serviceInstance.analysisCache).toBeInstanceOf(Map);
      expect(serviceInstance.cacheExpiry).toBe(5 * 60 * 1000); // 5分間
    });
  });
  describe('getExerciseProgress', function () {
    test('should return cached analysis if available', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var mockAnalysis, result;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            mockAnalysis = {
              exerciseName: 'ベンチプレス',
              period: 90,
              totalSessions: 10,
              progressMetrics: {},
              volumeProgression: 15,
              intensityProgression: 10,
              recommendations: [],
              trends: {},
              lastUpdated: new Date().toISOString()
            }; // キャッシュにデータを設定
            serviceInstance.setCachedAnalysis('exercise_ベンチプレス_90', mockAnalysis);
            _context.n = 1;
            return serviceInstance.getExerciseProgress('ベンチプレス', 90);
          case 1:
            result = _context.v;
            expect(result).toEqual(mockAnalysis);
            expect(mockWorkoutDataService.loadWorkouts).not.toHaveBeenCalled();
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
    test('should analyze exercise progress from workout data', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var mockWorkouts, result;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            mockWorkouts = [{
              id: '1',
              date: '2024-01-01',
              exercises: [{
                name: 'ベンチプレス',
                sets: 3,
                reps: 10,
                weight: 80
              }]
            }, {
              id: '2',
              date: '2024-01-08',
              exercises: [{
                name: 'ベンチプレス',
                sets: 3,
                reps: 10,
                weight: 85
              }]
            }];
            mockWorkoutDataService.loadWorkouts.mockResolvedValue(mockWorkouts);
            _context2.n = 1;
            return serviceInstance.getExerciseProgress('ベンチプレス', 90);
          case 1:
            result = _context2.v;
            expect(result.exerciseName).toBe('ベンチプレス');
            expect(result.period).toBe(90);
            expect(result.totalSessions).toBe(2);
            expect(result.progressMetrics).toBeDefined();
            expect(result.volumeProgression).toBeDefined();
            expect(result.intensityProgression).toBeDefined();
            expect(result.recommendations).toBeDefined();
            expect(result.trends).toBeDefined();
            expect(result.lastUpdated).toBeDefined();
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    test('should handle analysis error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var error;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            error = new Error('Analysis failed');
            mockWorkoutDataService.loadWorkouts.mockRejectedValue(error);
            _context3.n = 1;
            return expect(serviceInstance.getExerciseProgress('ベンチプレス', 90)).rejects.toThrow('Analysis failed');
          case 1:
            return _context3.a(2);
        }
      }, _callee3);
    })));
  });
  describe('getMuscleGroupProgress', function () {
    test('should return cached analysis if available', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var mockAnalysis, result;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            mockAnalysis = {
              muscleGroup: 'chest',
              period: 90,
              totalSessions: 15,
              frequencyAnalysis: {},
              exercises: {},
              recommendations: [],
              lastUpdated: new Date().toISOString()
            };
            serviceInstance.setCachedAnalysis('muscle_chest_90', mockAnalysis);
            _context4.n = 1;
            return serviceInstance.getMuscleGroupProgress('chest', 90);
          case 1:
            result = _context4.v;
            expect(result).toEqual(mockAnalysis);
            expect(mockWorkoutDataService.loadWorkouts).not.toHaveBeenCalled();
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    test('should analyze muscle group progress from workout data', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var mockWorkouts, result;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            mockWorkouts = [{
              id: '1',
              date: '2024-01-01',
              muscle_groups: ['chest'],
              exercises: [{
                name: 'ベンチプレス',
                sets: 3,
                reps: 10,
                weight: 80
              }]
            }, {
              id: '2',
              date: '2024-01-08',
              muscle_groups: ['chest'],
              exercises: [{
                name: 'ベンチプレス',
                sets: 3,
                reps: 10,
                weight: 85
              }]
            }];
            mockWorkoutDataService.loadWorkouts.mockResolvedValue(mockWorkouts);
            _context5.n = 1;
            return serviceInstance.getMuscleGroupProgress('chest', 90);
          case 1:
            result = _context5.v;
            expect(result.muscleGroup).toBe('chest');
            expect(result.period).toBe(90);
            expect(result.totalSessions).toBe(2);
            expect(result.frequencyAnalysis).toBeDefined();
            expect(result.exercises).toBeDefined();
            expect(result.recommendations).toBeDefined();
            expect(result.lastUpdated).toBeDefined();
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
  describe('getOverallProgress', function () {
    test('should return cached analysis if available', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var mockAnalysis, result;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            mockAnalysis = {
              period: 90,
              totalWorkouts: 20,
              overallMetrics: {},
              muscleGroupProgress: {},
              consistencyScore: 85,
              recommendations: [],
              lastUpdated: new Date().toISOString()
            };
            serviceInstance.setCachedAnalysis('overall_90', mockAnalysis);
            _context6.n = 1;
            return serviceInstance.getOverallProgress(90);
          case 1:
            result = _context6.v;
            expect(result).toEqual(mockAnalysis);
            expect(mockWorkoutDataService.loadWorkouts).not.toHaveBeenCalled();
          case 2:
            return _context6.a(2);
        }
      }, _callee6);
    })));
    test('should analyze overall progress from workout data', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      var mockWorkouts, result;
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            mockWorkouts = [{
              id: '1',
              date: '2024-01-01',
              muscle_groups: ['chest'],
              exercises: [{
                name: 'ベンチプレス',
                sets: 3,
                reps: 10,
                weight: 80
              }],
              duration: 45
            }, {
              id: '2',
              date: '2024-01-08',
              muscle_groups: ['back'],
              exercises: [{
                name: 'デッドリフト',
                sets: 3,
                reps: 8,
                weight: 120
              }],
              duration: 50
            }];
            mockWorkoutDataService.loadWorkouts.mockResolvedValue(mockWorkouts);
            _context7.n = 1;
            return serviceInstance.getOverallProgress(90);
          case 1:
            result = _context7.v;
            expect(result.period).toBe(90);
            expect(result.totalWorkouts).toBe(2);
            expect(result.overallMetrics).toBeDefined();
            expect(result.muscleGroupProgress).toBeDefined();
            expect(result.consistencyScore).toBeDefined();
            expect(result.recommendations).toBeDefined();
            expect(result.lastUpdated).toBeDefined();
          case 2:
            return _context7.a(2);
        }
      }, _callee7);
    })));
  });
  describe('filterExerciseData', function () {
    test('should filter workouts by exercise name and period', function () {
      var mockWorkouts = [{
        id: '1',
        date: '2024-01-01',
        exercises: [{
          name: 'ベンチプレス',
          sets: 3,
          reps: 10,
          weight: 80
        }]
      }, {
        id: '2',
        date: '2024-01-08',
        exercises: [{
          name: 'ベンチプレス',
          sets: 3,
          reps: 10,
          weight: 85
        }]
      }, {
        id: '3',
        date: '2024-01-15',
        exercises: [{
          name: 'スクワット',
          sets: 3,
          reps: 12,
          weight: 100
        }]
      }];
      var result = serviceInstance.filterExerciseData(mockWorkouts, 'ベンチプレス', 90);
      expect(result).toHaveLength(2);
      expect(result[0].exercises[0].name).toBe('ベンチプレス');
      expect(result[1].exercises[0].name).toBe('ベンチプレス');
    });
    test('should filter by date period', function () {
      var today = new Date();
      var oldDate = new Date(today);
      oldDate.setDate(oldDate.getDate() - 100); // 100日前

      var mockWorkouts = [{
        id: '1',
        date: today.toISOString().split('T')[0],
        exercises: [{
          name: 'ベンチプレス',
          sets: 3,
          reps: 10,
          weight: 80
        }]
      }, {
        id: '2',
        date: oldDate.toISOString().split('T')[0],
        exercises: [{
          name: 'ベンチプレス',
          sets: 3,
          reps: 10,
          weight: 85
        }]
      }];
      var result = serviceInstance.filterExerciseData(mockWorkouts, 'ベンチプレス', 90);
      expect(result).toHaveLength(1);
      expect(result[0].id).toBe('1');
    });
  });
  describe('calculateProgressMetrics', function () {
    test('should calculate progress metrics from exercise data', function () {
      var mockExerciseData = [{
        exercises: [{
          name: 'ベンチプレス',
          sets: 3,
          reps: 10,
          weight: 80
        }]
      }, {
        exercises: [{
          name: 'ベンチプレス',
          sets: 3,
          reps: 10,
          weight: 85
        }]
      }, {
        exercises: [{
          name: 'ベンチプレス',
          sets: 3,
          reps: 12,
          weight: 85
        }]
      }];
      var result = serviceInstance.calculateProgressMetrics(mockExerciseData);
      expect(result).toBeDefined();
      expect(result.averageWeight).toBeDefined();
      expect(result.averageReps).toBeDefined();
      expect(result.averageSets).toBeDefined();
      expect(result.maxWeight).toBeDefined();
      expect(result.totalVolume).toBeDefined();
    });
    test('should handle empty exercise data', function () {
      var result = serviceInstance.calculateProgressMetrics([]);
      expect(result.averageWeight).toBe(0);
      expect(result.averageReps).toBe(0);
      expect(result.averageSets).toBe(0);
      expect(result.maxWeight).toBe(0);
      expect(result.totalVolume).toBe(0);
    });
  });
  describe('calculateVolumeProgression', function () {
    test('should calculate volume progression', function () {
      var mockExerciseData = [{
        exercises: [{
          name: 'ベンチプレス',
          sets: 3,
          reps: 10,
          weight: 80
        }]
      }, {
        exercises: [{
          name: 'ベンチプレス',
          sets: 3,
          reps: 10,
          weight: 85
        }]
      }];
      var result = serviceInstance.calculateVolumeProgression(mockExerciseData);
      expect(_typeof(result)).toBe('number');
      expect(result).toBeGreaterThanOrEqual(0);
    });
    test('should handle single session', function () {
      var mockExerciseData = [{
        exercises: [{
          name: 'ベンチプレス',
          sets: 3,
          reps: 10,
          weight: 80
        }]
      }];
      var result = serviceInstance.calculateVolumeProgression(mockExerciseData);
      expect(result).toBe(0); // 比較対象がない場合は0%
    });
  });
  describe('calculateIntensityProgression', function () {
    test('should calculate intensity progression', function () {
      var mockExerciseData = [{
        exercises: [{
          name: 'ベンチプレス',
          sets: 3,
          reps: 10,
          weight: 80
        }]
      }, {
        exercises: [{
          name: 'ベンチプレス',
          sets: 3,
          reps: 10,
          weight: 85
        }]
      }];
      var result = serviceInstance.calculateIntensityProgression(mockExerciseData);
      expect(_typeof(result)).toBe('number');
      expect(result).toBeGreaterThanOrEqual(0);
    });
  });
  describe('generateRecommendations', function () {
    test('should generate recommendations based on exercise data', function () {
      var mockExerciseData = [{
        exercises: [{
          name: 'ベンチプレス',
          sets: 3,
          reps: 10,
          weight: 80
        }]
      }];
      var result = serviceInstance.generateRecommendations(mockExerciseData);
      expect(Array.isArray(result)).toBe(true);
      result.forEach(function (rec) {
        expect(rec).toHaveProperty('message');
        expect(rec).toHaveProperty('action');
        expect(rec).toHaveProperty('priority');
      });
    });
  });
  describe('analyzeTrends', function () {
    test('should analyze trends from exercise data', function () {
      var mockExerciseData = [{
        date: '2024-01-01',
        exercises: [{
          name: 'ベンチプレス',
          sets: 3,
          reps: 10,
          weight: 80
        }]
      }, {
        date: '2024-01-08',
        exercises: [{
          name: 'ベンチプレス',
          sets: 3,
          reps: 10,
          weight: 85
        }]
      }];
      var result = serviceInstance.analyzeTrends(mockExerciseData);
      expect(result).toBeDefined();
      expect(result.weightTrend).toBeDefined();
      expect(result.volumeTrend).toBeDefined();
    });
  });
  describe('cache management', function () {
    test('should set and get cached analysis', function () {
      var mockAnalysis = {
        test: 'data'
      };
      var cacheKey = 'test_key';
      serviceInstance.setCachedAnalysis(cacheKey, mockAnalysis);
      var result = serviceInstance.getCachedAnalysis(cacheKey);
      expect(result).toEqual(mockAnalysis);
    });
    test('should return null for expired cache', function () {
      var mockAnalysis = {
        test: 'data'
      };
      var cacheKey = 'test_key';

      // 古いタイムスタンプでキャッシュを設定
      serviceInstance.analysisCache.set(cacheKey, {
        data: mockAnalysis,
        timestamp: Date.now() - (serviceInstance.cacheExpiry + 1000)
      });
      var result = serviceInstance.getCachedAnalysis(cacheKey);
      expect(result).toBeNull();
    });
    test('should return null for non-existent cache', function () {
      var result = serviceInstance.getCachedAnalysis('non_existent_key');
      expect(result).toBeNull();
    });
  });
  describe('clearCache', function () {
    test('should clear all cached analysis', function () {
      serviceInstance.setCachedAnalysis('key1', {
        data: 'test1'
      });
      serviceInstance.setCachedAnalysis('key2', {
        data: 'test2'
      });
      expect(serviceInstance.analysisCache.size).toBe(2);
      serviceInstance.clearCache();
      expect(serviceInstance.analysisCache.size).toBe(0);
    });
  });
  describe('getCacheStats', function () {
    test('should return cache statistics', function () {
      serviceInstance.setCachedAnalysis('key1', {
        data: 'test1'
      });
      serviceInstance.setCachedAnalysis('key2', {
        data: 'test2'
      });
      var stats = serviceInstance.getCacheStats();
      expect(stats).toHaveProperty('size');
      expect(stats).toHaveProperty('keys');
      expect(stats.size).toBe(2);
      expect(stats.keys).toContain('key1');
      expect(stats.keys).toContain('key2');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,