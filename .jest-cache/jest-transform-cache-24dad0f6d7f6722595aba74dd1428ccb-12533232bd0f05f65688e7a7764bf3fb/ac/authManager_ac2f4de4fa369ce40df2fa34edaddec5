ed7a6c90543efb89abd1fc3fb61727a3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.authManager = void 0;
var _supabaseService = require("../services/supabaseService.js");
var _helpers = require("../utils/helpers.js");
var _pageManager = require("./pageManager.js");
var _validation = require("../utils/validation.js");
var _errorHandler = require("../utils/errorHandler.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // authManager.js - 認証管理
var AuthManager = /*#__PURE__*/function () {
  function AuthManager() {
    _classCallCheck(this, AuthManager);
    this.isInitialized = false;
    this.onlineStatusCleanup = null;
  }

  /**
   * 認証管理を初期化
   */
  return _createClass(AuthManager, [{
    key: "initialize",
    value: (function () {
      var _initialize = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
        var _this = this;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.n) {
            case 0:
              if (!this.isInitialized) {
                _context.n = 1;
                break;
              }
              return _context.a(2);
            case 1:
              if (_pageManager.pageManager.isInitialized) {
                _context.n = 2;
                break;
              }
              _context.n = 2;
              return _pageManager.pageManager.initialize();
            case 2:
              this.setupEventListeners();
              _context.n = 3;
              return this.checkCurrentSession();
            case 3:
              this.setupAuthStateListener();

              // 初期化後にUIを再確認
              setTimeout(function () {
                _this.updateAuthUI();
              }, 1000);
              this.isInitialized = true;
              console.log('AuthManager initialized');
            case 4:
              return _context.a(2);
          }
        }, _callee, this);
      }));
      function initialize() {
        return _initialize.apply(this, arguments);
      }
      return initialize;
    }()
    /**
     * イベントリスナーを設定
     */
    )
  }, {
    key: "setupEventListeners",
    value: function setupEventListeners() {
      var _this2 = this;
      // 既存のイベントリスナーを削除
      this.removeEventListeners();

      // グローバルなクリックイベントリスナーを設定
      document.addEventListener('click', function (e) {
        // ログインボタンのクリック（IDまたはdata-action属性）
        if (e.target.matches('#login-btn, [data-action="login"]')) {
          console.log('Login button clicked');
          e.preventDefault();
          e.stopPropagation();
          if (!_supabaseService.supabaseService.isAvailable()) {
            (0, _helpers.showNotification)('Supabaseが設定されていません。設定を確認してください。', 'error');
            return;
          }
          _this2.showAuthModal('login');
        }

        // ログアウトボタンのクリック
        if (e.target.matches('#logout-btn, [data-action="logout"]')) {
          console.log('Logout button clicked');
          e.preventDefault();
          e.stopPropagation();
          _this2.handleLogout();
        }

        // アバター画像またはユーザープロフィールコンテナのクリック
        if (e.target.matches('#user-avatar') || e.target.closest('#user-profile-container')) {
          console.log('User profile container clicked');
          e.preventDefault();
          e.stopPropagation();
          _this2.toggleUserDropdown();
        }

        // プロフィール設定のクリック
        if (e.target.matches('#profile-settings')) {
          console.log('Profile settings clicked');
          e.preventDefault();
          e.stopPropagation();
          _this2.handleProfileSettings();
        }

        // ドロップダウンの外側をクリックした場合は閉じる
        if (!e.target.closest('#user-profile')) {
          _this2.closeUserDropdown();
        }
      });
      console.log('Auth event listeners setup complete');
    }

    /**
     * イベントリスナーを削除
     */
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      // グローバルイベントリスナーは削除しない
      // 必要に応じて個別の要素のイベントリスナーを削除
      console.log('Event listeners cleanup completed');
    }

    /**
     * 現在のセッションをチェック
     */
  }, {
    key: "checkCurrentSession",
    value: (function () {
      var _checkCurrentSession = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
        var _yield$supabaseServic, user, _t;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.p = _context2.n) {
            case 0:
              _context2.p = 0;
              _context2.n = 1;
              return _supabaseService.supabaseService.getAuthState();
            case 1:
              _yield$supabaseServic = _context2.v;
              user = _yield$supabaseServic.user;
              console.log('checkCurrentSession result:', {
                user: !!user,
                userId: user === null || user === void 0 ? void 0 : user.id
              });
              _context2.n = 2;
              return this.updateAuthUI();
            case 2:
              return _context2.a(2, user);
            case 3:
              _context2.p = 3;
              _t = _context2.v;
              console.error('Failed to check current session:', _t);
              _context2.n = 4;
              return this.updateAuthUI();
            case 4:
              return _context2.a(2, null);
          }
        }, _callee2, this, [[0, 3]]);
      }));
      function checkCurrentSession() {
        return _checkCurrentSession.apply(this, arguments);
      }
      return checkCurrentSession;
    }()
    /**
     * 認証状態の変更を監視
     */
    )
  }, {
    key: "setupAuthStateListener",
    value: function setupAuthStateListener() {
      var _this3 = this;
      if (!_supabaseService.supabaseService.isAvailable()) {
        console.log('Supabase is not available, cannot set up auth state listener');
        return;
      }
      _supabaseService.supabaseService.onAuthStateChange(/*#__PURE__*/function () {
        var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(event, session) {
          var _session$user, _session$user2;
          return _regenerator().w(function (_context3) {
            while (1) switch (_context3.n) {
              case 0:
                console.log('Auth state change detected:', {
                  event: event,
                  session: !!session,
                  user: !!(session !== null && session !== void 0 && session.user),
                  userId: session === null || session === void 0 || (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.id,
                  userEmail: session === null || session === void 0 || (_session$user2 = session.user) === null || _session$user2 === void 0 ? void 0 : _session$user2.email
                });
                if (event === 'SIGNED_IN' && session) {
                  (0, _helpers.showNotification)('ログインしました', 'success');
                  // ログイン後にページをリロードして認証状態を反映
                  setTimeout(function () {
                    window.location.reload();
                  }, 1000);
                } else if (event === 'SIGNED_OUT') {
                  (0, _helpers.showNotification)('ログアウトしました', 'success');
                }

                // UIを更新
                _context3.n = 1;
                return _this3.updateAuthUI();
              case 1:
                return _context3.a(2);
            }
          }, _callee3);
        }));
        return function (_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());
    }

    /**
     * 認証UIを更新
     */
  }, {
    key: "updateAuthUI",
    value: (function () {
      var _updateAuthUI = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
        var loginBtn, userProfile, userAvatar, userName, userEmail, userDisplayName, currentUser, userProfileData, _currentUser$user_met, avatarUrl, _currentUser$user_met2, _currentUser$user_met3, displayName, _currentUser$user_met4, _currentUser$user_met5, headerDisplayName, _t2;
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.p = _context4.n) {
            case 0:
              loginBtn = document.getElementById('login-btn');
              userProfile = document.getElementById('user-profile');
              userAvatar = document.getElementById('user-avatar');
              userName = document.getElementById('user-name');
              userEmail = document.getElementById('user-email');
              userDisplayName = document.getElementById('user-display-name');
              console.log('updateAuthUI called, elements found:', {
                loginBtn: !!loginBtn,
                userProfile: !!userProfile,
                userAvatar: !!userAvatar,
                userDisplayName: !!userDisplayName
              });
              _context4.p = 1;
              _context4.n = 2;
              return this.getCurrentUser();
            case 2:
              currentUser = _context4.v;
              console.log('Updating auth UI, currentUser:', currentUser);
              if (!currentUser) {
                _context4.n = 4;
                break;
              }
              console.log('User is logged in, showing user profile');

              // ログインボタンを非表示
              if (loginBtn) {
                loginBtn.classList.add('hidden');
                console.log('Login button hidden');
              }

              // ユーザープロフィールを表示
              if (userProfile) {
                userProfile.classList.remove('hidden');
                console.log('User profile shown');
              }

              // プロファイル情報を取得
              console.log('Fetching user profile...');
              _context4.n = 3;
              return this.getUserProfile();
            case 3:
              userProfileData = _context4.v;
              console.log('User profile data:', userProfileData);

              // ユーザー情報を更新
              if (userAvatar) {
                // アバター画像を設定（プロファイル、user_metadata、デフォルトの順で確認）
                avatarUrl = 'assets/default-avatar.png';
                if (userProfileData !== null && userProfileData !== void 0 && userProfileData.avatar_url) {
                  avatarUrl = userProfileData.avatar_url;
                  console.log('Using profile avatar:', avatarUrl);
                } else if ((_currentUser$user_met = currentUser.user_metadata) !== null && _currentUser$user_met !== void 0 && _currentUser$user_met.avatar_url) {
                  avatarUrl = currentUser.user_metadata.avatar_url;
                  console.log('Using metadata avatar:', avatarUrl);
                } else {
                  console.log('Using default avatar');
                }
                userAvatar.src = avatarUrl;
                userAvatar.alt = "".concat(currentUser.email, "\u306E\u30A2\u30D0\u30BF\u30FC");

                // アバター画像の読み込みエラーを処理
                userAvatar.onerror = function () {
                  console.warn('Avatar image failed to load, using default:', avatarUrl);
                  userAvatar.src = 'assets/default-avatar.png';
                };

                // アバター画像の読み込み成功をログ
                userAvatar.onload = function () {
                  console.log('Avatar image loaded successfully:', avatarUrl);
                };
              }
              if (userName) {
                // ユーザー名を設定（プロファイル、user_metadata、emailの順で確認）
                displayName = 'ユーザー';
                if (userProfileData !== null && userProfileData !== void 0 && userProfileData.display_name) {
                  displayName = userProfileData.display_name;
                  console.log('Using profile display name:', displayName);
                } else if ((_currentUser$user_met2 = currentUser.user_metadata) !== null && _currentUser$user_met2 !== void 0 && _currentUser$user_met2.display_name) {
                  displayName = currentUser.user_metadata.display_name;
                  console.log('Using metadata display name:', displayName);
                } else if ((_currentUser$user_met3 = currentUser.user_metadata) !== null && _currentUser$user_met3 !== void 0 && _currentUser$user_met3.full_name) {
                  displayName = currentUser.user_metadata.full_name;
                  console.log('Using metadata full name:', displayName);
                } else if (currentUser.email) {
                  displayName = currentUser.email.split('@')[0];
                  console.log('Using email prefix:', displayName);
                }
                userName.textContent = displayName;
              }

              // ヘッダー表示用のユーザー名を設定
              if (userDisplayName) {
                headerDisplayName = 'ユーザー';
                if (userProfileData !== null && userProfileData !== void 0 && userProfileData.display_name) {
                  headerDisplayName = userProfileData.display_name;
                } else if ((_currentUser$user_met4 = currentUser.user_metadata) !== null && _currentUser$user_met4 !== void 0 && _currentUser$user_met4.display_name) {
                  headerDisplayName = currentUser.user_metadata.display_name;
                } else if ((_currentUser$user_met5 = currentUser.user_metadata) !== null && _currentUser$user_met5 !== void 0 && _currentUser$user_met5.full_name) {
                  headerDisplayName = currentUser.user_metadata.full_name;
                } else if (currentUser.email) {
                  headerDisplayName = currentUser.email.split('@')[0];
                }
                userDisplayName.textContent = headerDisplayName;
                console.log('Header display name set:', headerDisplayName);
                console.log('UserDisplayName element:', userDisplayName);
              } else {
                console.warn('userDisplayName element not found!');
              }
              if (userEmail) {
                userEmail.textContent = currentUser.email || '';
              }
              _context4.n = 5;
              break;
            case 4:
              console.log('User is not logged in, showing login button');

              // ログインボタンを表示
              if (loginBtn) {
                loginBtn.classList.remove('hidden');
                console.log('Login button shown');
              }

              // ユーザープロフィールを非表示
              if (userProfile) {
                userProfile.classList.add('hidden');
                console.log('User profile hidden');
              }
            case 5:
              _context4.n = 7;
              break;
            case 6:
              _context4.p = 6;
              _t2 = _context4.v;
              console.error('Failed to update auth UI:', _t2);
              // エラーの場合は未認証状態として表示
              if (loginBtn) {
                loginBtn.classList.remove('hidden');
              }
              if (userProfile) {
                userProfile.classList.add('hidden');
              }
            case 7:
              return _context4.a(2);
          }
        }, _callee4, this, [[1, 6]]);
      }));
      function updateAuthUI() {
        return _updateAuthUI.apply(this, arguments);
      }
      return updateAuthUI;
    }()
    /**
     * ログアウト処理
     */
    )
  }, {
    key: "handleLogout",
    value: (function () {
      var _handleLogout = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
        var _this4 = this;
        var history, _t3, _t4;
        return _regenerator().w(function (_context6) {
          while (1) switch (_context6.p = _context6.n) {
            case 0:
              if (_supabaseService.supabaseService.isAvailable()) {
                _context6.n = 1;
                break;
              }
              (0, _helpers.showNotification)('Supabaseが設定されていません。', 'error');
              return _context6.a(2);
            case 1:
              _context6.p = 1;
              _context6.n = 2;
              return _supabaseService.supabaseService.getWorkouts();
            case 2:
              history = _context6.v;
              localStorage.setItem('workoutHistory', JSON.stringify(history));
              _context6.n = 4;
              break;
            case 3:
              _context6.p = 3;
              _t3 = _context6.v;
              console.warn('ワークアウト履歴のlocalStorage保存に失敗:', _t3);
            case 4:
              _context6.p = 4;
              _context6.n = 5;
              return _supabaseService.supabaseService.signOut();
            case 5:
              console.log('Sign out completed, updating UI...');

              // UIを即座に更新
              _context6.n = 6;
              return this.updateAuthUI();
            case 6:
              // 少し遅延して再度UIを更新（認証状態の変更が反映されるまで待つ）
              setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
                return _regenerator().w(function (_context5) {
                  while (1) switch (_context5.n) {
                    case 0:
                      _context5.n = 1;
                      return _this4.updateAuthUI();
                    case 1:
                      return _context5.a(2);
                  }
                }, _callee5);
              })), 500);
              (0, _helpers.showNotification)('ログアウトしました', 'success');
              _context6.n = 8;
              break;
            case 7:
              _context6.p = 7;
              _t4 = _context6.v;
              console.error('Logout error:', _t4);
              (0, _helpers.showNotification)('ログアウトに失敗しました', 'error');
            case 8:
              return _context6.a(2);
          }
        }, _callee6, this, [[4, 7], [1, 3]]);
      }));
      function handleLogout() {
        return _handleLogout.apply(this, arguments);
      }
      return handleLogout;
    }()
    /**
     * 認証モーダルを表示
     * @param {string} mode - モード ('login' または 'signup')
     */
    )
  }, {
    key: "showAuthModal",
    value: (function () {
      var _showAuthModal = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
        var mode,
          content,
          _args7 = arguments;
        return _regenerator().w(function (_context7) {
          while (1) switch (_context7.n) {
            case 0:
              mode = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : 'login';
              if (document.getElementById('auth-modal')) {
                _context7.n = 2;
                break;
              }
              _context7.n = 1;
              return _pageManager.pageManager.loadPartial('auth-modal');
            case 1:
              content = _context7.v;
              document.body.insertAdjacentHTML('beforeend', content);
            case 2:
              this.initializeAuthModal(mode);
            case 3:
              return _context7.a(2);
          }
        }, _callee7, this);
      }));
      function showAuthModal() {
        return _showAuthModal.apply(this, arguments);
      }
      return showAuthModal;
    }()
    /**
     * 認証モーダルを初期化
     * @param {string} mode - モード ('login' または 'signup')
     */
    )
  }, {
    key: "initializeAuthModal",
    value: function initializeAuthModal() {
      var _this5 = this;
      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'login';
      var authModal = document.getElementById('auth-modal');
      var authModalClose = document.getElementById('auth-modal-close');
      var authForm = document.getElementById('auth-form');
      var signupForm = document.getElementById('signup-form');
      var switchToSignup = document.getElementById('switch-to-signup');
      var switchToLogin = document.getElementById('switch-to-login');
      var authModalTitle = document.getElementById('auth-modal-title');
      if (!authModal) {
        return;
      }

      // モーダルを表示
      authModal.classList.remove('hidden');

      // モードを設定
      if (mode === 'login') {
        authForm === null || authForm === void 0 || authForm.classList.remove('hidden');
        signupForm === null || signupForm === void 0 || signupForm.classList.add('hidden');
        if (authModalTitle) {
          authModalTitle.textContent = 'ログイン';
        }
      } else {
        authForm === null || authForm === void 0 || authForm.classList.add('hidden');
        signupForm === null || signupForm === void 0 || signupForm.classList.remove('hidden');
        if (authModalTitle) {
          authModalTitle.textContent = '新規登録';
        }
      }

      // バリデーション設定
      this.setupFormValidation(authForm, signupForm);

      // イベントリスナー
      if (authModalClose) {
        authModalClose.addEventListener('click', this.hideAuthModal);
      }
      if (switchToSignup) {
        switchToSignup.addEventListener('click', function () {
          return _this5.showAuthModal('signup');
        });
      }
      if (switchToLogin) {
        switchToLogin.addEventListener('click', function () {
          return _this5.showAuthModal('login');
        });
      }

      // フォーム送信
      if (authForm) {
        authForm.addEventListener('submit', function (e) {
          return _this5.handleLogin(e);
        });
      }
      if (signupForm) {
        signupForm.addEventListener('submit', function (e) {
          return _this5.handleSignup(e);
        });
      }

      // Escapeキーで閉じる
      var _escapeHandler = function escapeHandler(e) {
        if (e.key === 'Escape') {
          _this5.hideAuthModal();
          window.removeEventListener('keydown', _escapeHandler);
        }
      };
      window.addEventListener('keydown', _escapeHandler);

      // 背景クリックで閉じる
      authModal.addEventListener('click', function (e) {
        if (e.target === authModal) {
          _this5.hideAuthModal();
        }
      });
    }

    /**
     * フォームバリデーションを設定
     * @param {Element} authForm - ログインフォーム
     * @param {Element} signupForm - 新規登録フォーム
     */
  }, {
    key: "setupFormValidation",
    value: function setupFormValidation(authForm, signupForm) {
      // ログインフォームのバリデーション設定
      if (authForm) {
        _validation.globalRealtimeValidator.setupAuthFormValidation(authForm);
      }

      // 新規登録フォームのバリデーション設定
      if (signupForm) {
        _validation.globalRealtimeValidator.setupAuthFormValidation(signupForm);
      }
    }

    /**
     * 認証モーダルを非表示
     */
  }, {
    key: "hideAuthModal",
    value: function hideAuthModal() {
      var authModal = document.getElementById('auth-modal');
      if (authModal) {
        authModal.classList.add('hidden');
      }
    }

    /**
     * ログイン処理
     * @param {Event} e - イベントオブジェクト
     */
  }, {
    key: "handleLogin",
    value: (function () {
      var _handleLogin = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(e) {
        var _document$getElementB, _document$getElementB2;
        var email, password, errorDiv, sanitizedData, errors, firstError, errorInfo, _t5;
        return _regenerator().w(function (_context8) {
          while (1) switch (_context8.p = _context8.n) {
            case 0:
              e.preventDefault();
              email = (_document$getElementB = document.getElementById('auth-email')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.value;
              password = (_document$getElementB2 = document.getElementById('auth-password')) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.value;
              errorDiv = document.getElementById('auth-error'); // バリデーション実行
              sanitizedData = _validation.globalFormValidator.validateAuthForm({
                email: email,
                password: password
              });
              if (_validation.globalFormValidator.isValid()) {
                _context8.n = 1;
                break;
              }
              errors = _validation.globalFormValidator.getAllErrors();
              firstError = Object.values(errors).flat()[0];
              this.showAuthError(errorDiv, firstError);
              return _context8.a(2);
            case 1:
              _context8.p = 1;
              console.log('Attempting login with email:', sanitizedData.email);
              _context8.n = 2;
              return _supabaseService.supabaseService.signIn(sanitizedData.email, sanitizedData.password);
            case 2:
              // エラーをクリア
              if (errorDiv) {
                errorDiv.textContent = '';
                errorDiv.classList.add('hidden');
              }

              // UIを更新してモーダルを閉じる
              _context8.n = 3;
              return this.updateAuthUI();
            case 3:
              this.hideAuthModal();
              (0, _helpers.showNotification)('ログインしました', 'success');

              // ログイン後にページを再読み込みしてダッシュボードを表示
              setTimeout(function () {
                window.location.reload();
              }, 1000);
              _context8.n = 5;
              break;
            case 4:
              _context8.p = 4;
              _t5 = _context8.v;
              errorInfo = (0, _errorHandler.handleError)(_t5, {
                context: 'ログイン',
                showNotification: false
              });
              this.showAuthError(errorDiv, errorInfo.message);
            case 5:
              return _context8.a(2);
          }
        }, _callee8, this, [[1, 4]]);
      }));
      function handleLogin(_x3) {
        return _handleLogin.apply(this, arguments);
      }
      return handleLogin;
    }()
    /**
     * 新規登録処理
     * @param {Event} e - イベントオブジェクト
     */
    )
  }, {
    key: "handleSignup",
    value: (function () {
      var _handleSignup = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9(e) {
        var _document$getElementB3, _document$getElementB4, _document$getElementB5;
        var email, password, privacyAgreement, errorDiv, sanitizedData, errors, firstError, _t6;
        return _regenerator().w(function (_context9) {
          while (1) switch (_context9.p = _context9.n) {
            case 0:
              e.preventDefault();
              email = (_document$getElementB3 = document.getElementById('signup-email')) === null || _document$getElementB3 === void 0 ? void 0 : _document$getElementB3.value;
              password = (_document$getElementB4 = document.getElementById('signup-password')) === null || _document$getElementB4 === void 0 ? void 0 : _document$getElementB4.value;
              privacyAgreement = (_document$getElementB5 = document.getElementById('privacy-agreement')) === null || _document$getElementB5 === void 0 ? void 0 : _document$getElementB5.checked;
              errorDiv = document.getElementById('signup-error'); // プライバシーポリシー同意チェック
              if (privacyAgreement) {
                _context9.n = 1;
                break;
              }
              this.showAuthError(errorDiv, 'プライバシーポリシーへの同意が必要です');
              return _context9.a(2);
            case 1:
              // バリデーション実行
              sanitizedData = _validation.globalFormValidator.validateAuthForm({
                email: email,
                password: password
              });
              if (_validation.globalFormValidator.isValid()) {
                _context9.n = 2;
                break;
              }
              errors = _validation.globalFormValidator.getAllErrors();
              firstError = Object.values(errors).flat()[0];
              this.showAuthError(errorDiv, firstError);
              return _context9.a(2);
            case 2:
              _context9.p = 2;
              _context9.n = 3;
              return _supabaseService.supabaseService.signUp(sanitizedData.email, sanitizedData.password);
            case 3:
              this.hideAuthModal();
              (0, _helpers.showNotification)('登録が完了しました。メールを確認してください。', 'success');
              _context9.n = 5;
              break;
            case 4:
              _context9.p = 4;
              _t6 = _context9.v;
              console.error('Signup error:', _t6);
              this.showAuthError(errorDiv, _t6.message || '新規登録に失敗しました');
            case 5:
              return _context9.a(2);
          }
        }, _callee9, this, [[2, 4]]);
      }));
      function handleSignup(_x4) {
        return _handleSignup.apply(this, arguments);
      }
      return handleSignup;
    }()
    /**
     * 認証エラーを表示
     * @param {Element} errorDiv - エラー表示要素
     * @param {string} message - エラーメッセージ
     */
    )
  }, {
    key: "showAuthError",
    value: function showAuthError(errorDiv, message) {
      if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
      }
    }

    /**
     * 認証状態をチェック
     * @returns {boolean} 認証済みかどうか
     */
  }, {
    key: "isAuthenticated",
    value: (function () {
      var _isAuthenticated = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {
        var _yield$supabaseServic2, user, isAuth, _t7;
        return _regenerator().w(function (_context0) {
          while (1) switch (_context0.p = _context0.n) {
            case 0:
              _context0.p = 0;
              if (_supabaseService.supabaseService.isAvailable()) {
                _context0.n = 1;
                break;
              }
              console.log('Supabase not available, authentication failed');
              return _context0.a(2, false);
            case 1:
              _context0.n = 2;
              return _supabaseService.supabaseService.getAuthState();
            case 2:
              _yield$supabaseServic2 = _context0.v;
              user = _yield$supabaseServic2.user;
              isAuth = user !== null;
              console.log('Authentication check result:', {
                isAuth: isAuth,
                userId: user === null || user === void 0 ? void 0 : user.id
              });
              return _context0.a(2, isAuth);
            case 3:
              _context0.p = 3;
              _t7 = _context0.v;
              console.error('Authentication check failed:', _t7);
              return _context0.a(2, false);
          }
        }, _callee0, null, [[0, 3]]);
      }));
      function isAuthenticated() {
        return _isAuthenticated.apply(this, arguments);
      }
      return isAuthenticated;
    }()
    /**
     * 現在のユーザーを取得
     * @returns {Object|null} ユーザーオブジェクト
     */
    )
  }, {
    key: "getCurrentUser",
    value: (function () {
      var _getCurrentUser = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1() {
        var _yield$supabaseServic3, user, _t8;
        return _regenerator().w(function (_context1) {
          while (1) switch (_context1.p = _context1.n) {
            case 0:
              _context1.p = 0;
              _context1.n = 1;
              return _supabaseService.supabaseService.getAuthState();
            case 1:
              _yield$supabaseServic3 = _context1.v;
              user = _yield$supabaseServic3.user;
              console.log('getCurrentUser result:', {
                user: !!user,
                userId: user === null || user === void 0 ? void 0 : user.id
              });
              return _context1.a(2, user);
            case 2:
              _context1.p = 2;
              _t8 = _context1.v;
              console.error('Failed to get current user:', _t8);
              return _context1.a(2, null);
          }
        }, _callee1, null, [[0, 2]]);
      }));
      function getCurrentUser() {
        return _getCurrentUser.apply(this, arguments);
      }
      return getCurrentUser;
    }()
    /**
     * ユーザープロファイルを取得
     * @returns {Object|null} プロファイルオブジェクト
     */
    )
  }, {
    key: "getUserProfile",
    value: (function () {
      var _getUserProfile = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10() {
        var currentUser, _yield$supabaseServic4, data, error, _t9;
        return _regenerator().w(function (_context10) {
          while (1) switch (_context10.p = _context10.n) {
            case 0:
              _context10.p = 0;
              if (_supabaseService.supabaseService.isAvailable()) {
                _context10.n = 1;
                break;
              }
              console.log('Supabase not available, cannot get user profile');
              return _context10.a(2, null);
            case 1:
              _context10.n = 2;
              return this.getCurrentUser();
            case 2:
              currentUser = _context10.v;
              if (currentUser) {
                _context10.n = 3;
                break;
              }
              console.log('No current user, cannot get profile');
              return _context10.a(2, null);
            case 3:
              console.log('Fetching user profile for user:', currentUser.id);

              // supabaseService.clientが利用可能かチェック
              if (_supabaseService.supabaseService.client) {
                _context10.n = 4;
                break;
              }
              console.error('Supabase client is not available');
              return _context10.a(2, null);
            case 4:
              _context10.n = 5;
              return _supabaseService.supabaseService.client.from('user_profiles').select('*').eq('id', currentUser.id).single();
            case 5:
              _yield$supabaseServic4 = _context10.v;
              data = _yield$supabaseServic4.data;
              error = _yield$supabaseServic4.error;
              if (!error) {
                _context10.n = 6;
                break;
              }
              console.error('Failed to get user profile:', error);
              return _context10.a(2, null);
            case 6:
              console.log('User profile retrieved:', {
                id: data === null || data === void 0 ? void 0 : data.id,
                displayName: data === null || data === void 0 ? void 0 : data.display_name,
                avatarUrl: data === null || data === void 0 ? void 0 : data.avatar_url
              });
              return _context10.a(2, data);
            case 7:
              _context10.p = 7;
              _t9 = _context10.v;
              console.error('Failed to get user profile:', _t9);
              return _context10.a(2, null);
          }
        }, _callee10, this, [[0, 7]]);
      }));
      function getUserProfile() {
        return _getUserProfile.apply(this, arguments);
      }
      return getUserProfile;
    }()
    /**
     * ユーザードロップダウンを切り替え
     */
    )
  }, {
    key: "toggleUserDropdown",
    value: function toggleUserDropdown() {
      var dropdown = document.getElementById('user-dropdown');
      if (dropdown) {
        dropdown.classList.toggle('hidden');
        console.log('User dropdown toggled');
      }
    }

    /**
     * ユーザードロップダウンを閉じる
     */
  }, {
    key: "closeUserDropdown",
    value: function closeUserDropdown() {
      var dropdown = document.getElementById('user-dropdown');
      if (dropdown && !dropdown.classList.contains('hidden')) {
        dropdown.classList.add('hidden');
        console.log('User dropdown closed');
      }
    }

    /**
     * プロフィール設定を処理
     */
  }, {
    key: "handleProfileSettings",
    value: function handleProfileSettings() {
      console.log('Opening profile settings');
      try {
        // ドロップダウンを閉じる
        this.closeUserDropdown();

        // 設定ページに遷移
        console.log('Navigating to settings page...');
        window.location.href = '/settings.html';
      } catch (error) {
        console.error('Failed to navigate to settings:', error);
        (0, _helpers.showNotification)('設定ページへの遷移に失敗しました', 'error');
      }
    }
  }]);
}(); // シングルトンインスタンスをエクスポート
var authManager = exports.authManager = new AuthManager();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,