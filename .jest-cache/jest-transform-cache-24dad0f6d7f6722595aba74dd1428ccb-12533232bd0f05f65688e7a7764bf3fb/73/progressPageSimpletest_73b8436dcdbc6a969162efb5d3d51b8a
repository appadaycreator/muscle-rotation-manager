3ab97f40246da34a39c594dc02af1f4d
"use strict";

// モックの設定
_getJestObj().mock('../../js/core/BasePage.js', function () {
  return {
    BasePage: jest.fn().mockImplementation(function () {
      return {
        constructor: jest.fn(),
        checkAuthentication: jest.fn(),
        initialize: jest.fn(),
        onInitialize: jest.fn()
      };
    })
  };
});
_getJestObj().mock('../../js/services/workoutDataService.js', function () {
  return {
    workoutDataService: {
      loadWorkouts: jest.fn(),
      saveWorkout: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/services/progressiveOverloadService.js', function () {
  return {
    progressiveOverloadService: {
      getOverallProgress: jest.fn(),
      getExerciseProgress: jest.fn(),
      getMuscleGroupProgress: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/modules/authManager.js', function () {
  return {
    authManager: {
      showAuthModal: jest.fn()
    }
  };
});
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    showNotification: jest.fn(),
    safeGetElement: jest.fn()
  };
});
_getJestObj().mock('../../js/utils/TooltipManager.js', function () {
  return {
    tooltipManager: {
      initialize: jest.fn()
    }
  };
});
var _progressPage = _interopRequireDefault(require("../../js/pages/progressPage.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
} // progressPageSimple.test.js - ProgressPageクラスのテスト
describe('ProgressPage', function () {
  var progressPageInstance;
  var mockWorkoutDataService;
  var mockProgressiveOverloadService;
  var mockAuthManager;
  var mockHelpers;
  var mockTooltipManager;
  beforeEach(function () {
    // モックをリセット
    jest.clearAllMocks();

    // モジュールの取得
    var workoutDataServiceModule = require('../../js/services/workoutDataService.js');
    var progressiveOverloadServiceModule = require('../../js/services/progressiveOverloadService.js');
    var authManagerModule = require('../../js/modules/authManager.js');
    var helpersModule = require('../../js/utils/helpers.js');
    var tooltipManagerModule = require('../../js/utils/TooltipManager.js');
    mockWorkoutDataService = workoutDataServiceModule.workoutDataService;
    mockProgressiveOverloadService = progressiveOverloadServiceModule.progressiveOverloadService;
    mockAuthManager = authManagerModule.authManager;
    mockHelpers = helpersModule;
    mockTooltipManager = tooltipManagerModule.tooltipManager;

    // DOM要素のモック
    mockHelpers.safeGetElement.mockImplementation(function (id) {
      var mockElement = {
        innerHTML: '',
        addEventListener: jest.fn(),
        value: '',
        dataset: {}
      };
      return mockElement;
    });

    // ProgressPageのインスタンス作成
    progressPageInstance = _progressPage["default"];
  });
  describe('constructor', function () {
    test('should initialize with default values', function () {
      expect(progressPageInstance.workoutData).toEqual([]);
      expect(progressPageInstance.progressiveOverloadData).toBeNull();
      expect(progressPageInstance.selectedExercise).toBeNull();
      expect(progressPageInstance.selectedMuscleGroup).toBeNull();
      expect(progressPageInstance.analysisPeriod).toBe(90);
      expect(progressPageInstance.isLoading).toBe(false);
    });
  });
  describe('getMuscleGroupName', function () {
    test('should return correct muscle group names', function () {
      expect(progressPageInstance.getMuscleGroupName('chest')).toBe('胸');
      expect(progressPageInstance.getMuscleGroupName('back')).toBe('背中');
      expect(progressPageInstance.getMuscleGroupName('shoulders')).toBe('肩');
      expect(progressPageInstance.getMuscleGroupName('arms')).toBe('腕');
      expect(progressPageInstance.getMuscleGroupName('legs')).toBe('脚');
      expect(progressPageInstance.getMuscleGroupName('core')).toBe('腹筋');
      expect(progressPageInstance.getMuscleGroupName('胸')).toBe('胸');
      expect(progressPageInstance.getMuscleGroupName('unknown')).toBe('unknown');
    });
  });
  describe('generateSampleWorkoutData', function () {
    test('should generate sample workout data', function () {
      var sampleData = progressPageInstance.generateSampleWorkoutData();
      expect(Array.isArray(sampleData)).toBe(true);
      expect(sampleData.length).toBeGreaterThan(0);

      // サンプルデータの構造をチェック
      var firstWorkout = sampleData[0];
      expect(firstWorkout).toHaveProperty('id');
      expect(firstWorkout).toHaveProperty('date');
      expect(firstWorkout).toHaveProperty('muscle_groups');
      expect(firstWorkout).toHaveProperty('exercises');
      expect(firstWorkout).toHaveProperty('duration');
      expect(firstWorkout).toHaveProperty('notes');
    });
  });
  describe('renderProgressPage', function () {
    test('should render progress page content', function () {
      var mockMainContent = {
        innerHTML: ''
      };
      mockHelpers.safeGetElement.mockReturnValue(mockMainContent);
      progressPageInstance.renderProgressPage();
      expect(mockHelpers.safeGetElement).toHaveBeenCalledWith('#main-content');
      expect(mockMainContent.innerHTML).toContain('プログレッシブ・オーバーロード');
      expect(mockMainContent.innerHTML).toContain('分析設定');
      expect(mockMainContent.innerHTML).toContain('総合分析');
    });
    test('should handle missing main content element', function () {
      mockHelpers.safeGetElement.mockReturnValue(null);
      expect(function () {
        progressPageInstance.renderProgressPage();
      }).not.toThrow();
    });
  });
  describe('renderExerciseSelector', function () {
    test('should render exercise selector with workouts', function () {
      var mockSelector = {
        innerHTML: ''
      };
      mockHelpers.safeGetElement.mockReturnValue(mockSelector);
      progressPageInstance.workoutData = [{
        exercises: [{
          name: 'ベンチプレス'
        }, {
          name: 'スクワット'
        }]
      }, {
        exercises: [{
          name: 'デッドリフト'
        }]
      }];
      progressPageInstance.renderExerciseSelector();
      expect(mockSelector.innerHTML).toContain('ベンチプレス');
      expect(mockSelector.innerHTML).toContain('スクワット');
      expect(mockSelector.innerHTML).toContain('デッドリフト');
    });
    test('should handle missing selector', function () {
      mockHelpers.safeGetElement.mockReturnValue(null);
      expect(function () {
        progressPageInstance.renderExerciseSelector();
      }).not.toThrow();
    });
  });
  describe('renderMuscleGroupSelector', function () {
    test('should render muscle group selector', function () {
      var mockSelector = {
        innerHTML: ''
      };
      mockHelpers.safeGetElement.mockReturnValue(mockSelector);
      progressPageInstance.workoutData = [{
        muscle_groups: ['胸', '背中']
      }, {
        muscle_groups: ['肩']
      }];
      progressPageInstance.renderMuscleGroupSelector();
      expect(mockSelector.innerHTML).toContain('胸');
      expect(mockSelector.innerHTML).toContain('背中');
      expect(mockSelector.innerHTML).toContain('肩');
    });
  });
  describe('loadWorkoutData', function () {
    test('should load workout data successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var mockWorkouts;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            mockWorkouts = [{
              id: '1',
              date: '2024-01-01',
              exercises: []
            }, {
              id: '2',
              date: '2024-01-02',
              exercises: []
            }];
            mockWorkoutDataService.loadWorkouts.mockResolvedValue(mockWorkouts);
            _context.n = 1;
            return progressPageInstance.loadWorkoutData();
          case 1:
            expect(progressPageInstance.workoutData).toEqual(mockWorkouts);
            expect(progressPageInstance.isLoading).toBe(false);
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
    test('should generate sample data when no workouts exist', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            mockWorkoutDataService.loadWorkouts.mockResolvedValue([]);
            mockWorkoutDataService.saveWorkout.mockResolvedValue();
            _context2.n = 1;
            return progressPageInstance.loadWorkoutData();
          case 1:
            expect(progressPageInstance.workoutData.length).toBeGreaterThan(0);
            expect(mockWorkoutDataService.saveWorkout).toHaveBeenCalled();
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    test('should handle loading error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var error;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            error = new Error('Loading failed');
            mockWorkoutDataService.loadWorkouts.mockRejectedValue(error);
            _context3.n = 1;
            return progressPageInstance.loadWorkoutData();
          case 1:
            expect(progressPageInstance.workoutData.length).toBeGreaterThan(0); // サンプルデータが生成される
            expect(mockHelpers.showNotification).toHaveBeenCalledWith('ワークアウトデータの読み込みに失敗しました', 'error');
            expect(progressPageInstance.isLoading).toBe(false);
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
  });
  describe('loadProgressiveOverloadData', function () {
    test('should load progressive overload data successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var mockData;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            mockData = {
              totalWorkouts: 5,
              overallMetrics: {
                totalVolume: 500
              },
              consistencyScore: 80,
              muscleGroupProgress: {},
              recommendations: []
            };
            mockProgressiveOverloadService.getOverallProgress.mockResolvedValue(mockData);
            _context4.n = 1;
            return progressPageInstance.loadProgressiveOverloadData();
          case 1:
            expect(progressPageInstance.progressiveOverloadData).toEqual(mockData);
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    test('should handle loading error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var error;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            error = new Error('Loading failed');
            mockProgressiveOverloadService.getOverallProgress.mockRejectedValue(error);
            _context5.n = 1;
            return progressPageInstance.loadProgressiveOverloadData();
          case 1:
            expect(mockHelpers.showNotification).toHaveBeenCalledWith('プログレッシブ・オーバーロードデータの読み込みに失敗しました', 'error');
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,