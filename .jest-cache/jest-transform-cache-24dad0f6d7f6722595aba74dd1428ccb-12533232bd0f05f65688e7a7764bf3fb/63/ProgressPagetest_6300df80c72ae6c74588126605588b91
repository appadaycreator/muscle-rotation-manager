43f84a967516537588a28a6e16bbc60f
"use strict";

// ProgressPage.test.js - ProgressPageクラスのテスト

// モック
_getJestObj().mock('../../js/services/progressiveOverloadService.js', function () {
  return {
    progressiveOverloadService: {
      getOverallProgress: jest.fn().mockResolvedValue({
        totalWorkouts: 10,
        overallMetrics: {
          totalVolume: 5000,
          averageVolumePerWorkout: 500
        },
        consistencyScore: 85,
        muscleGroupProgress: {
          chest: {
            totalSessions: 5,
            totalVolume: 2500,
            averageVolumePerSession: 500,
            frequencyAnalysis: {
              frequencyScore: 80,
              averageDaysBetween: 3
            }
          }
        },
        recommendations: [{
          priority: 'high',
          message: 'テスト推奨事項',
          action: 'テストアクション'
        }]
      }),
      getExerciseProgress: jest.fn().mockResolvedValue({
        progressMetrics: {
          volumeProgression: 15,
          intensityProgression: 10,
          consistencyScore: 85,
          averageWeight: 60,
          averageReps: 10,
          averageSets: 3
        },
        recommendations: [{
          priority: 'medium',
          message: 'テスト推奨事項',
          action: 'テストアクション'
        }]
      }),
      getMuscleGroupProgress: jest.fn().mockResolvedValue({
        totalSessions: 5,
        frequencyAnalysis: {
          frequencyScore: 80,
          averageDaysBetween: 3
        },
        exercises: {
          exerciseCounts: {
            'ベンチプレス': 3,
            'プッシュアップ': 2
          },
          exerciseProgress: {
            'ベンチプレス': {
              weightProgress: 10
            }
          }
        },
        recommendations: [{
          priority: 'low',
          message: 'テスト推奨事項',
          action: 'テストアクション'
        }]
      })
    }
  };
});
_getJestObj().mock('../../js/services/workoutDataService.js', function () {
  return {
    workoutDataService: {
      getWorkoutHistory: jest.fn().mockResolvedValue([]),
      getMuscleGroupStats: jest.fn().mockResolvedValue({})
    }
  };
});
_getJestObj().mock('../../js/utils/helpers.js', function () {
  return {
    safeGetElement: jest.fn(function (id) {
      var mockElement = {
        id: id,
        innerHTML: '',
        appendChild: jest.fn(),
        removeChild: jest.fn()
      };
      return mockElement;
    }),
    showNotification: jest.fn()
  };
});
_getJestObj().mock('../../js/utils/errorHandler.js', function () {
  return {
    handleError: jest.fn()
  };
});
_getJestObj().mock('../../js/core/BasePage.js', function () {
  return {
    BasePage: jest.fn().mockImplementation(function () {
      return {
        pageName: 'ProgressPage',
        handleError: jest.fn()
      };
    })
  };
});
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, "default": e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ProgressPage', function () {
  var ProgressPage;
  var progressPage;
  var mockContainer;
  beforeEach(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
    var module;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          // DOM要素のモック
          mockContainer = document.createElement('div');
          mockContainer.id = 'main-content';
          document.body.appendChild(mockContainer);

          // ProgressPageクラスを動的にインポート
          _context.n = 1;
          return Promise.resolve().then(function () {
            return _interopRequireWildcard(require('../../js/pages/progressPage.js'));
          });
        case 1:
          module = _context.v;
          ProgressPage = module["default"] || module.ProgressPage;

          // ProgressPageのインスタンスを作成
          progressPage = new ProgressPage();
        case 2:
          return _context.a(2);
      }
    }, _callee);
  })));
  afterEach(function () {
    document.body.removeChild(mockContainer);
    jest.clearAllMocks();
  });
  describe('初期化', function () {
    test('should initialize successfully', function () {
      expect(progressPage).toBeDefined();
      expect(progressPage.pageName).toBe('ProgressPage');
    });
    test('should have required properties', function () {
      expect(progressPage.workoutData).toEqual([]);
      expect(progressPage.progressiveOverloadData).toBeNull();
    });
  });
  describe('サンプルデータ生成', function () {
    test('should generate sample workout data', function () {
      var sampleData = progressPage.generateSampleWorkoutData();
      expect(Array.isArray(sampleData)).toBe(true);
      expect(sampleData.length).toBeGreaterThan(0);

      // サンプルデータの構造を確認
      var firstWorkout = sampleData[0];
      expect(firstWorkout).toHaveProperty('id');
      expect(firstWorkout).toHaveProperty('date');
      expect(firstWorkout).toHaveProperty('muscle_groups');
      expect(firstWorkout).toHaveProperty('exercises');
      expect(firstWorkout).toHaveProperty('duration');
    });
    test('should generate realistic workout parameters', function () {
      var sampleData = progressPage.generateSampleWorkoutData();
      sampleData.forEach(function (workout) {
        if (workout.exercises && workout.exercises.length > 0) {
          workout.exercises.forEach(function (exercise) {
            expect(exercise.sets).toBeLessThanOrEqual(3); // セット数は3以下
            expect(exercise.reps).toBeLessThanOrEqual(15); // 回数は15以下
            expect(exercise.weight).toBeLessThanOrEqual(100); // 重量は100以下
          });
        }
      });
    });
  });
  describe('プログレッシブ・オーバーロード分析', function () {
    test('should load progressive overload data', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            _context2.n = 1;
            return progressPage.loadProgressiveOverloadData();
          case 1:
            expect(progressPage.progressiveOverloadData).toBeDefined();
            expect(progressPage.progressiveOverloadData.totalWorkouts).toBe(10);
            expect(progressPage.progressiveOverloadData.overallMetrics.totalVolume).toBe(5000);
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    test('should handle progressive overload data loading errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var _require, progressiveOverloadService, consoleSpy;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            _require = require('../../js/services/progressiveOverloadService.js'), progressiveOverloadService = _require.progressiveOverloadService;
            progressiveOverloadService.getOverallProgress.mockRejectedValueOnce(new Error('Test error'));
            consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            _context3.n = 1;
            return progressPage.loadProgressiveOverloadData();
          case 1:
            expect(consoleSpy).toHaveBeenCalled();
            consoleSpy.mockRestore();
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
  });
  describe('エクササイズ分析', function () {
    test('should calculate exercise stats correctly', function () {
      var mockExerciseData = [{
        date: '2024-01-01',
        exercises: [{
          name: 'ベンチプレス',
          weight: 60,
          reps: 10,
          sets: 3
        }, {
          name: 'プッシュアップ',
          weight: 0,
          reps: 15,
          sets: 2
        }]
      }, {
        date: '2024-01-02',
        exercises: [{
          name: 'ベンチプレス',
          weight: 65,
          reps: 10,
          sets: 3
        }]
      }];
      var stats = progressPage.calculateExerciseStats(mockExerciseData, 'ベンチプレス');
      expect(stats.totalSessions).toBe(2);
      expect(stats.maxWeight).toBe(65);
      expect(stats.avgWeight).toBe(63); // (60 + 65) / 2 = 62.5, rounded to 63
      expect(stats.totalVolume).toBe(1800 + 1950); // (60*10*3) + (65*10*3)
      expect(stats.progressRate).toBeGreaterThan(0);
    });
    test('should handle empty exercise data', function () {
      var stats = progressPage.calculateExerciseStats([], 'ベンチプレス');
      expect(stats.totalSessions).toBe(0);
      expect(stats.maxWeight).toBe(0);
      expect(stats.avgWeight).toBe(0);
      expect(stats.totalVolume).toBe(0);
      expect(stats.progressRate).toBe(0);
    });
  });
  describe('筋肉部位分析', function () {
    test('should calculate muscle group analysis', function () {
      var mockMuscleData = [{
        date: '2024-01-01',
        muscle_groups: ['chest'],
        exercises: [{
          name: 'ベンチプレス',
          weight: 60,
          reps: 10,
          sets: 3
        }],
        duration: 45
      }, {
        date: '2024-01-02',
        muscle_groups: ['chest'],
        exercises: [{
          name: 'プッシュアップ',
          weight: 0,
          reps: 15,
          sets: 2
        }],
        duration: 30
      }];
      var analysis = progressPage.calculateMuscleGroupAnalysis(mockMuscleData);
      expect(analysis.totalSessions).toBe(2);
      expect(analysis.totalVolume).toBe(1800); // 60*10*3 + 0*15*2
      expect(analysis.averageVolumePerSession).toBe(900);
      expect(analysis.totalDuration).toBe(75);
    });
  });
  describe('レンダリング', function () {
    test('should render exercise analysis', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var container;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            container = document.createElement('div');
            container.id = 'exercise-analysis';
            document.body.appendChild(container);
            _context4.n = 1;
            return progressPage.renderExerciseAnalysisFromService('ベンチプレス');
          case 1:
            expect(container.innerHTML).toContain('ベンチプレス');
            expect(container.innerHTML).toContain('分析を読み込み中');
            document.body.removeChild(container);
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    test('should render muscle group analysis', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var container;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            container = document.createElement('div');
            container.id = 'muscle-group-analysis';
            document.body.appendChild(container);
            _context5.n = 1;
            return progressPage.renderMuscleGroupAnalysis('chest');
          case 1:
            expect(container.innerHTML).toContain('胸');
            expect(container.innerHTML).toContain('分析を読み込み中');
            document.body.removeChild(container);
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
  describe('エラーハンドリング', function () {
    test('should handle rendering errors gracefully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var container, _require2, progressiveOverloadService;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            container = document.createElement('div');
            container.id = 'exercise-analysis';
            document.body.appendChild(container);

            // モックサービスでエラーを発生させる
            _require2 = require('../../js/services/progressiveOverloadService.js'), progressiveOverloadService = _require2.progressiveOverloadService;
            progressiveOverloadService.getExerciseProgress.mockRejectedValueOnce(new Error('Test error'));
            _context6.n = 1;
            return progressPage.renderExerciseAnalysisFromService('ベンチプレス');
          case 1:
            expect(container.innerHTML).toContain('エクササイズ分析の読み込みに失敗しました');
            document.body.removeChild(container);
          case 2:
            return _context6.a(2);
        }
      }, _callee6);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJwcm9ncmVzc2l2ZU92ZXJsb2FkU2VydmljZSIsImdldE92ZXJhbGxQcm9ncmVzcyIsImplc3QiLCJmbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwidG90YWxXb3Jrb3V0cyIsIm92ZXJhbGxNZXRyaWNzIiwidG90YWxWb2x1bWUiLCJhdmVyYWdlVm9sdW1lUGVyV29ya291dCIsImNvbnNpc3RlbmN5U2NvcmUiLCJtdXNjbGVHcm91cFByb2dyZXNzIiwiY2hlc3QiLCJ0b3RhbFNlc3Npb25zIiwiYXZlcmFnZVZvbHVtZVBlclNlc3Npb24iLCJmcmVxdWVuY3lBbmFseXNpcyIsImZyZXF1ZW5jeVNjb3JlIiwiYXZlcmFnZURheXNCZXR3ZWVuIiwicmVjb21tZW5kYXRpb25zIiwicHJpb3JpdHkiLCJtZXNzYWdlIiwiYWN0aW9uIiwiZ2V0RXhlcmNpc2VQcm9ncmVzcyIsInByb2dyZXNzTWV0cmljcyIsInZvbHVtZVByb2dyZXNzaW9uIiwiaW50ZW5zaXR5UHJvZ3Jlc3Npb24iLCJhdmVyYWdlV2VpZ2h0IiwiYXZlcmFnZVJlcHMiLCJhdmVyYWdlU2V0cyIsImdldE11c2NsZUdyb3VwUHJvZ3Jlc3MiLCJleGVyY2lzZXMiLCJleGVyY2lzZUNvdW50cyIsImV4ZXJjaXNlUHJvZ3Jlc3MiLCJ3ZWlnaHRQcm9ncmVzcyIsIndvcmtvdXREYXRhU2VydmljZSIsImdldFdvcmtvdXRIaXN0b3J5IiwiZ2V0TXVzY2xlR3JvdXBTdGF0cyIsInNhZmVHZXRFbGVtZW50IiwiaWQiLCJtb2NrRWxlbWVudCIsImlubmVySFRNTCIsImFwcGVuZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJzaG93Tm90aWZpY2F0aW9uIiwiaGFuZGxlRXJyb3IiLCJCYXNlUGFnZSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsInBhZ2VOYW1lIiwiX3R5cGVvZiIsIm8iLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX3JlZ2VuZXJhdG9yIiwiZSIsInQiLCJyIiwibiIsInRvU3RyaW5nVGFnIiwiaSIsImMiLCJHZW5lcmF0b3IiLCJ1IiwiT2JqZWN0IiwiY3JlYXRlIiwiX3JlZ2VuZXJhdG9yRGVmaW5lMiIsImYiLCJwIiwieSIsIkciLCJ2IiwiYSIsImQiLCJiaW5kIiwibGVuZ3RoIiwibCIsIlR5cGVFcnJvciIsImNhbGwiLCJkb25lIiwidmFsdWUiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImRpc3BsYXlOYW1lIiwidyIsIm0iLCJkZWZpbmVQcm9wZXJ0eSIsIl9yZWdlbmVyYXRvckRlZmluZSIsIl9pbnZva2UiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIldlYWtNYXAiLCJfX2VzTW9kdWxlIiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImFzeW5jR2VuZXJhdG9yU3RlcCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsIl9hc3luY1RvR2VuZXJhdG9yIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJfbmV4dCIsIl90aHJvdyIsIl9yZXF1aXJlMyIsInJlcXVpcmUiLCJkZXNjcmliZSIsIlByb2dyZXNzUGFnZSIsInByb2dyZXNzUGFnZSIsIm1vY2tDb250YWluZXIiLCJiZWZvcmVFYWNoIiwiX2NhbGxlZSIsIm1vZHVsZSIsIl9jb250ZXh0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYm9keSIsImFmdGVyRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJ0ZXN0IiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJ0b0JlIiwid29ya291dERhdGEiLCJ0b0VxdWFsIiwicHJvZ3Jlc3NpdmVPdmVybG9hZERhdGEiLCJ0b0JlTnVsbCIsInNhbXBsZURhdGEiLCJnZW5lcmF0ZVNhbXBsZVdvcmtvdXREYXRhIiwiQXJyYXkiLCJpc0FycmF5IiwidG9CZUdyZWF0ZXJUaGFuIiwiZmlyc3RXb3Jrb3V0IiwidG9IYXZlUHJvcGVydHkiLCJmb3JFYWNoIiwid29ya291dCIsImV4ZXJjaXNlIiwic2V0cyIsInRvQmVMZXNzVGhhbk9yRXF1YWwiLCJyZXBzIiwid2VpZ2h0IiwiX2NhbGxlZTIiLCJfY29udGV4dDIiLCJsb2FkUHJvZ3Jlc3NpdmVPdmVybG9hZERhdGEiLCJfY2FsbGVlMyIsIl9yZXF1aXJlIiwiY29uc29sZVNweSIsIl9jb250ZXh0MyIsIm1vY2tSZWplY3RlZFZhbHVlT25jZSIsIkVycm9yIiwic3B5T24iLCJjb25zb2xlIiwidG9IYXZlQmVlbkNhbGxlZCIsIm1vY2tSZXN0b3JlIiwibW9ja0V4ZXJjaXNlRGF0YSIsImRhdGUiLCJuYW1lIiwic3RhdHMiLCJjYWxjdWxhdGVFeGVyY2lzZVN0YXRzIiwibWF4V2VpZ2h0IiwiYXZnV2VpZ2h0IiwicHJvZ3Jlc3NSYXRlIiwibW9ja011c2NsZURhdGEiLCJtdXNjbGVfZ3JvdXBzIiwiZHVyYXRpb24iLCJhbmFseXNpcyIsImNhbGN1bGF0ZU11c2NsZUdyb3VwQW5hbHlzaXMiLCJ0b3RhbER1cmF0aW9uIiwiX2NhbGxlZTQiLCJjb250YWluZXIiLCJfY29udGV4dDQiLCJyZW5kZXJFeGVyY2lzZUFuYWx5c2lzRnJvbVNlcnZpY2UiLCJ0b0NvbnRhaW4iLCJfY2FsbGVlNSIsIl9jb250ZXh0NSIsInJlbmRlck11c2NsZUdyb3VwQW5hbHlzaXMiLCJfY2FsbGVlNiIsIl9yZXF1aXJlMiIsIl9jb250ZXh0NiJdLCJzb3VyY2VzIjpbIlByb2dyZXNzUGFnZS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFByb2dyZXNzUGFnZS50ZXN0LmpzIC0gUHJvZ3Jlc3NQYWdl44Kv44Op44K544Gu44OG44K544OIXG5cbi8vIOODouODg+OCr1xuamVzdC5tb2NrKCcuLi8uLi9qcy9zZXJ2aWNlcy9wcm9ncmVzc2l2ZU92ZXJsb2FkU2VydmljZS5qcycsICgpID0+ICh7XG4gIHByb2dyZXNzaXZlT3ZlcmxvYWRTZXJ2aWNlOiB7XG4gICAgZ2V0T3ZlcmFsbFByb2dyZXNzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgdG90YWxXb3Jrb3V0czogMTAsXG4gICAgICBvdmVyYWxsTWV0cmljczoge1xuICAgICAgICB0b3RhbFZvbHVtZTogNTAwMCxcbiAgICAgICAgYXZlcmFnZVZvbHVtZVBlcldvcmtvdXQ6IDUwMCxcbiAgICAgIH0sXG4gICAgICBjb25zaXN0ZW5jeVNjb3JlOiA4NSxcbiAgICAgIG11c2NsZUdyb3VwUHJvZ3Jlc3M6IHtcbiAgICAgICAgY2hlc3Q6IHtcbiAgICAgICAgICB0b3RhbFNlc3Npb25zOiA1LFxuICAgICAgICAgIHRvdGFsVm9sdW1lOiAyNTAwLFxuICAgICAgICAgIGF2ZXJhZ2VWb2x1bWVQZXJTZXNzaW9uOiA1MDAsXG4gICAgICAgICAgZnJlcXVlbmN5QW5hbHlzaXM6IHtcbiAgICAgICAgICAgIGZyZXF1ZW5jeVNjb3JlOiA4MCxcbiAgICAgICAgICAgIGF2ZXJhZ2VEYXlzQmV0d2VlbjogM1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICByZWNvbW1lbmRhdGlvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICAgICAgbWVzc2FnZTogJ+ODhuOCueODiOaOqOWlqOS6i+mghScsXG4gICAgICAgICAgYWN0aW9uOiAn44OG44K544OI44Ki44Kv44K344On44OzJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSksXG4gICAgZ2V0RXhlcmNpc2VQcm9ncmVzczogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIHByb2dyZXNzTWV0cmljczoge1xuICAgICAgICB2b2x1bWVQcm9ncmVzc2lvbjogMTUsXG4gICAgICAgIGludGVuc2l0eVByb2dyZXNzaW9uOiAxMCxcbiAgICAgICAgY29uc2lzdGVuY3lTY29yZTogODUsXG4gICAgICAgIGF2ZXJhZ2VXZWlnaHQ6IDYwLFxuICAgICAgICBhdmVyYWdlUmVwczogMTAsXG4gICAgICAgIGF2ZXJhZ2VTZXRzOiAzXG4gICAgICB9LFxuICAgICAgcmVjb21tZW5kYXRpb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcmlvcml0eTogJ21lZGl1bScsXG4gICAgICAgICAgbWVzc2FnZTogJ+ODhuOCueODiOaOqOWlqOS6i+mghScsXG4gICAgICAgICAgYWN0aW9uOiAn44OG44K544OI44Ki44Kv44K344On44OzJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSksXG4gICAgZ2V0TXVzY2xlR3JvdXBQcm9ncmVzczogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIHRvdGFsU2Vzc2lvbnM6IDUsXG4gICAgICBmcmVxdWVuY3lBbmFseXNpczoge1xuICAgICAgICBmcmVxdWVuY3lTY29yZTogODAsXG4gICAgICAgIGF2ZXJhZ2VEYXlzQmV0d2VlbjogM1xuICAgICAgfSxcbiAgICAgIGV4ZXJjaXNlczoge1xuICAgICAgICBleGVyY2lzZUNvdW50czoge1xuICAgICAgICAgICfjg5njg7Pjg4Hjg5fjg6zjgrknOiAzLFxuICAgICAgICAgICfjg5fjg4Pjgrfjg6XjgqLjg4Pjg5cnOiAyXG4gICAgICAgIH0sXG4gICAgICAgIGV4ZXJjaXNlUHJvZ3Jlc3M6IHtcbiAgICAgICAgICAn44OZ44Oz44OB44OX44Os44K5Jzoge1xuICAgICAgICAgICAgd2VpZ2h0UHJvZ3Jlc3M6IDEwXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVjb21tZW5kYXRpb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcmlvcml0eTogJ2xvdycsXG4gICAgICAgICAgbWVzc2FnZTogJ+ODhuOCueODiOaOqOWlqOS6i+mghScsXG4gICAgICAgICAgYWN0aW9uOiAn44OG44K544OI44Ki44Kv44K344On44OzJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgfVxufSkpO1xuXG5qZXN0Lm1vY2soJy4uLy4uL2pzL3NlcnZpY2VzL3dvcmtvdXREYXRhU2VydmljZS5qcycsICgpID0+ICh7XG4gIHdvcmtvdXREYXRhU2VydmljZToge1xuICAgIGdldFdvcmtvdXRIaXN0b3J5OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoW10pLFxuICAgIGdldE11c2NsZUdyb3VwU3RhdHM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7fSksXG4gIH0sXG59KSk7XG5cbmplc3QubW9jaygnLi4vLi4vanMvdXRpbHMvaGVscGVycy5qcycsICgpID0+ICh7XG4gIHNhZmVHZXRFbGVtZW50OiBqZXN0LmZuKChpZCkgPT4ge1xuICAgIGNvbnN0IG1vY2tFbGVtZW50ID0geyBpZCwgaW5uZXJIVE1MOiAnJywgYXBwZW5kQ2hpbGQ6IGplc3QuZm4oKSwgcmVtb3ZlQ2hpbGQ6IGplc3QuZm4oKSB9O1xuICAgIHJldHVybiBtb2NrRWxlbWVudDtcbiAgfSksXG4gIHNob3dOb3RpZmljYXRpb246IGplc3QuZm4oKSxcbn0pKTtcblxuamVzdC5tb2NrKCcuLi8uLi9qcy91dGlscy9lcnJvckhhbmRsZXIuanMnLCAoKSA9PiAoe1xuICBoYW5kbGVFcnJvcjogamVzdC5mbigpLFxufSkpO1xuXG5qZXN0Lm1vY2soJy4uLy4uL2pzL2NvcmUvQmFzZVBhZ2UuanMnLCAoKSA9PiAoe1xuICBCYXNlUGFnZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgIHBhZ2VOYW1lOiAnUHJvZ3Jlc3NQYWdlJyxcbiAgICBoYW5kbGVFcnJvcjogamVzdC5mbigpLFxuICB9KSksXG59KSk7XG5cbmRlc2NyaWJlKCdQcm9ncmVzc1BhZ2UnLCAoKSA9PiB7XG4gIGxldCBQcm9ncmVzc1BhZ2U7XG4gIGxldCBwcm9ncmVzc1BhZ2U7XG4gIGxldCBtb2NrQ29udGFpbmVyO1xuXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIC8vIERPTeimgee0oOOBruODouODg+OCr1xuICAgIG1vY2tDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBtb2NrQ29udGFpbmVyLmlkID0gJ21haW4tY29udGVudCc7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChtb2NrQ29udGFpbmVyKTtcblxuICAgIC8vIFByb2dyZXNzUGFnZeOCr+ODqeOCueOCkuWLleeahOOBq+OCpOODs+ODneODvOODiFxuICAgIGNvbnN0IG1vZHVsZSA9IGF3YWl0IGltcG9ydCgnLi4vLi4vanMvcGFnZXMvcHJvZ3Jlc3NQYWdlLmpzJyk7XG4gICAgUHJvZ3Jlc3NQYWdlID0gbW9kdWxlLmRlZmF1bHQgfHwgbW9kdWxlLlByb2dyZXNzUGFnZTtcbiAgICBcbiAgICAvLyBQcm9ncmVzc1BhZ2Xjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJBcbiAgICBwcm9ncmVzc1BhZ2UgPSBuZXcgUHJvZ3Jlc3NQYWdlKCk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChtb2NrQ29udGFpbmVyKTtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+WIneacn+WMlicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgaW5pdGlhbGl6ZSBzdWNjZXNzZnVsbHknLCAoKSA9PiB7XG4gICAgICBleHBlY3QocHJvZ3Jlc3NQYWdlKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHByb2dyZXNzUGFnZS5wYWdlTmFtZSkudG9CZSgnUHJvZ3Jlc3NQYWdlJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGF2ZSByZXF1aXJlZCBwcm9wZXJ0aWVzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHByb2dyZXNzUGFnZS53b3Jrb3V0RGF0YSkudG9FcXVhbChbXSk7XG4gICAgICBleHBlY3QocHJvZ3Jlc3NQYWdlLnByb2dyZXNzaXZlT3ZlcmxvYWREYXRhKS50b0JlTnVsbCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn44K144Oz44OX44Or44OH44O844K/55Sf5oiQJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBnZW5lcmF0ZSBzYW1wbGUgd29ya291dCBkYXRhJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc2FtcGxlRGF0YSA9IHByb2dyZXNzUGFnZS5nZW5lcmF0ZVNhbXBsZVdvcmtvdXREYXRhKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHNhbXBsZURhdGEpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHNhbXBsZURhdGEubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBcbiAgICAgIC8vIOOCteODs+ODl+ODq+ODh+ODvOOCv+OBruani+mAoOOCkueiuuiqjVxuICAgICAgY29uc3QgZmlyc3RXb3Jrb3V0ID0gc2FtcGxlRGF0YVswXTtcbiAgICAgIGV4cGVjdChmaXJzdFdvcmtvdXQpLnRvSGF2ZVByb3BlcnR5KCdpZCcpO1xuICAgICAgZXhwZWN0KGZpcnN0V29ya291dCkudG9IYXZlUHJvcGVydHkoJ2RhdGUnKTtcbiAgICAgIGV4cGVjdChmaXJzdFdvcmtvdXQpLnRvSGF2ZVByb3BlcnR5KCdtdXNjbGVfZ3JvdXBzJyk7XG4gICAgICBleHBlY3QoZmlyc3RXb3Jrb3V0KS50b0hhdmVQcm9wZXJ0eSgnZXhlcmNpc2VzJyk7XG4gICAgICBleHBlY3QoZmlyc3RXb3Jrb3V0KS50b0hhdmVQcm9wZXJ0eSgnZHVyYXRpb24nKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBnZW5lcmF0ZSByZWFsaXN0aWMgd29ya291dCBwYXJhbWV0ZXJzJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc2FtcGxlRGF0YSA9IHByb2dyZXNzUGFnZS5nZW5lcmF0ZVNhbXBsZVdvcmtvdXREYXRhKCk7XG4gICAgICBcbiAgICAgIHNhbXBsZURhdGEuZm9yRWFjaCh3b3Jrb3V0ID0+IHtcbiAgICAgICAgaWYgKHdvcmtvdXQuZXhlcmNpc2VzICYmIHdvcmtvdXQuZXhlcmNpc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB3b3Jrb3V0LmV4ZXJjaXNlcy5mb3JFYWNoKGV4ZXJjaXNlID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChleGVyY2lzZS5zZXRzKS50b0JlTGVzc1RoYW5PckVxdWFsKDMpOyAvLyDjgrvjg4Pjg4jmlbDjga8z5Lul5LiLXG4gICAgICAgICAgICBleHBlY3QoZXhlcmNpc2UucmVwcykudG9CZUxlc3NUaGFuT3JFcXVhbCgxNSk7IC8vIOWbnuaVsOOBrzE15Lul5LiLXG4gICAgICAgICAgICBleHBlY3QoZXhlcmNpc2Uud2VpZ2h0KS50b0JlTGVzc1RoYW5PckVxdWFsKDEwMCk7IC8vIOmHjemHj+OBrzEwMOS7peS4i1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+ODl+ODreOCsOODrOODg+OCt+ODluODu+OCquODvOODkOODvOODreODvOODieWIhuaekCcsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgbG9hZCBwcm9ncmVzc2l2ZSBvdmVybG9hZCBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgcHJvZ3Jlc3NQYWdlLmxvYWRQcm9ncmVzc2l2ZU92ZXJsb2FkRGF0YSgpO1xuICAgICAgXG4gICAgICBleHBlY3QocHJvZ3Jlc3NQYWdlLnByb2dyZXNzaXZlT3ZlcmxvYWREYXRhKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHByb2dyZXNzUGFnZS5wcm9ncmVzc2l2ZU92ZXJsb2FkRGF0YS50b3RhbFdvcmtvdXRzKS50b0JlKDEwKTtcbiAgICAgIGV4cGVjdChwcm9ncmVzc1BhZ2UucHJvZ3Jlc3NpdmVPdmVybG9hZERhdGEub3ZlcmFsbE1ldHJpY3MudG90YWxWb2x1bWUpLnRvQmUoNTAwMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHByb2dyZXNzaXZlIG92ZXJsb2FkIGRhdGEgbG9hZGluZyBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IHByb2dyZXNzaXZlT3ZlcmxvYWRTZXJ2aWNlIH0gPSByZXF1aXJlKCcuLi8uLi9qcy9zZXJ2aWNlcy9wcm9ncmVzc2l2ZU92ZXJsb2FkU2VydmljZS5qcycpO1xuICAgICAgcHJvZ3Jlc3NpdmVPdmVybG9hZFNlcnZpY2UuZ2V0T3ZlcmFsbFByb2dyZXNzLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ1Rlc3QgZXJyb3InKSk7XG5cbiAgICAgIGNvbnN0IGNvbnNvbGVTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuICAgICAgXG4gICAgICBhd2FpdCBwcm9ncmVzc1BhZ2UubG9hZFByb2dyZXNzaXZlT3ZlcmxvYWREYXRhKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChjb25zb2xlU3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBjb25zb2xlU3B5Lm1vY2tSZXN0b3JlKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfjgqjjgq/jgrXjgrXjgqTjgrrliIbmnpAnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGNhbGN1bGF0ZSBleGVyY2lzZSBzdGF0cyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrRXhlcmNpc2VEYXRhID0gW1xuICAgICAgICB7XG4gICAgICAgICAgZGF0ZTogJzIwMjQtMDEtMDEnLFxuICAgICAgICAgIGV4ZXJjaXNlczogW1xuICAgICAgICAgICAgeyBuYW1lOiAn44OZ44Oz44OB44OX44Os44K5Jywgd2VpZ2h0OiA2MCwgcmVwczogMTAsIHNldHM6IDMgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ+ODl+ODg+OCt+ODpeOCouODg+ODlycsIHdlaWdodDogMCwgcmVwczogMTUsIHNldHM6IDIgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGF0ZTogJzIwMjQtMDEtMDInLFxuICAgICAgICAgIGV4ZXJjaXNlczogW1xuICAgICAgICAgICAgeyBuYW1lOiAn44OZ44Oz44OB44OX44Os44K5Jywgd2VpZ2h0OiA2NSwgcmVwczogMTAsIHNldHM6IDMgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgY29uc3Qgc3RhdHMgPSBwcm9ncmVzc1BhZ2UuY2FsY3VsYXRlRXhlcmNpc2VTdGF0cyhtb2NrRXhlcmNpc2VEYXRhLCAn44OZ44Oz44OB44OX44Os44K5Jyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChzdGF0cy50b3RhbFNlc3Npb25zKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KHN0YXRzLm1heFdlaWdodCkudG9CZSg2NSk7XG4gICAgICBleHBlY3Qoc3RhdHMuYXZnV2VpZ2h0KS50b0JlKDYzKTsgLy8gKDYwICsgNjUpIC8gMiA9IDYyLjUsIHJvdW5kZWQgdG8gNjNcbiAgICAgIGV4cGVjdChzdGF0cy50b3RhbFZvbHVtZSkudG9CZSgxODAwICsgMTk1MCk7IC8vICg2MCoxMCozKSArICg2NSoxMCozKVxuICAgICAgZXhwZWN0KHN0YXRzLnByb2dyZXNzUmF0ZSkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSBleGVyY2lzZSBkYXRhJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhdHMgPSBwcm9ncmVzc1BhZ2UuY2FsY3VsYXRlRXhlcmNpc2VTdGF0cyhbXSwgJ+ODmeODs+ODgeODl+ODrOOCuScpO1xuICAgICAgXG4gICAgICBleHBlY3Qoc3RhdHMudG90YWxTZXNzaW9ucykudG9CZSgwKTtcbiAgICAgIGV4cGVjdChzdGF0cy5tYXhXZWlnaHQpLnRvQmUoMCk7XG4gICAgICBleHBlY3Qoc3RhdHMuYXZnV2VpZ2h0KS50b0JlKDApO1xuICAgICAgZXhwZWN0KHN0YXRzLnRvdGFsVm9sdW1lKS50b0JlKDApO1xuICAgICAgZXhwZWN0KHN0YXRzLnByb2dyZXNzUmF0ZSkudG9CZSgwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+eti+iCiemDqOS9jeWIhuaekCcsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgY2FsY3VsYXRlIG11c2NsZSBncm91cCBhbmFseXNpcycsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tNdXNjbGVEYXRhID0gW1xuICAgICAgICB7XG4gICAgICAgICAgZGF0ZTogJzIwMjQtMDEtMDEnLFxuICAgICAgICAgIG11c2NsZV9ncm91cHM6IFsnY2hlc3QnXSxcbiAgICAgICAgICBleGVyY2lzZXM6IFtcbiAgICAgICAgICAgIHsgbmFtZTogJ+ODmeODs+ODgeODl+ODrOOCuScsIHdlaWdodDogNjAsIHJlcHM6IDEwLCBzZXRzOiAzIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgICBkdXJhdGlvbjogNDUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkYXRlOiAnMjAyNC0wMS0wMicsXG4gICAgICAgICAgbXVzY2xlX2dyb3VwczogWydjaGVzdCddLFxuICAgICAgICAgIGV4ZXJjaXNlczogW1xuICAgICAgICAgICAgeyBuYW1lOiAn44OX44OD44K344Ol44Ki44OD44OXJywgd2VpZ2h0OiAwLCByZXBzOiAxNSwgc2V0czogMiB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgZHVyYXRpb246IDMwLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgY29uc3QgYW5hbHlzaXMgPSBwcm9ncmVzc1BhZ2UuY2FsY3VsYXRlTXVzY2xlR3JvdXBBbmFseXNpcyhtb2NrTXVzY2xlRGF0YSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChhbmFseXNpcy50b3RhbFNlc3Npb25zKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KGFuYWx5c2lzLnRvdGFsVm9sdW1lKS50b0JlKDE4MDApOyAvLyA2MCoxMCozICsgMCoxNSoyXG4gICAgICBleHBlY3QoYW5hbHlzaXMuYXZlcmFnZVZvbHVtZVBlclNlc3Npb24pLnRvQmUoOTAwKTtcbiAgICAgIGV4cGVjdChhbmFseXNpcy50b3RhbER1cmF0aW9uKS50b0JlKDc1KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+ODrOODs+ODgOODquODs+OCsCcsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgcmVuZGVyIGV4ZXJjaXNlIGFuYWx5c2lzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250YWluZXIuaWQgPSAnZXhlcmNpc2UtYW5hbHlzaXMnO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICBhd2FpdCBwcm9ncmVzc1BhZ2UucmVuZGVyRXhlcmNpc2VBbmFseXNpc0Zyb21TZXJ2aWNlKCfjg5njg7Pjg4Hjg5fjg6zjgrknKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGNvbnRhaW5lci5pbm5lckhUTUwpLnRvQ29udGFpbign44OZ44Oz44OB44OX44Os44K5Jyk7XG4gICAgICBleHBlY3QoY29udGFpbmVyLmlubmVySFRNTCkudG9Db250YWluKCfliIbmnpDjgpLoqq3jgb/ovrzjgb/kuK0nKTtcbiAgICAgIFxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChjb250YWluZXIpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJlbmRlciBtdXNjbGUgZ3JvdXAgYW5hbHlzaXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRhaW5lci5pZCA9ICdtdXNjbGUtZ3JvdXAtYW5hbHlzaXMnO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICBhd2FpdCBwcm9ncmVzc1BhZ2UucmVuZGVyTXVzY2xlR3JvdXBBbmFseXNpcygnY2hlc3QnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGNvbnRhaW5lci5pbm5lckhUTUwpLnRvQ29udGFpbign6IO4Jyk7XG4gICAgICBleHBlY3QoY29udGFpbmVyLmlubmVySFRNTCkudG9Db250YWluKCfliIbmnpDjgpLoqq3jgb/ovrzjgb/kuK0nKTtcbiAgICAgIFxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChjb250YWluZXIpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn44Ko44Op44O844OP44Oz44OJ44Oq44Oz44KwJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgcmVuZGVyaW5nIGVycm9ycyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250YWluZXIuaWQgPSAnZXhlcmNpc2UtYW5hbHlzaXMnO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICAvLyDjg6Ljg4Pjgq/jgrXjg7zjg5Pjgrnjgafjgqjjg6njg7zjgpLnmbrnlJ/jgZXjgZvjgotcbiAgICAgIGNvbnN0IHsgcHJvZ3Jlc3NpdmVPdmVybG9hZFNlcnZpY2UgfSA9IHJlcXVpcmUoJy4uLy4uL2pzL3NlcnZpY2VzL3Byb2dyZXNzaXZlT3ZlcmxvYWRTZXJ2aWNlLmpzJyk7XG4gICAgICBwcm9ncmVzc2l2ZU92ZXJsb2FkU2VydmljZS5nZXRFeGVyY2lzZVByb2dyZXNzLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ1Rlc3QgZXJyb3InKSk7XG5cbiAgICAgIGF3YWl0IHByb2dyZXNzUGFnZS5yZW5kZXJFeGVyY2lzZUFuYWx5c2lzRnJvbVNlcnZpY2UoJ+ODmeODs+ODgeODl+ODrOOCuScpO1xuICAgICAgXG4gICAgICBleHBlY3QoY29udGFpbmVyLmlubmVySFRNTCkudG9Db250YWluKCfjgqjjgq/jgrXjgrXjgqTjgrrliIbmnpDjga7oqq3jgb/ovrzjgb/jgavlpLHmlZfjgZfjgb7jgZfjgZ8nKTtcbiAgICAgIFxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChjb250YWluZXIpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQTtBQUNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxpREFBaUQsRUFBRTtFQUFBLE9BQU87SUFDbEVDLDBCQUEwQixFQUFFO01BQzFCQyxrQkFBa0IsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQztRQUM5Q0MsYUFBYSxFQUFFLEVBQUU7UUFDakJDLGNBQWMsRUFBRTtVQUNkQyxXQUFXLEVBQUUsSUFBSTtVQUNqQkMsdUJBQXVCLEVBQUU7UUFDM0IsQ0FBQztRQUNEQyxnQkFBZ0IsRUFBRSxFQUFFO1FBQ3BCQyxtQkFBbUIsRUFBRTtVQUNuQkMsS0FBSyxFQUFFO1lBQ0xDLGFBQWEsRUFBRSxDQUFDO1lBQ2hCTCxXQUFXLEVBQUUsSUFBSTtZQUNqQk0sdUJBQXVCLEVBQUUsR0FBRztZQUM1QkMsaUJBQWlCLEVBQUU7Y0FDakJDLGNBQWMsRUFBRSxFQUFFO2NBQ2xCQyxrQkFBa0IsRUFBRTtZQUN0QjtVQUNGO1FBQ0YsQ0FBQztRQUNEQyxlQUFlLEVBQUUsQ0FDZjtVQUNFQyxRQUFRLEVBQUUsTUFBTTtVQUNoQkMsT0FBTyxFQUFFLFNBQVM7VUFDbEJDLE1BQU0sRUFBRTtRQUNWLENBQUM7TUFFTCxDQUFDLENBQUM7TUFDRkMsbUJBQW1CLEVBQUVuQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDO1FBQy9Da0IsZUFBZSxFQUFFO1VBQ2ZDLGlCQUFpQixFQUFFLEVBQUU7VUFDckJDLG9CQUFvQixFQUFFLEVBQUU7VUFDeEJmLGdCQUFnQixFQUFFLEVBQUU7VUFDcEJnQixhQUFhLEVBQUUsRUFB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