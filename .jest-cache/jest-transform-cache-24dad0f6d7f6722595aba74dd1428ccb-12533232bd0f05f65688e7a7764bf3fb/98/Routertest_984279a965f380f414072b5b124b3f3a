63f408efde3ab14166adf18692f30de0
"use strict";

var _router = require("../../js/utils/router.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); } // tests/unit/Router.test.js - Routerのテスト
describe('Router', function () {
  var testRouter;
  beforeEach(function () {
    testRouter = new _router.Router();
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  describe('constructor', function () {
    it('should initialize with default values', function () {
      expect(testRouter.routes).toBeDefined();
      expect(testRouter.currentRoute).toBeNull();
      expect(testRouter.pageCache).toBeDefined();
    });
  });
  describe('getCurrentPath', function () {
    it('should return current path', function () {
      // getCurrentPathはwindow.location.pathnameを返すだけなので、
      // 現在のパスをテストする
      var path = testRouter.getCurrentPath();
      expect(_typeof(path)).toBe('string');
      expect(path).toBeDefined();
    });
  });
  describe('navigateTo', function () {
    it('should navigate to path', function () {
      var mockPushState = jest.fn();
      Object.defineProperty(window.history, 'pushState', {
        value: mockPushState,
        writable: true
      });
      testRouter.navigateTo('/test');
      expect(mockPushState).toHaveBeenCalled();
    });
  });
  describe('goBack', function () {
    it('should go back in history', function () {
      var mockBack = jest.fn();
      Object.defineProperty(window.history, 'back', {
        value: mockBack,
        writable: true
      });
      testRouter.goBack();
      expect(mockBack).toHaveBeenCalled();
    });
  });
  describe('goForward', function () {
    it('should go forward in history', function () {
      var mockForward = jest.fn();
      Object.defineProperty(window.history, 'forward', {
        value: mockForward,
        writable: true
      });
      testRouter.goForward();
      expect(mockForward).toHaveBeenCalled();
    });
  });
  describe('clearCache', function () {
    it('should clear page cache', function () {
      testRouter.pageCache.set('test', 'content');
      expect(testRouter.pageCache.size).toBe(1);
      testRouter.clearCache();
      expect(testRouter.pageCache.size).toBe(0);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcm91dGVyIiwicmVxdWlyZSIsIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsImRlc2NyaWJlIiwidGVzdFJvdXRlciIsImJlZm9yZUVhY2giLCJSb3V0ZXIiLCJhZnRlckVhY2giLCJqZXN0IiwiY2xlYXJBbGxNb2NrcyIsIml0IiwiZXhwZWN0Iiwicm91dGVzIiwidG9CZURlZmluZWQiLCJjdXJyZW50Um91dGUiLCJ0b0JlTnVsbCIsInBhZ2VDYWNoZSIsInBhdGgiLCJnZXRDdXJyZW50UGF0aCIsInRvQmUiLCJtb2NrUHVzaFN0YXRlIiwiZm4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIndpbmRvdyIsImhpc3RvcnkiLCJ2YWx1ZSIsIndyaXRhYmxlIiwibmF2aWdhdGVUbyIsInRvSGF2ZUJlZW5DYWxsZWQiLCJtb2NrQmFjayIsImdvQmFjayIsIm1vY2tGb3J3YXJkIiwiZ29Gb3J3YXJkIiwic2V0Iiwic2l6ZSIsImNsZWFyQ2FjaGUiXSwic291cmNlcyI6WyJSb3V0ZXIudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0ZXN0cy91bml0L1JvdXRlci50ZXN0LmpzIC0gUm91dGVy44Gu44OG44K544OIXG5cbmltcG9ydCB7IFJvdXRlciwgcm91dGVyIH0gZnJvbSAnLi4vLi4vanMvdXRpbHMvcm91dGVyLmpzJztcblxuZGVzY3JpYmUoJ1JvdXRlcicsICgpID0+IHtcbiAgbGV0IHRlc3RSb3V0ZXI7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgdGVzdFJvdXRlciA9IG5ldyBSb3V0ZXIoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NvbnN0cnVjdG9yJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIGRlZmF1bHQgdmFsdWVzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHRlc3RSb3V0ZXIucm91dGVzKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHRlc3RSb3V0ZXIuY3VycmVudFJvdXRlKS50b0JlTnVsbCgpO1xuICAgICAgZXhwZWN0KHRlc3RSb3V0ZXIucGFnZUNhY2hlKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0Q3VycmVudFBhdGgnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gY3VycmVudCBwYXRoJywgKCkgPT4ge1xuICAgICAgLy8gZ2V0Q3VycmVudFBhdGjjga93aW5kb3cubG9jYXRpb24ucGF0aG5hbWXjgpLov5TjgZnjgaDjgZHjgarjga7jgafjgIFcbiAgICAgIC8vIOePvuWcqOOBruODkeOCueOCkuODhuOCueODiOOBmeOCi1xuICAgICAgY29uc3QgcGF0aCA9IHRlc3RSb3V0ZXIuZ2V0Q3VycmVudFBhdGgoKTtcbiAgICAgIGV4cGVjdCh0eXBlb2YgcGF0aCkudG9CZSgnc3RyaW5nJyk7XG4gICAgICBleHBlY3QocGF0aCkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ25hdmlnYXRlVG8nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBuYXZpZ2F0ZSB0byBwYXRoJywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1B1c2hTdGF0ZSA9IGplc3QuZm4oKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuaGlzdG9yeSwgJ3B1c2hTdGF0ZScsIHtcbiAgICAgICAgdmFsdWU6IG1vY2tQdXNoU3RhdGUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgfSk7XG5cbiAgICAgIHRlc3RSb3V0ZXIubmF2aWdhdGVUbygnL3Rlc3QnKTtcbiAgICAgIGV4cGVjdChtb2NrUHVzaFN0YXRlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnb0JhY2snLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnbyBiYWNrIGluIGhpc3RvcnknLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrQmFjayA9IGplc3QuZm4oKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuaGlzdG9yeSwgJ2JhY2snLCB7XG4gICAgICAgIHZhbHVlOiBtb2NrQmFjayxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgdGVzdFJvdXRlci5nb0JhY2soKTtcbiAgICAgIGV4cGVjdChtb2NrQmFjaykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ29Gb3J3YXJkJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZ28gZm9yd2FyZCBpbiBoaXN0b3J5JywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0ZvcndhcmQgPSBqZXN0LmZuKCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93Lmhpc3RvcnksICdmb3J3YXJkJywge1xuICAgICAgICB2YWx1ZTogbW9ja0ZvcndhcmQsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgfSk7XG5cbiAgICAgIHRlc3RSb3V0ZXIuZ29Gb3J3YXJkKCk7XG4gICAgICBleHBlY3QobW9ja0ZvcndhcmQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NsZWFyQ2FjaGUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjbGVhciBwYWdlIGNhY2hlJywgKCkgPT4ge1xuICAgICAgdGVzdFJvdXRlci5wYWdlQ2FjaGUuc2V0KCd0ZXN0JywgJ2NvbnRlbnQnKTtcbiAgICAgIGV4cGVjdCh0ZXN0Um91dGVyLnBhZ2VDYWNoZS5zaXplKS50b0JlKDEpO1xuXG4gICAgICB0ZXN0Um91dGVyLmNsZWFyQ2FjaGUoKTtcbiAgICAgIGV4cGVjdCh0ZXN0Um91dGVyLnBhZ2VDYWNoZS5zaXplKS50b0JlKDApO1xuICAg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