f17b71202c7c6f32da14e07d97684662
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chartService = void 0;
var _errorHandler = require("../utils/errorHandler.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * チャートサービス
 * Chart.jsを使用した進捗グラフの生成・管理を行う
 */
var ChartService = /*#__PURE__*/function () {
  function ChartService() {
    _classCallCheck(this, ChartService);
    this.charts = new Map(); // アクティブなチャートインスタンスを管理
    this.defaultColors = {
      primary: '#3B82F6',
      secondary: '#10B981',
      accent: '#F59E0B',
      danger: '#EF4444',
      success: '#22C55E',
      warning: '#F97316'
    };
  }

  /**
  * 既存のチャートを破棄
  * @param {string} chartId - チャートID
  */
  return _createClass(ChartService, [{
    key: "destroyChart",
    value: function destroyChart(chartId) {
      try {
        if (this.charts.has(chartId)) {
          this.charts.get(chartId).destroy();
          this.charts["delete"](chartId);
        }
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ChartService.destroyChart'
        });
      }
    }

    /**
    * 1RM推移グラフを作成
    * @param {string} canvasId - キャンバス要素のID
    * @param {Array} data - 進捗データ
    * @param {Object} options - オプション設定
    * @returns {Object} チャートインスタンス
    */
  }, {
    key: "createOneRMChart",
    value: function createOneRMChart(canvasId, data) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      try {
        // 既存のチャートを破棄
        this.destroyChart(canvasId);
        var canvas = document.getElementById(canvasId);
        if (!canvas) {
          throw new Error("Canvas element with id '".concat(canvasId, "' not found"));
        }
        var ctx = canvas.getContext('2d');

        // データの準備
        var labels = data.map(function (d) {
          return new Date(d.workout_date).toLocaleDateString('ja-JP', {
            month: 'short',
            day: 'numeric'
          });
        });
        var oneRMValues = data.map(function (d) {
          return d.one_rm;
        });
        var chartConfig = {
          type: 'line',
          data: {
            labels: labels,
            datasets: [{
              label: '1RM (kg)',
              data: oneRMValues,
              borderColor: options.color || this.defaultColors.primary,
              backgroundColor: "".concat(options.color || this.defaultColors.primary, "20"),
              borderWidth: 3,
              fill: true,
              tension: 0.4,
              pointRadius: 6,
              pointHoverRadius: 8,
              pointBackgroundColor: options.color || this.defaultColors.primary,
              pointBorderColor: '#ffffff',
              pointBorderWidth: 2
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
              intersect: false,
              mode: 'index'
            },
            plugins: {
              title: {
                display: true,
                text: options.title || '1RM推移',
                font: {
                  size: 16,
                  weight: 'bold'
                },
                color: '#374151'
              },
              legend: {
                display: false
              },
              tooltip: {
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                titleColor: '#ffffff',
                bodyColor: '#ffffff',
                borderColor: options.color || this.defaultColors.primary,
                borderWidth: 1,
                cornerRadius: 8,
                displayColors: false,
                callbacks: {
                  title: function title(context) {
                    return "\u65E5\u4ED8: ".concat(context[0].label);
                  },
                  label: function label(context) {
                    return "1RM: ".concat(context.parsed.y.toFixed(1), " kg");
                  }
                }
              }
            },
            scales: {
              x: {
                display: true,
                title: {
                  display: true,
                  text: '日付',
                  color: '#6B7280',
                  font: {
                    size: 12
                  }
                },
                grid: {
                  display: false
                },
                ticks: {
                  color: '#6B7280',
                  maxTicksLimit: 8
                }
              },
              y: {
                display: true,
                title: {
                  display: true,
                  text: '1RM (kg)',
                  color: '#6B7280',
                  font: {
                    size: 12
                  }
                },
                grid: {
                  color: '#E5E7EB',
                  borderDash: [2, 2]
                },
                ticks: {
                  color: '#6B7280',
                  callback: function callback(value) {
                    return "".concat(value.toFixed(1), " kg");
                  }
                },
                beginAtZero: false
              }
            },
            elements: {
              point: {
                hoverBackgroundColor: '#ffffff'
              }
            }
          }
        };
        var chart = new Chart(ctx, chartConfig);
        this.charts.set(canvasId, chart);
        return chart;
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ChartService.createOneRMChart'
        });
        return null;
      }
    }

    /**
    * 重量推移グラフを作成
    * @param {string} canvasId - キャンバス要素のID
    * @param {Array} data - 進捗データ
    * @param {Object} options - オプション設定
    * @returns {Object} チャートインスタンス
    */
  }, {
    key: "createWeightChart",
    value: function createWeightChart(canvasId, data) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      try {
        this.destroyChart(canvasId);
        var canvas = document.getElementById(canvasId);
        if (!canvas) {
          throw new Error("Canvas element with id '".concat(canvasId, "' not found"));
        }
        var ctx = canvas.getContext('2d');

        // データの準備
        var labels = data.map(function (d) {
          return new Date(d.workout_date).toLocaleDateString('ja-JP', {
            month: 'short',
            day: 'numeric'
          });
        });
        var maxWeights = data.map(function (d) {
          return Math.max.apply(Math, _toConsumableArray(d.weights));
        });
        var avgWeights = data.map(function (d) {
          return d.weights.reduce(function (sum, w) {
            return sum + w;
          }, 0) / d.weights.length;
        });
        var chartConfig = {
          type: 'line',
          data: {
            labels: labels,
            datasets: [{
              label: '最大重量',
              data: maxWeights,
              borderColor: this.defaultColors.primary,
              backgroundColor: "".concat(this.defaultColors.primary, "20"),
              borderWidth: 2,
              fill: false,
              tension: 0.4,
              pointRadius: 4,
              pointHoverRadius: 6
            }, {
              label: '平均重量',
              data: avgWeights,
              borderColor: this.defaultColors.secondary,
              backgroundColor: "".concat(this.defaultColors.secondary, "20"),
              borderWidth: 2,
              fill: false,
              tension: 0.4,
              pointRadius: 4,
              pointHoverRadius: 6,
              borderDash: [5, 5]
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
              intersect: false,
              mode: 'index'
            },
            plugins: {
              title: {
                display: true,
                text: options.title || '重量推移',
                font: {
                  size: 16,
                  weight: 'bold'
                },
                color: '#374151'
              },
              legend: {
                display: true,
                position: 'top',
                labels: {
                  usePointStyle: true,
                  padding: 20,
                  color: '#374151'
                }
              },
              tooltip: {
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                titleColor: '#ffffff',
                bodyColor: '#ffffff',
                borderColor: this.defaultColors.primary,
                borderWidth: 1,
                cornerRadius: 8,
                callbacks: {
                  title: function title(context) {
                    return "\u65E5\u4ED8: ".concat(context[0].label);
                  },
                  label: function label(context) {
                    return "".concat(context.dataset.label, ": ").concat(context.parsed.y.toFixed(1), " kg");
                  }
                }
              }
            },
            scales: {
              x: {
                display: true,
                title: {
                  display: true,
                  text: '日付',
                  color: '#6B7280'
                },
                grid: {
                  display: false
                },
                ticks: {
                  color: '#6B7280',
                  maxTicksLimit: 8
                }
              },
              y: {
                display: true,
                title: {
                  display: true,
                  text: '重量 (kg)',
                  color: '#6B7280'
                },
                grid: {
                  color: '#E5E7EB',
                  borderDash: [2, 2]
                },
                ticks: {
                  color: '#6B7280',
                  callback: function callback(value) {
                    return "".concat(value.toFixed(1), " kg");
                  }
                },
                beginAtZero: false
              }
            }
          }
        };
        var chart = new Chart(ctx, chartConfig);
        this.charts.set(canvasId, chart);
        return chart;
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ChartService.createWeightChart'
        });
        return null;
      }
    }

    /**
    * ボリューム推移グラフを作成
    * @param {string} canvasId - キャンバス要素のID
    * @param {Array} data - 進捗データ
    * @param {Object} options - オプション設定
    * @returns {Object} チャートインスタンス
    */
  }, {
    key: "createVolumeChart",
    value: function createVolumeChart(canvasId, data) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      try {
        this.destroyChart(canvasId);
        var canvas = document.getElementById(canvasId);
        if (!canvas) {
          throw new Error("Canvas element with id '".concat(canvasId, "' not found"));
        }
        var ctx = canvas.getContext('2d');

        // ボリューム計算（重量 × 回数の合計）
        var labels = data.map(function (d) {
          return new Date(d.workout_date).toLocaleDateString('ja-JP', {
            month: 'short',
            day: 'numeric'
          });
        });
        var volumes = data.map(function (d) {
          return d.weights.reduce(function (sum, weight, index) {
            return sum + weight * d.reps[index];
          }, 0);
        });
        var chartConfig = {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [{
              label: 'トレーニングボリューム',
              data: volumes,
              backgroundColor: "".concat(options.color || this.defaultColors.accent, "80"),
              borderColor: options.color || this.defaultColors.accent,
              borderWidth: 1,
              borderRadius: 4,
              borderSkipped: false
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              title: {
                display: true,
                text: options.title || 'トレーニングボリューム推移',
                font: {
                  size: 16,
                  weight: 'bold'
                },
                color: '#374151'
              },
              legend: {
                display: false
              },
              tooltip: {
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                titleColor: '#ffffff',
                bodyColor: '#ffffff',
                borderColor: options.color || this.defaultColors.accent,
                borderWidth: 1,
                cornerRadius: 8,
                callbacks: {
                  title: function title(context) {
                    return "\u65E5\u4ED8: ".concat(context[0].label);
                  },
                  label: function label(context) {
                    return "\u30DC\u30EA\u30E5\u30FC\u30E0: ".concat(context.parsed.y.toFixed(0), " kg");
                  }
                }
              }
            },
            scales: {
              x: {
                display: true,
                title: {
                  display: true,
                  text: '日付',
                  color: '#6B7280'
                },
                grid: {
                  display: false
                },
                ticks: {
                  color: '#6B7280',
                  maxTicksLimit: 8
                }
              },
              y: {
                display: true,
                title: {
                  display: true,
                  text: 'ボリューム (kg)',
                  color: '#6B7280'
                },
                grid: {
                  color: '#E5E7EB',
                  borderDash: [2, 2]
                },
                ticks: {
                  color: '#6B7280',
                  callback: function callback(value) {
                    return "".concat(value.toFixed(0), " kg");
                  }
                },
                beginAtZero: true
              }
            }
          }
        };
        var chart = new Chart(ctx, chartConfig);
        this.charts.set(canvasId, chart);
        return chart;
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ChartService.createVolumeChart'
        });
        return null;
      }
    }

    /**
    * 目標達成度グラフを作成
    * @param {string} canvasId - キャンバス要素のID
    * @param {Array} goalsData - 目標データ
    * @param {Object} options - オプション設定
    * @returns {Object} チャートインスタンス
    */
  }, {
    key: "createGoalProgressChart",
    value: function createGoalProgressChart(canvasId, goalsData) {
      var _this = this;
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      try {
        this.destroyChart(canvasId);
        var canvas = document.getElementById(canvasId);
        if (!canvas) {
          throw new Error("Canvas element with id '".concat(canvasId, "' not found"));
        }
        var ctx = canvas.getContext('2d');
        var labels = goalsData.map(function (g) {
          return g.description || "".concat(g.goal_type, "\u76EE\u6A19");
        });
        var progressValues = goalsData.map(function (g) {
          return g.progress_percentage;
        });
        var colors = goalsData.map(function (g) {
          return g.progress_percentage >= 100 ? _this.defaultColors.success : g.progress_percentage >= 75 ? _this.defaultColors.warning : _this.defaultColors.primary;
        });
        var chartConfig = {
          type: 'doughnut',
          data: {
            labels: labels,
            datasets: [{
              data: progressValues,
              backgroundColor: colors.map(function (c) {
                return "".concat(c, "80");
              }),
              borderColor: colors,
              borderWidth: 2,
              hoverBackgroundColor: colors,
              hoverBorderWidth: 3
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              title: {
                display: true,
                text: options.title || '目標達成度',
                font: {
                  size: 16,
                  weight: 'bold'
                },
                color: '#374151'
              },
              legend: {
                display: true,
                position: 'bottom',
                labels: {
                  usePointStyle: true,
                  padding: 20,
                  color: '#374151'
                }
              },
              tooltip: {
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                titleColor: '#ffffff',
                bodyColor: '#ffffff',
                borderWidth: 1,
                cornerRadius: 8,
                callbacks: {
                  label: function label(context) {
                    return "".concat(context.label, ": ").concat(context.parsed.toFixed(1), "%");
                  }
                }
              }
            },
            cutout: '60%'
          }
        };
        var chart = new Chart(ctx, chartConfig);
        this.charts.set(canvasId, chart);
        return chart;
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ChartService.createGoalProgressChart'
        });
        return null;
      }
    }

    /**
    * 週間比較グラフを作成
    * @param {string} canvasId - キャンバス要素のID
    * @param {Array} weeklyData - 週間データ
    * @param {Object} options - オプション設定
    * @returns {Object} チャートインスタンス
    */
  }, {
    key: "createWeeklyComparisonChart",
    value: function createWeeklyComparisonChart(canvasId, weeklyData) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      try {
        this.destroyChart(canvasId);
        var canvas = document.getElementById(canvasId);
        if (!canvas) {
          throw new Error("Canvas element with id '".concat(canvasId, "' not found"));
        }
        var ctx = canvas.getContext('2d');
        var labels = weeklyData.map(function (w) {
          var date = new Date(w.weekStart);
          return "".concat(date.getMonth() + 1, "/").concat(date.getDate(), "\u9031");
        });
        var chartConfig = {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [{
              label: '最大重量',
              data: weeklyData.map(function (w) {
                return w.maxWeight;
              }),
              backgroundColor: "".concat(this.defaultColors.primary, "80"),
              borderColor: this.defaultColors.primary,
              borderWidth: 1
            }, {
              label: '最大1RM',
              data: weeklyData.map(function (w) {
                return w.maxOneRM;
              }),
              backgroundColor: "".concat(this.defaultColors.secondary, "80"),
              borderColor: this.defaultColors.secondary,
              borderWidth: 1
            }, {
              label: 'セッション数',
              data: weeklyData.map(function (w) {
                return w.sessions.length;
              }),
              backgroundColor: "".concat(this.defaultColors.accent, "80"),
              borderColor: this.defaultColors.accent,
              borderWidth: 1,
              yAxisID: 'y1'
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
              intersect: false,
              mode: 'index'
            },
            plugins: {
              title: {
                display: true,
                text: options.title || '週間パフォーマンス比較',
                font: {
                  size: 16,
                  weight: 'bold'
                },
                color: '#374151'
              },
              legend: {
                display: true,
                position: 'top',
                labels: {
                  usePointStyle: true,
                  padding: 20,
                  color: '#374151'
                }
              },
              tooltip: {
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                titleColor: '#ffffff',
                bodyColor: '#ffffff',
                borderWidth: 1,
                cornerRadius: 8
              }
            },
            scales: {
              x: {
                display: true,
                title: {
                  display: true,
                  text: '週',
                  color: '#6B7280'
                },
                grid: {
                  display: false
                },
                ticks: {
                  color: '#6B7280'
                }
              },
              y: {
                type: 'linear',
                display: true,
                position: 'left',
                title: {
                  display: true,
                  text: '重量 (kg)',
                  color: '#6B7280'
                },
                grid: {
                  color: '#E5E7EB',
                  borderDash: [2, 2]
                },
                ticks: {
                  color: '#6B7280'
                }
              },
              y1: {
                type: 'linear',
                display: true,
                position: 'right',
                title: {
                  display: true,
                  text: 'セッション数',
                  color: '#6B7280'
                },
                grid: {
                  drawOnChartArea: false
                },
                ticks: {
                  color: '#6B7280'
                }
              }
            }
          }
        };
        var chart = new Chart(ctx, chartConfig);
        this.charts.set(canvasId, chart);
        return chart;
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ChartService.createWeeklyComparisonChart'
        });
        return null;
      }
    }

    /**
    * すべてのチャートを破棄
    */
  }, {
    key: "destroyAllCharts",
    value: function destroyAllCharts() {
      try {
        this.charts.forEach(function (chart) {
          chart.destroy();
        });
        this.charts.clear();
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ChartService.destroyAllCharts'
        });
      }
    }

    /**
    * チャートのリサイズ
    * @param {string} chartId - チャートID
    */
  }, {
    key: "resizeChart",
    value: function resizeChart(chartId) {
      try {
        if (this.charts.has(chartId)) {
          this.charts.get(chartId).resize();
        }
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ChartService.resizeChart'
        });
      }
    }

    /**
    * 進捗チャートを作成
    * @param {string} canvasId - キャンバス要素のID
    * @param {Array} data - 進捗データ
    * @param {Object} options - オプション設定
    * @returns {Object} チャートインスタンス
    */
  }, {
    key: "createProgressChart",
    value: function createProgressChart(canvasId, data) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      try {
        this.destroyChart(canvasId);
        var canvas = document.getElementById(canvasId);
        if (!canvas) {
          throw new Error("Canvas element with id '".concat(canvasId, "' not found"));
        }
        var chart = new Chart(canvas, {
          type: 'line',
          data: {
            labels: data.map(function (item) {
              return item.date;
            }),
            datasets: [{
              label: '進捗',
              data: data.map(function (item) {
                return item.value;
              }),
              borderColor: this.defaultColors.primary,
              backgroundColor: "".concat(this.defaultColors.primary, "20"),
              tension: 0.4
            }]
          },
          options: _objectSpread({
            responsive: true,
            maintainAspectRatio: false
          }, options)
        });
        this.charts.set(canvasId, chart);
        return chart;
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ChartService.createProgressChart'
        });
        return null;
      }
    }

    /**
    * 筋肉部位チャートを作成
    * @param {string} canvasId - キャンバス要素のID
    * @param {Array} data - 筋肉部位データ
    * @param {Object} options - オプション設定
    * @returns {Object} チャートインスタンス
    */
  }, {
    key: "createMuscleGroupChart",
    value: function createMuscleGroupChart(canvasId, data) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      try {
        this.destroyChart(canvasId);
        var canvas = document.getElementById(canvasId);
        if (!canvas) {
          throw new Error("Canvas element with id '".concat(canvasId, "' not found"));
        }
        var chart = new Chart(canvas, {
          type: 'doughnut',
          data: {
            labels: data.map(function (item) {
              return item.name;
            }),
            datasets: [{
              data: data.map(function (item) {
                return item.value;
              }),
              backgroundColor: [this.defaultColors.primary, this.defaultColors.secondary, this.defaultColors.accent, this.defaultColors.danger, this.defaultColors.success, this.defaultColors.warning]
            }]
          },
          options: _objectSpread({
            responsive: true,
            maintainAspectRatio: false
          }, options)
        });
        this.charts.set(canvasId, chart);
        return chart;
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ChartService.createMuscleGroupChart'
        });
        return null;
      }
    }

    /**
    * 頻度チャートを作成
    * @param {string} canvasId - キャンバス要素のID
    * @param {Array} data - 頻度データ
    * @param {Object} options - オプション設定
    * @returns {Object} チャートインスタンス
    */
  }, {
    key: "createFrequencyChart",
    value: function createFrequencyChart(canvasId, data) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      try {
        this.destroyChart(canvasId);
        var canvas = document.getElementById(canvasId);
        if (!canvas) {
          throw new Error("Canvas element with id '".concat(canvasId, "' not found"));
        }
        var chart = new Chart(canvas, {
          type: 'bar',
          data: {
            labels: data.map(function (item) {
              return item.name;
            }),
            datasets: [{
              label: '頻度',
              data: data.map(function (item) {
                return item.value;
              }),
              backgroundColor: this.defaultColors.primary,
              borderColor: this.defaultColors.primary,
              borderWidth: 1
            }]
          },
          options: _objectSpread({
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }, options)
        });
        this.charts.set(canvasId, chart);
        return chart;
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ChartService.createFrequencyChart'
        });
        return null;
      }
    }

    /**
    * チャートを更新
    * @param {string} chartId - チャートID
    * @param {Object} newData - 新しいデータ
    */
  }, {
    key: "updateChart",
    value: function updateChart(chartId, newData) {
      try {
        if (this.charts.has(chartId)) {
          var chart = this.charts.get(chartId);
          chart.data = newData;
          chart.update();
        }
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ChartService.updateChart'
        });
      }
    }

    /**
    * チャートを取得
    * @param {string} chartId - チャートID
    * @returns {Object|null} チャートインスタンス
    */
  }, {
    key: "getChart",
    value: function getChart(chartId) {
      try {
        return this.charts.get(chartId) || null;
      } catch (error) {
        (0, _errorHandler.handleError)(error, {
          context: 'ChartService.getChart'
        });
        return null;
      }
    }
  }]);
}(); // シングルトンインスタンスをエクスポート
var chartService = exports.chartService = new ChartService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,