f06f8e94cbf476d2983c4cdf5b631d46
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ERROR_TYPES = void 0;
exports.clearErrorLogs = clearErrorLogs;
exports.determineErrorType = determineErrorType;
exports.executeWithRetry = executeWithRetry;
exports.getErrorLogs = getErrorLogs;
exports.getErrorMessage = getErrorMessage;
exports.handleError = handleError;
exports.isOffline = isOffline;
exports.logErrorToStorage = logErrorToStorage;
exports.showUserFriendlyError = showUserFriendlyError;
exports.watchOnlineStatus = watchOnlineStatus;
var _helpers = require("./helpers.js");
var _ERROR_MESSAGES;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // errorHandler.js - 統一されたエラーハンドリングシステム
/**
 * エラータイプの定数
 */
var ERROR_TYPES = exports.ERROR_TYPES = {
  NETWORK: 'NETWORK',
  CONNECTION: 'CONNECTION',
  AUTH: 'AUTH',
  DATABASE: 'DATABASE',
  VALIDATION: 'VALIDATION',
  STORAGE: 'STORAGE',
  PERMISSION: 'PERMISSION',
  QUOTA: 'QUOTA',
  TIMEOUT: 'TIMEOUT',
  SYNC: 'SYNC',
  UNKNOWN: 'UNKNOWN'
};

/**
 * エラーメッセージの日本語化マップ（解決方法付き）
 */
var ERROR_MESSAGES = (_ERROR_MESSAGES = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ERROR_MESSAGES, ERROR_TYPES.NETWORK, {
  "default": {
    message: 'インターネット接続に問題があります',
    description: 'ネットワークエラーが発生しました',
    solutions: ['Wi-Fiまたはモバイルデータ接続を確認してください', 'ルーターの電源を一度切って再起動してください', 'しばらく時間をおいて再試行してください'],
    severity: 'warning'
  },
  offline: {
    message: 'オフライン状態です',
    description: 'インターネット接続が切断されています',
    solutions: ['Wi-Fi設定を確認してください', 'モバイルデータがオンになっているか確認してください', '機内モードがオフになっているか確認してください'],
    severity: 'error'
  },
  timeout: {
    message: '通信がタイムアウトしました',
    description: 'サーバーからの応答に時間がかかりすぎています',
    solutions: ['通信環境の良い場所で再試行してください', 'アプリを再起動してください', 'しばらく時間をおいて再試行してください'],
    severity: 'warning'
  },
  server_error: {
    message: 'サーバーに一時的な問題があります',
    description: 'サーバーエラーが発生しました（5xx系エラー）',
    solutions: ['しばらく時間をおいて再試行してください', 'アプリを再起動してください', '問題が続く場合はサポートにお問い合わせください'],
    severity: 'error'
  }
}), ERROR_TYPES.CONNECTION, {
  "default": {
    message: 'データベース接続に問題があります',
    description: '接続エラーが発生しました',
    solutions: ['インターネット接続を確認してください', 'アプリを再起動してください', 'しばらく時間をおいて再試行してください'],
    severity: 'warning'
  },
  lost: {
    message: '接続が切断されました',
    description: 'データベースとの接続が失われました',
    solutions: ['オフラインモードで動作します', '接続復旧時に自動同期されます', 'インターネット接続を確認してください'],
    severity: 'warning'
  },
  restored: {
    message: '接続が復旧しました',
    description: 'データベース接続が回復しました',
    solutions: ['データを同期中です', '通常の操作が可能になりました'],
    severity: 'success'
  },
  failed: {
    message: 'データベースに接続できません',
    description: '接続の確立に失敗しました',
    solutions: ['インターネット接続を確認してください', 'サーバーの状態を確認してください', 'しばらく時間をおいて再試行してください'],
    severity: 'error'
  },
  unstable: {
    message: '接続が不安定です',
    description: 'データベース接続が不安定な状態です',
    solutions: ['データ保存に時間がかかる場合があります', '通信環境の良い場所に移動してください', '重要なデータは手動で保存してください'],
    severity: 'warning'
  }
}), ERROR_TYPES.SYNC, {
  "default": {
    message: 'データ同期に問題があります',
    description: 'オフラインデータの同期に失敗しました',
    solutions: ['インターネット接続を確認してください', '手動で同期を再試行してください', 'データが失われる可能性があります'],
    severity: 'error'
  },
  queue_full: {
    message: '同期キューが満杯です',
    description: 'オフラインデータが蓄積されすぎています',
    solutions: ['オンライン状態で同期を完了してください', '不要なデータを削除してください', 'アプリを再起動してください'],
    severity: 'warning'
  },
  partial_failure: {
    message: '一部のデータ同期に失敗しました',
    description: '同期処理が部分的に失敗しました',
    solutions: ['失敗したデータは再試行されます', '手動で同期を再実行してください', 'データの整合性を確認してください'],
    severity: 'warning'
  }
}), ERROR_TYPES.AUTH, {
  "default": {
    message: 'ログインが必要です',
    description: '認証エラーが発生しました',
    solutions: ['再度ログインしてください', 'パスワードを忘れた場合はリセットしてください', 'アカウントをお持ちでない場合は新規登録してください'],
    severity: 'error'
  },
  invalid_credentials: {
    message: 'メールアドレスまたはパスワードが正しくありません',
    description: 'ログイン情報が一致しません',
    solutions: ['メールアドレスのスペルを確認してください', 'パスワードの大文字・小文字を確認してください', 'パスワードリセット機能をご利用ください'],
    severity: 'error'
  },
  email_not_confirmed: {
    message: 'メールアドレスの確認が必要です',
    description: 'アカウントのメール確認が完了していません',
    solutions: ['メールボックスで確認メールをチェックしてください', 'スパムフォルダも確認してください', '確認メールの再送信をリクエストしてください'],
    severity: 'warning'
  },
  user_not_found: {
    message: 'ユーザーが見つかりません',
    description: '指定されたアカウントが存在しません',
    solutions: ['メールアドレスを正しく入力してください', '新規アカウントを作成してください', 'サポートにお問い合わせください'],
    severity: 'error'
  },
  session_expired: {
    message: 'セッションの有効期限が切れました',
    description: 'ログイン状態が期限切れです',
    solutions: ['再度ログインしてください', '「ログイン状態を保持」にチェックを入れてください', 'ブラウザのCookieを有効にしてください'],
    severity: 'warning'
  },
  signup_disabled: {
    message: '新規登録は一時的に無効です',
    description: 'アカウント作成機能が停止中です',
    solutions: ['しばらく時間をおいて再試行してください', '既存のアカウントでログインしてください', 'サポートにお問い合わせください'],
    severity: 'info'
  },
  email_already_registered: {
    message: 'このメールアドレスは既に使用されています',
    description: 'アカウントが既に存在します',
    solutions: ['ログインページからサインインしてください', 'パスワードを忘れた場合はリセットしてください', '別のメールアドレスで登録してください'],
    severity: 'warning'
  }
}), ERROR_TYPES.DATABASE, {
  "default": {
    message: 'データの処理に失敗しました',
    description: 'データベースエラーが発生しました',
    solutions: ['しばらく時間をおいて再試行してください', 'アプリを再起動してください', '問題が続く場合はサポートにお問い合わせください'],
    severity: 'error'
  },
  connection_failed: {
    message: 'データベースに接続できません',
    description: 'サーバーとの接続に失敗しました',
    solutions: ['インターネット接続を確認してください', 'しばらく時間をおいて再試行してください', 'アプリを再起動してください'],
    severity: 'error'
  },
  relationship_error: {
    message: 'データベースの関係性エラーが発生しました',
    description: 'テーブル間の関係性が見つかりません',
    solutions: ['アプリを再起動してください', 'しばらく時間をおいて再試行してください', '問題が続く場合はサポートにお問い合わせください'],
    severity: 'warning'
  },
  query_failed: {
    message: 'データの取得に失敗しました',
    description: 'データベースからの情報取得でエラーが発生しました',
    solutions: ['ページを再読み込みしてください', 'フィルターや検索条件を変更してください', 'しばらく時間をおいて再試行してください'],
    severity: 'warning'
  },
  insert_failed: {
    message: 'データの保存に失敗しました',
    description: '新しい情報の保存でエラーが発生しました',
    solutions: ['入力内容を確認してください', 'もう一度保存を試してください', 'オフライン状態の場合、オンライン時に自動保存されます'],
    severity: 'error'
  },
  update_failed: {
    message: 'データの更新に失敗しました',
    description: '情報の変更でエラーが発生しました',
    solutions: ['ページを再読み込みして最新情報を取得してください', '変更内容を確認してください', 'もう一度更新を試してください'],
    severity: 'warning'
  },
  delete_failed: {
    message: 'データの削除に失敗しました',
    description: '情報の削除でエラーが発生しました',
    solutions: ['ページを再読み込みしてください', '削除権限があるか確認してください', 'もう一度削除を試してください'],
    severity: 'warning'
  }
}), ERROR_TYPES.VALIDATION, {
  "default": {
    message: '入力内容を確認してください',
    description: '入力値に問題があります',
    solutions: ['必須項目がすべて入力されているか確認してください', '入力形式が正しいか確認してください', '文字数制限を確認してください'],
    severity: 'warning'
  },
  required_field: {
    message: '必須項目が入力されていません',
    description: '必要な情報が不足しています',
    solutions: ['赤色で表示されている項目を入力してください', 'すべての必須項目（*マーク）を確認してください', '空白や特殊文字のみの入力は無効です'],
    severity: 'warning'
  },
  invalid_email: {
    message: 'メールアドレスの形式が正しくありません',
    description: '有効なメールアドレスを入力してください',
    solutions: ['「example@domain.com」の形式で入力してください', '@マークが含まれているか確認してください', 'スペースや特殊文字が含まれていないか確認してください'],
    severity: 'warning'
  },
  invalid_password: {
    message: 'パスワードの条件を満たしていません',
    description: 'パスワードの長さが不十分です',
    solutions: ['8文字以上で入力してください', '英数字や特殊文字を含めるとより安全です'],
    severity: 'warning'
  },
  invalid_format: {
    message: '入力形式が正しくありません',
    description: '指定された形式で入力してください',
    solutions: ['入力例を参考にしてください', '数値のみ、文字のみなど制限を確認してください', '日付形式や電話番号形式を確認してください'],
    severity: 'warning'
  }
}), ERROR_TYPES.STORAGE, {
  "default": {
    message: 'ストレージに問題があります',
    description: 'データの保存領域でエラーが発生しました',
    solutions: ['ブラウザのキャッシュをクリアしてください', '不要なデータを削除してください', 'デバイスの空き容量を確認してください'],
    severity: 'warning'
  },
  quota_exceeded: {
    message: 'ストレージ容量が不足しています',
    description: 'データ保存領域の上限に達しました',
    solutions: ['古いワークアウトデータを削除してください', 'ブラウザのキャッシュをクリアしてください', 'デバイスの空き容量を増やしてください'],
    severity: 'error'
  },
  file_too_large: {
    message: 'ファイルサイズが大きすぎます',
    description: 'アップロードファイルの容量制限を超えています',
    solutions: ['ファイルサイズを小さくしてください', '画像の場合は圧縮してください', '別の形式で保存してください'],
    severity: 'warning'
  },
  unsupported_format: {
    message: 'サポートされていないファイル形式です',
    description: 'このファイル形式は使用できません',
    solutions: ['JPG、PNG、PDF形式を使用してください', 'ファイル拡張子を確認してください', 'ファイルを変換してください'],
    severity: 'warning'
  }
}), ERROR_TYPES.PERMISSION, {
  "default": {
    message: 'この操作を実行する権限がありません',
    description: 'アクセス権限が不足しています',
    solutions: ['ログインしているか確認してください', '管理者に権限を確認してください', '別のアカウントでお試しください'],
    severity: 'error'
  },
  access_denied: {
    message: 'アクセスが拒否されました',
    description: 'このリソースへのアクセス権限がありません',
    solutions: ['ログイン状態を確認してください', '適切な権限を持つアカウントでログインしてください', 'サポートに権限の確認を依頼してください'],
    severity: 'error'
  },
  insufficient_privileges: {
    message: '権限が不足しています',
    description: 'この操作に必要な権限がありません',
    solutions: ['管理者権限が必要な操作です', 'アカウントの権限レベルを確認してください', '管理者に権限の付与を依頼してください'],
    severity: 'error'
  }
}), ERROR_TYPES.QUOTA, {
  "default": {
    message: '利用制限に達しました',
    description: 'API使用量やリクエスト数の上限に達しました',
    solutions: ['しばらく時間をおいて再試行してください', '利用プランのアップグレードを検討してください', 'サポートに制限の詳細を確認してください'],
    severity: 'warning'
  }
}), ERROR_TYPES.TIMEOUT, {
  "default": {
    message: '処理がタイムアウトしました',
    description: '操作に時間がかかりすぎています',
    solutions: ['しばらく時間をおいて再試行してください', 'より安定したネットワーク環境で試してください', '処理するデータ量を減らしてください'],
    severity: 'warning'
  }
}), _defineProperty(_ERROR_MESSAGES, ERROR_TYPES.UNKNOWN, {
  "default": {
    message: '予期しないエラーが発生しました',
    description: '原因不明のエラーです',
    solutions: ['ページを再読み込みしてください', 'アプリを再起動してください', '問題が続く場合はサポートにお問い合わせください'],
    severity: 'error'
  }
}));

/**
 * エラーの種類を判定
 * @param {Error|string} error - エラーオブジェクトまたはメッセージ
 * @returns {string} エラータイプ
 */
function determineErrorType(error) {
  var errorMessage = typeof error === 'string' ? error : (error === null || error === void 0 ? void 0 : error.message) || '';
  var errorCode = (error === null || error === void 0 ? void 0 : error.code) || '';

  // ネットワークエラー
  if (!navigator.onLine) {
    return ERROR_TYPES.NETWORK;
  }
  if (errorMessage.includes('fetch') || errorMessage.includes('network') || errorMessage.includes('NetworkError') || errorCode === 'NETWORK_ERROR') {
    return ERROR_TYPES.NETWORK;
  }

  // 接続エラー
  if (errorMessage.includes('connection') || errorMessage.includes('Connection') || errorMessage.includes('connect') || errorMessage.includes('ECONNREFUSED') || errorMessage.includes('ENOTFOUND') || errorMessage.includes('ETIMEDOUT') || errorCode === 'CONNECTION_ERROR' || errorCode === 'ECONNREFUSED') {
    return ERROR_TYPES.CONNECTION;
  }

  // 同期エラー
  if (errorMessage.includes('sync') || errorMessage.includes('synchronization') || errorMessage.includes('queue') || errorCode === 'SYNC_ERROR') {
    return ERROR_TYPES.SYNC;
  }

  // 認証エラー
  if (errorMessage.includes('Invalid login credentials') || errorMessage.includes('Email not confirmed') || errorMessage.includes('User not found') || errorMessage.includes('Invalid email') || errorMessage.includes('Signup is disabled') || errorMessage.includes('User already registered') || errorCode === 'invalid_credentials' || errorCode === 'email_not_confirmed' || errorCode === 'signup_disabled') {
    return ERROR_TYPES.AUTH;
  }

  // データベースエラー
  if (errorMessage.includes('duplicate key') || errorMessage.includes('foreign key') || errorMessage.includes('constraint') || errorMessage.includes('PostgreSQL') || errorMessage.includes('relationship') || errorMessage.includes('schema cache') || errorCode !== null && errorCode !== void 0 && errorCode.startsWith('23') || errorCode === 'PGRST200') {
    return ERROR_TYPES.DATABASE;
  }

  // ストレージエラー
  if (errorMessage.includes('QuotaExceededError') || errorMessage.includes('storage quota') || errorMessage.includes('file too large') || errorCode === 'QuotaExceededError') {
    return ERROR_TYPES.STORAGE;
  }

  // バリデーションエラー
  if (errorMessage.includes('validation') || errorMessage.includes('required') || errorMessage.includes('invalid format')) {
    return ERROR_TYPES.VALIDATION;
  }

  // タイムアウトエラー
  if (errorMessage.includes('timeout') || errorMessage.includes('TimeoutError') || errorCode === 'TIMEOUT') {
    return ERROR_TYPES.TIMEOUT;
  }
  return ERROR_TYPES.UNKNOWN;
}

/**
 * エラーメッセージを取得
 * @param {string} errorType - エラータイプ
 * @param {string} specificKey - 具体的なエラーキー
 * @returns {Object} エラーメッセージオブジェクト
 */
function getErrorMessage(errorType) {
  var specificKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
  var typeMessages = ERROR_MESSAGES[errorType];
  if (!typeMessages) {
    return ERROR_MESSAGES[ERROR_TYPES.UNKNOWN]["default"];
  }
  return typeMessages[specificKey] || typeMessages["default"];
}

/**
 * ユーザーフレンドリーなエラー通知を表示
 * @param {Object} errorInfo - エラー情報オブジェクト
 * @param {Object} options - 表示オプション
 */
function showUserFriendlyError(errorInfo) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$showSolution = options.showSolutions,
    showSolutions = _options$showSolution === void 0 ? true : _options$showSolution,
    _options$autoHide = options.autoHide,
    autoHide = _options$autoHide === void 0 ? true : _options$autoHide,
    _options$position = options.position,
    position = _options$position === void 0 ? 'top-right' : _options$position;
  var errorData = errorInfo.errorData || {};
  var message = errorData.message,
    description = errorData.description,
    _errorData$solutions = errorData.solutions,
    solutions = _errorData$solutions === void 0 ? [] : _errorData$solutions,
    _errorData$severity = errorData.severity,
    severity = _errorData$severity === void 0 ? 'error' : _errorData$severity;

  // エラー通知のHTML作成
  var errorId = "error-".concat(Date.now());
  var solutionsHtml = showSolutions && solutions.length > 0 ? "\n        <div class=\"error-solutions mt-3\">\n            <p class=\"text-sm font-medium mb-2\">\u89E3\u6C7A\u65B9\u6CD5:</p>\n            <ul class=\"text-sm space-y-1\">\n                ".concat(solutions.map(function (solution) {
    return "\n                    <li class=\"flex items-start\">\n                        <i class=\"fas fa-lightbulb text-yellow-400 mr-2 mt-0.5 flex-shrink-0\"></i>\n                        <span>".concat(solution, "</span>\n                    </li>\n                ");
  }).join(''), "\n            </ul>\n        </div>\n    ") : '';
  var errorHtml = "\n        <div id=\"".concat(errorId, "\" class=\"error-notification ").concat(severity, " ").concat(position, "\">\n            <div class=\"error-content\">\n                <div class=\"error-header\">\n                    <div class=\"error-icon\">\n                        ").concat(getErrorIcon(severity), "\n                    </div>\n                    <div class=\"error-text\">\n                        <h4 class=\"error-title\">").concat(message, "</h4>\n                        ").concat(description ? "<p class=\"error-description\">".concat(description, "</p>") : '', "\n                    </div>\n                    <button class=\"error-close\" onclick=\"this.closest('.error-notification').remove()\">\n                        <i class=\"fas fa-times\"></i>\n                    </button>\n                </div>\n                ").concat(solutionsHtml, "\n            </div>\n        </div>\n    ");

  // 既存のエラー通知を削除
  document.querySelectorAll('.error-notification').forEach(function (el) {
    return el.remove();
  });

  // 新しいエラー通知を追加
  document.body.insertAdjacentHTML('beforeend', errorHtml);

  // 自動非表示
  if (autoHide) {
    var hideDelay = severity === 'error' ? 10000 : 7000; // エラーは長めに表示
    setTimeout(function () {
      var errorElement = document.getElementById(errorId);
      if (errorElement) {
        errorElement.remove();
      }
    }, hideDelay);
  }

  // アクセシビリティ対応
  var errorElement = document.getElementById(errorId);
  if (errorElement) {
    errorElement.setAttribute('role', 'alert');
    errorElement.setAttribute('aria-live', 'assertive');
    errorElement.focus();
  }
}

/**
 * エラーアイコンを取得
 * @param {string} severity - エラーの重要度
 * @returns {string} アイコンHTML
 */
function getErrorIcon(severity) {
  var icons = {
    error: '<i class="fas fa-exclamation-circle text-red-500"></i>',
    warning: '<i class="fas fa-exclamation-triangle text-yellow-500"></i>',
    info: '<i class="fas fa-info-circle text-blue-500"></i>',
    success: '<i class="fas fa-check-circle text-green-500"></i>'
  };
  return icons[severity] || icons.error;
}

// closeErrorNotification関数は削除 - インライン処理に変更

/**
 * エラーの詳細情報を判定
 * @param {Error|string} error - エラーオブジェクト
 * @returns {string} 具体的なエラーキー
 */
function determineSpecificErrorKey(error) {
  var errorMessage = typeof error === 'string' ? error : (error === null || error === void 0 ? void 0 : error.message) || '';

  // 認証エラーの詳細判定
  if (errorMessage.includes('Invalid login credentials')) {
    return 'invalid_credentials';
  }
  if (errorMessage.includes('Email not confirmed')) {
    return 'email_not_confirmed';
  }
  if (errorMessage.includes('User not found')) {
    return 'user_not_found';
  }
  if (errorMessage.includes('Signup is disabled')) {
    return 'signup_disabled';
  }
  if (errorMessage.includes('User already registered')) {
    return 'email_already_registered';
  }

  // ネットワークエラーの詳細判定
  if (!navigator.onLine) {
    return 'offline';
  }
  if (errorMessage.includes('timeout')) {
    return 'timeout';
  }
  if (errorMessage.includes('500') || errorMessage.includes('502') || errorMessage.includes('503')) {
    return 'server_error';
  }

  // データベースエラーの詳細判定
  if (errorMessage.includes('relationship') || errorMessage.includes('schema cache') || (error === null || error === void 0 ? void 0 : error.code) === 'PGRST200') {
    return 'relationship_error';
  }

  // ストレージエラーの詳細判定
  if (errorMessage.includes('QuotaExceededError')) {
    return 'quota_exceeded';
  }
  if (errorMessage.includes('file too large')) {
    return 'file_too_large';
  }
  if (errorMessage.includes('unsupported')) {
    return 'unsupported_format';
  }
  return 'default';
}

/**
 * 統一されたエラーハンドラー（改善版）
 * @param {Error|string} error - エラーオブジェクトまたはメッセージ
 * @param {Object} options - オプション設定
 * @param {string} options.context - エラーが発生したコンテキスト
 * @param {boolean} options.showNotification - 通知を表示するか
 * @param {boolean} options.logToConsole - コンソールにログを出力するか
 * @param {Function} options.onRetry - リトライ関数
 * @param {number} options.maxRetries - 最大リトライ回数
 * @param {boolean} options.showSolutions - 解決方法を表示するか
 * @returns {Object} エラー情報オブジェクト
 */
function handleError(error) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$context = options.context,
    context = _options$context === void 0 ? 'Unknown' : _options$context,
    _options$showNotifica = options.showNotification,
    shouldShowNotification = _options$showNotifica === void 0 ? true : _options$showNotifica,
    _options$logToConsole = options.logToConsole,
    logToConsole = _options$logToConsole === void 0 ? true : _options$logToConsole,
    _options$onRetry = options.onRetry,
    onRetry = _options$onRetry === void 0 ? null : _options$onRetry,
    _options$maxRetries = options.maxRetries,
    maxRetries = _options$maxRetries === void 0 ? 0 : _options$maxRetries,
    _options$showSolution2 = options.showSolutions,
    showSolutions = _options$showSolution2 === void 0 ? true : _options$showSolution2;
  var errorType = determineErrorType(error);
  var specificKey = determineSpecificErrorKey(error);
  var errorData = getErrorMessage(errorType, specificKey);
  var errorInfo = {
    type: errorType,
    errorData: errorData,
    originalError: error,
    context: context,
    timestamp: new Date().toISOString(),
    canRetry: shouldAllowRetry(errorType),
    retryCount: 0,
    maxRetries: maxRetries,
    userAgent: navigator.userAgent,
    url: window.location.href
  };

  // コンソールログ（開発者向け詳細情報）
  if (logToConsole) {
    var logLevel = errorData.severity === 'error' ? 'error' : 'warn';
    console[logLevel]("[".concat(context, "] ").concat(errorType, ":"), {
      message: errorData.message,
      description: errorData.description,
      solutions: errorData.solutions,
      originalError: error,
      errorInfo: errorInfo
    });
  }

  // エラーログをローカルストレージに保存（デバッグ用）
  logErrorToStorage(errorInfo);

  // ユーザーフレンドリーな通知表示
  if (shouldShowNotification) {
    if (showSolutions) {
      showUserFriendlyError(errorInfo, {
        showSolutions: true,
        autoHide: errorData.severity !== 'error' // エラーは手動で閉じる
      });
    } else {
      // 従来の簡易通知
      var notificationType = getNotificationType(errorType);
      (0, _helpers.showNotification)(errorData.message, notificationType);
    }
  }

  // リトライ機能
  if (errorInfo.canRetry && onRetry && maxRetries > 0) {
    errorInfo.retry = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var result, finalError, _t;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.p = _context.n) {
          case 0:
            if (!(errorInfo.retryCount < maxRetries)) {
              _context.n = 5;
              break;
            }
            errorInfo.retryCount++;
            console.log("\uD83D\uDD04 \u30EA\u30C8\u30E9\u30A4\u4E2D... (".concat(errorInfo.retryCount, "/").concat(maxRetries, ")"));
            _context.p = 1;
            _context.n = 2;
            return onRetry();
          case 2:
            result = _context.v;
            console.log('✅ リトライ成功');
            (0, _helpers.showNotification)('操作が正常に完了しました', 'success');
            return _context.a(2, result);
          case 3:
            _context.p = 3;
            _t = _context.v;
            console.warn("\u274C \u30EA\u30C8\u30E9\u30A4\u5931\u6557 (".concat(errorInfo.retryCount, "/").concat(maxRetries, "):"), _t);
            if (!(errorInfo.retryCount >= maxRetries)) {
              _context.n = 4;
              break;
            }
            finalError = new Error("\u6700\u5927\u30EA\u30C8\u30E9\u30A4\u56DE\u6570(".concat(maxRetries, ")\u306B\u9054\u3057\u307E\u3057\u305F"));
            return _context.a(2, handleError(finalError, {
              context: "".concat(context, " (\u30EA\u30C8\u30E9\u30A4\u5931\u6557)"),
              showNotification: true,
              showSolutions: true
            }));
          case 4:
            throw _t;
          case 5:
            throw new Error('最大リトライ回数に達しました');
          case 6:
            return _context.a(2);
        }
      }, _callee, null, [[1, 3]]);
    }));
  }

  // カスタムイベントを発火（他のコンポーネントが監視可能）
  window.dispatchEvent(new CustomEvent('applicationError', {
    detail: errorInfo
  }));
  return errorInfo;
}

/**
 * リトライを許可するかどうかを判定
 * @param {string} errorType - エラータイプ
 * @returns {boolean} リトライ可能かどうか
 */
function shouldAllowRetry(errorType) {
  var retryableTypes = [ERROR_TYPES.NETWORK, ERROR_TYPES.CONNECTION, ERROR_TYPES.DATABASE, ERROR_TYPES.TIMEOUT, ERROR_TYPES.SYNC];
  return retryableTypes.includes(errorType);
}

/**
 * 通知タイプを取得
 * @param {string} errorType - エラータイプ
 * @returns {string} 通知タイプ
 */
function getNotificationType(errorType) {
  switch (errorType) {
    case ERROR_TYPES.NETWORK:
      return 'warning';
    case ERROR_TYPES.CONNECTION:
      return 'warning';
    case ERROR_TYPES.AUTH:
      return 'error';
    case ERROR_TYPES.DATABASE:
      return 'error';
    case ERROR_TYPES.VALIDATION:
      return 'warning';
    case ERROR_TYPES.STORAGE:
      return 'warning';
    case ERROR_TYPES.PERMISSION:
      return 'error';
    case ERROR_TYPES.SYNC:
      return 'info';
    default:
      return 'error';
  }
}

/**
 * オフライン状態を検知
 * @returns {boolean} オフライン状態かどうか
 */
function isOffline() {
  return !navigator.onLine;
}

/**
 * オンライン状態の変更を監視
 * @param {Function} onOnline - オンライン時のコールバック
 * @param {Function} onOffline - オフライン時のコールバック
 */
function watchOnlineStatus(onOnline, onOffline) {
  var handleOnline = function handleOnline() {
    console.log('🌐 オンライン状態になりました');
    (0, _helpers.showNotification)('インターネット接続が復旧しました', 'success');
    if (onOnline) {
      onOnline();
    }
  };
  var handleOffline = function handleOffline() {
    console.log('📴 オフライン状態になりました');
    (0, _helpers.showNotification)('インターネット接続が切断されました', 'warning');
    if (onOffline) {
      onOffline();
    }
  };
  window.addEventListener('online', handleOnline);
  window.addEventListener('offline', handleOffline);

  // 初期状態をチェック
  if (isOffline() && onOffline) {
    onOffline();
  }

  // クリーンアップ関数を返す
  return function () {
    window.removeEventListener('online', handleOnline);
    window.removeEventListener('offline', handleOffline);
  };
}

/**
 * リトライ機能付きの非同期関数実行
 * @param {Function} asyncFn - 実行する非同期関数
 * @param {Object} options - オプション設定
 * @returns {Promise} 実行結果
 */
function executeWithRetry(_x) {
  return _executeWithRetry.apply(this, arguments);
}
/**
 * エラー情報をローカルストレージに保存（デバッグ用）
 * @param {Object} errorInfo - エラー情報
 */
function _executeWithRetry() {
  _executeWithRetry = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(asyncFn) {
    var options,
      _options$maxRetries2,
      maxRetries,
      _options$retryDelay,
      retryDelay,
      _options$backoffMulti,
      backoffMultiplier,
      _options$context2,
      context,
      lastError,
      delay,
      attempt,
      errorType,
      _args2 = arguments,
      _t2;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.p = _context2.n) {
        case 0:
          options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
          _options$maxRetries2 = options.maxRetries, maxRetries = _options$maxRetries2 === void 0 ? 3 : _options$maxRetries2, _options$retryDelay = options.retryDelay, retryDelay = _options$retryDelay === void 0 ? 1000 : _options$retryDelay, _options$backoffMulti = options.backoffMultiplier, backoffMultiplier = _options$backoffMulti === void 0 ? 2 : _options$backoffMulti, _options$context2 = options.context, context = _options$context2 === void 0 ? 'Async operation' : _options$context2;
          delay = retryDelay;
          attempt = 0;
        case 1:
          if (!(attempt <= maxRetries)) {
            _context2.n = 9;
            break;
          }
          _context2.p = 2;
          _context2.n = 3;
          return asyncFn();
        case 3:
          return _context2.a(2, _context2.v);
        case 4:
          _context2.p = 4;
          _t2 = _context2.v;
          lastError = _t2;
          errorType = determineErrorType(_t2); // リトライ不可能なエラーの場合は即座に失敗
          if (shouldAllowRetry(errorType)) {
            _context2.n = 5;
            break;
          }
          throw handleError(_t2, {
            context: context
          }).originalError;
        case 5:
          if (!(attempt === maxRetries)) {
            _context2.n = 6;
            break;
          }
          return _context2.a(3, 9);
        case 6:
          console.log("Retry attempt ".concat(attempt + 1, "/").concat(maxRetries, " after ").concat(delay, "ms"));

          // 指数バックオフで待機
          _context2.n = 7;
          return new Promise(function (resolve) {
            return setTimeout(resolve, delay);
          });
        case 7:
          delay *= backoffMultiplier;
        case 8:
          attempt++;
          _context2.n = 1;
          break;
        case 9:
          throw handleError(lastError, {
            context: "".concat(context, " (").concat(maxRetries + 1, "\u56DE\u8A66\u884C\u5F8C)")
          }).originalError;
        case 10:
          return _context2.a(2);
      }
    }, _callee2, null, [[2, 4]]);
  }));
  return _executeWithRetry.apply(this, arguments);
}
function logErrorToStorage(errorInfo) {
  try {
    var errorLogs = JSON.parse(localStorage.getItem('errorLogs') || '[]');
    errorLogs.push(_objectSpread(_objectSpread({}, errorInfo), {}, {
      id: Date.now().toString(),
      userAgent: navigator.userAgent,
      url: window.location.href
    }));

    // 最新100件のみ保持
    if (errorLogs.length > 100) {
      errorLogs.splice(0, errorLogs.length - 100);
    }
    localStorage.setItem('errorLogs', JSON.stringify(errorLogs));
  } catch (e) {
    console.warn('Failed to log error to storage:', e);
  }
}

/**
 * 保存されたエラーログを取得
 * @returns {Array} エラーログ配列
 */
function getErrorLogs() {
  try {
    return JSON.parse(localStorage.getItem('errorLogs') || '[]');
  } catch (e) {
    console.warn('Failed to retrieve error logs:', e);
    return [];
  }
}

/**
 * エラーログをクリア
 */
function clearErrorLogs() {
  try {
    localStorage.removeItem('errorLogs');
    console.log('Error logs cleared');
  } catch (e) {
    console.warn('Failed to clear error logs:', e);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,