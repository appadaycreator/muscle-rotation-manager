19176c09a90ed0ee76351c9b4b2492bb
"use strict";

// モック設定
_getJestObj().mock('../../js/services/supabaseService.js', function () {
  return {
    supabaseService: {
      client: {
        from: jest.fn(function () {
          return {
            insert: jest.fn(function () {
              return Promise.resolve({
                data: [],
                error: null
              });
            }),
            select: jest.fn(function () {
              return {
                eq: jest.fn(function () {
                  return {
                    eq: jest.fn(function () {
                      return {
                        gte: jest.fn(function () {
                          return {
                            order: jest.fn(function () {
                              return Promise.resolve({
                                data: [],
                                error: null
                              });
                            })
                          };
                        })
                      };
                    })
                  };
                })
              };
            }),
            upsert: jest.fn(function () {
              return Promise.resolve({
                data: [],
                error: null
              });
            }),
            update: jest.fn(function () {
              return {
                eq: jest.fn(function () {
                  return Promise.resolve({
                    data: [],
                    error: null
                  });
                })
              };
            })
          };
        })
      }
    }
  };
});
_getJestObj().mock('../../js/utils/errorHandler.js', function () {
  return {
    handleError: jest.fn()
  };
});
var _progressTrackingService = require("../../js/services/progressTrackingService.js");
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
} // tests/unit/ProgressTrackingService.test.js - ProgressTrackingServiceのテスト
describe('ProgressTrackingService', function () {
  var service;
  beforeEach(function () {
    service = new _progressTrackingService.ProgressTrackingService();
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  describe('constructor', function () {
    it('should initialize with default values', function () {
      expect(service.supabase).toBeDefined();
    });
  });
  describe('calculateOneRM', function () {
    it('should calculate 1RM correctly for single rep', function () {
      var result = service.calculateOneRM(100, 1);
      expect(result).toBe(100);
    });
    it('should calculate 1RM using Brzycki formula', function () {
      var result = service.calculateOneRM(100, 10);
      expect(result).toBe(133.3); // 100 * (36 / (37 - 10)) = 100 * (36/27) = 133.3
    });
    it('should handle edge case of 36 reps', function () {
      var result = service.calculateOneRM(100, 36);
      expect(result).toBe(3600); // 100 * (36 / (37 - 36))
    });
    it('should return 0 for invalid inputs', function () {
      expect(service.calculateOneRM(0, 10)).toBe(0);
      expect(service.calculateOneRM(100, 0)).toBe(0);
      expect(service.calculateOneRM(100, 37)).toBe(0);
    });
    it('should return 0 on error', function () {
      var result = service.calculateOneRM(null, null);
      expect(result).toBe(0);
    });
  });
  describe('calculateBestOneRM', function () {
    it('should return highest 1RM from multiple sets', function () {
      var reps = [10, 8, 6];
      var weights = [100, 110, 120];
      var result = service.calculateBestOneRM(reps, weights);
      expect(result).toBeGreaterThan(0);
    });
    it('should handle empty arrays', function () {
      var result = service.calculateBestOneRM([], []);
      expect(result).toBe(0);
    });
    it('should handle mismatched array lengths', function () {
      var result = service.calculateBestOneRM([10, 8], [100]);
      expect(result).toBeGreaterThan(0); // 実際の実装では最初の要素のみ処理される
    });
  });
  describe('generateMonthlyAnalysis', function () {
    it('should generate monthly analysis successfully', function () {
      var data = [{
        date: '2024-01-01',
        one_rm: 100
      }, {
        date: '2024-01-15',
        one_rm: 110
      }];
      var result = service.generateMonthlyAnalysis(data);
      expect(result).toBeDefined();
    });
    it('should handle no data', function () {
      var result = service.generateMonthlyAnalysis([]);
      expect(result).toBeDefined();
    });
  });
  describe('groupByWeek', function () {
    it('should group data by week correctly', function () {
      var data = [];
      var result = service.groupByWeek(data);
      expect(result).toBeDefined();
    });
  });
  describe('analyzeTrend', function () {
    it('should analyze improving trend', function () {
      var data = [{
        one_rm: 100
      }, {
        one_rm: 110
      }, {
        one_rm: 120
      }];
      var result = service.analyzeTrend(data);
      expect(result).toBeDefined();
    });
    it('should analyze declining trend', function () {
      var data = [{
        one_rm: 120
      }, {
        one_rm: 110
      }, {
        one_rm: 100
      }];
      var result = service.analyzeTrend(data);
      expect(result).toBeDefined();
    });
    it('should handle insufficient data', function () {
      var result = service.analyzeTrend([]);
      expect(result).toBeDefined();
    });
  });
  describe('calculateStats', function () {
    it('should calculate statistics correctly', function () {
      var data = [{
        one_rm: 100,
        weight: 100,
        reps: 10
      }, {
        one_rm: 110,
        weight: 110,
        reps: 8
      }];
      var result = service.calculateStats(data);
      expect(result).toBeDefined();
    });
  });
  describe('sendGoalNotification', function () {
    it('should send browser notification when permission granted', function () {
      global.Notification = jest.fn();
      global.Notification.permission = 'granted';
      global.window = {
        dispatchEvent: jest.fn()
      };
      service.sendGoalNotification('Test Title', 'Test Message');
      expect(global.Notification).toHaveBeenCalledWith('Test Title', {
        body: 'Test Message',
        icon: '/favicon-32x32.png',
        tag: 'goal-progress'
      });
    });
    it('should send app notification when browser notification not available', function () {
      global.Notification = undefined;
      global.window = {
        dispatchEvent: jest.fn()
      };
      service.sendGoalNotification('Test Title', 'Test Message');

      // 通知が送信されたことを確認（実装に依存）
      expect(global.window.dispatchEvent).toBeDefined();
    });
  });
  describe('deactivateGoal', function () {
    it('should handle deactivate goal', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            // 基本的な機能テストのみ
            expect(service.deactivateGoal).toBeDefined();
          case 1:
            return _context.a(2);
        }
      }, _callee);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,