{"version":3,"names":["cov_yjr6rxpr3","actualCoverage","_typeof","o","Symbol","iterator","constructor","prototype","_regenerator","e","t","r","n","toStringTag","i","c","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","w","m","defineProperty","_regeneratorDefine","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toPropertyKey","_classCallCheck","_defineProperties","key","_createClass","_toPrimitive","toPrimitive","String","Number","supabaseService","MUSCLE_GROUPS","RECOVERY_SCIENCE","INTENSITY_MULTIPLIERS","FITNESS_LEVEL_MULTIPLIERS","RecommendationService","s","userSettings","loadUserSettings","defaultSettings","fitnessLevel","primaryGoal","workoutFrequency","experienceMonths","recoveryPreference","sleepHoursPerNight","stressLevel","preferredWorkoutTime","preferredWorkoutDuration","preferredIntensity","trainingFrequency","restDayPreference","userProfile","JSON","parse","b","localStorage","getItem","legacySettings","mappedSettings","fitness_level","primary_goal","workout_frequency","experience_months","recovery_preference","sleep_hours_per_night","stress_level","preferred_workout_time","preferred_workout_duration","error","console","warn","calculateRecoveryPercentage","lastWorkoutDate","muscleGroupId","lastIntensity","undefined","percentage","status","hoursUntilRecovery","isReady","muscleGroup","find","mg","id","Error","concat","baseRecoveryHours","recoveryHours","intensityMultiplier","fitnessMultiplier","recoveryMultiplier","getRecoveryMultiplier","lifestyleMultiplier","getLifestyleMultiplier","adjustedRecoveryHours","now","Date","timeDiff","hoursElapsed","recoveryPercentage","Math","min","round","max","factors","baseHours","_getMuscleRecoveryData","_callee","_this","workoutHistory","result","localHistory","recoveryData","_t","_context","isAvailable","getCurrentUser","getWorkouts","Array","isArray","map","muscle","lastWorkout","findLastWorkoutForMuscle","recoveryInfo","lastTrained","nextRecommended","date","intensity","formatLastTrainedDate","formatNextRecommendedTime","recovery","recoveryStatus","recoveryColor","getRecoveryColor","recoveryClass","getRecoveryClass","recoveryFactors","getMuscleRecoveryData","muscleId","sortedHistory","workout","muscleGroups","muscle_groups_trained","includes","sort","dateA","workout_date","startTime","dateB","_getRecommendations","_callee2","readyMuscles","prioritizedMuscles","recommendations","_t2","_context2","prioritizeMuscles","generateRecommendationMessages","getFallbackRecommendations","getRecommendations","_this2","priority","daysSinceLastWorkout","getDaysSinceLastWorkout","category","message","bgColor","dotColor","textColor","type","scientificBasis","topMuscle","name","iconColor","replace","secondaryMuscle","fitnessAdvice","getFitnessLevelAdvice","goalAdvice","getGoalBasedAdvice","frequencyAdvice","getFrequencyAdvice","level","adviceMap","beginner","intermediate","advanced","goal","recommendedIntensity","getRecommendedIntensity","strength","muscle_gain","endurance","weight_loss","general_fitness","currentFrequency","recommendedFrequency","getRecommendedFrequency","workoutDate","diffTime","diffDays","floor","days","hours","recoveryMultipliers","fast","standard","slow","multiplier","sleepHours","intensityMap","frequencyMap","updateUserSettings","newSettings","updatedProfile","setItem","stringify","getRecommendationDetails","recoveryScience","muscleName","reason","fitnessLevelAdjustment","userFitnessLevel"],"sources":["recommendationService.js"],"sourcesContent":["// recommendationService.js - 科学的根拠に基づく推奨アルゴリズム\n\nimport { supabaseService } from './supabaseService.js';\nimport {\n  MUSCLE_GROUPS,\n  RECOVERY_SCIENCE,\n  INTENSITY_MULTIPLIERS,\n  FITNESS_LEVEL_MULTIPLIERS,\n} from '../utils/constants.js';\n\n/**\n * 推奨アルゴリズムサービス\n * 科学的根拠に基づいた筋肉部位推奨システム\n */\nclass RecommendationService {\n  constructor() {\n    this.userSettings = this.loadUserSettings();\n  }\n\n  /**\n   * ユーザー設定を読み込み\n   * @returns {Object} ユーザー設定\n   */\n  loadUserSettings() {\n    const defaultSettings = {\n      // 基本設定\n      fitnessLevel: 'beginner',\n      primaryGoal: 'muscle_gain',\n      workoutFrequency: 3,\n\n      // 詳細設定\n      experienceMonths: 0,\n      recoveryPreference: 'standard',\n      sleepHoursPerNight: 7.0,\n      stressLevel: 5,\n      preferredWorkoutTime: '18:00',\n      preferredWorkoutDuration: 60,\n\n      // 旧設定（互換性のため）\n      preferredIntensity: 'moderate',\n      trainingFrequency: 3,\n      restDayPreference: 'sunday',\n    };\n\n    try {\n      // 新しい設定を優先的に読み込み\n      const userProfile = JSON.parse(\n        localStorage.getItem('userProfile') || '{}'\n      );\n      const legacySettings = JSON.parse(\n        localStorage.getItem('userFitnessSettings') || '{}'\n      );\n\n      // 新しい設定項目をマッピング\n      const mappedSettings = {\n        ...defaultSettings,\n        ...legacySettings,\n\n        // 新しい設定項目\n        fitnessLevel: userProfile.fitness_level || defaultSettings.fitnessLevel,\n        primaryGoal: userProfile.primary_goal || defaultSettings.primaryGoal,\n        workoutFrequency:\n          userProfile.workout_frequency || defaultSettings.workoutFrequency,\n        experienceMonths:\n          userProfile.experience_months || defaultSettings.experienceMonths,\n        recoveryPreference:\n          userProfile.recovery_preference || defaultSettings.recoveryPreference,\n        sleepHoursPerNight:\n          userProfile.sleep_hours_per_night ||\n          defaultSettings.sleepHoursPerNight,\n        stressLevel: userProfile.stress_level || defaultSettings.stressLevel,\n        preferredWorkoutTime:\n          userProfile.preferred_workout_time ||\n          defaultSettings.preferredWorkoutTime,\n        preferredWorkoutDuration:\n          userProfile.preferred_workout_duration ||\n          defaultSettings.preferredWorkoutDuration,\n      };\n\n      return mappedSettings;\n    } catch (error) {\n      console.warn('ユーザー設定の読み込みに失敗:', error);\n      return defaultSettings;\n    }\n  }\n\n  /**\n   * 筋肉回復度を計算\n   * @param {Date} lastWorkoutDate - 最後のワークアウト日\n   * @param {string} muscleGroupId - 筋肉部位ID\n   * @param {string} lastIntensity - 前回の強度\n   * @returns {Object} 回復度情報\n   */\n  calculateRecoveryPercentage(\n    lastWorkoutDate,\n    muscleGroupId,\n    lastIntensity = 'moderate'\n  ) {\n    if (!lastWorkoutDate) {\n      return {\n        percentage: 100,\n        status: 'fully_recovered',\n        hoursUntilRecovery: 0,\n        isReady: true,\n      };\n    }\n\n    const muscleGroup = MUSCLE_GROUPS.find((mg) => mg.id === muscleGroupId);\n    if (!muscleGroup) {\n      throw new Error(`筋肉部位が見つかりません: ${muscleGroupId}`);\n    }\n\n    // 基本回復時間を取得\n    const baseRecoveryHours = muscleGroup.recoveryHours;\n\n    // 強度による調整\n    const intensityMultiplier = INTENSITY_MULTIPLIERS[lastIntensity] || 1.0;\n\n    // 体力レベルによる調整\n    const fitnessMultiplier =\n      FITNESS_LEVEL_MULTIPLIERS[this.userSettings.fitnessLevel] || 1.0;\n\n    // 回復設定による調整\n    const recoveryMultiplier = this.getRecoveryMultiplier();\n\n    // ライフスタイル要因による調整\n    const lifestyleMultiplier = this.getLifestyleMultiplier();\n\n    // 調整後の回復時間\n    const adjustedRecoveryHours =\n      baseRecoveryHours *\n      intensityMultiplier *\n      fitnessMultiplier *\n      recoveryMultiplier *\n      lifestyleMultiplier;\n\n    // 経過時間を計算\n    const now = new Date();\n    const timeDiff = now - new Date(lastWorkoutDate);\n    const hoursElapsed = timeDiff / (1000 * 60 * 60);\n\n    // 回復度を計算\n    const recoveryPercentage = Math.min(\n      100,\n      Math.round((hoursElapsed / adjustedRecoveryHours) * 100)\n    );\n    const hoursUntilRecovery = Math.max(\n      0,\n      adjustedRecoveryHours - hoursElapsed\n    );\n\n    let status;\n    if (recoveryPercentage >= 100) {\n      status = 'fully_recovered';\n    } else if (recoveryPercentage >= 80) {\n      status = 'mostly_recovered';\n    } else if (recoveryPercentage >= 50) {\n      status = 'partially_recovered';\n    } else {\n      status = 'still_recovering';\n    }\n\n    return {\n      percentage: recoveryPercentage,\n      status,\n      hoursUntilRecovery: Math.round(hoursUntilRecovery * 10) / 10,\n      isReady: recoveryPercentage >= 80, // 80%以上で推奨対象\n      adjustedRecoveryHours: Math.round(adjustedRecoveryHours * 10) / 10,\n      factors: {\n        baseHours: baseRecoveryHours,\n        intensityMultiplier,\n        fitnessMultiplier,\n        lastIntensity,\n      },\n    };\n  }\n\n  /**\n   * 筋肉回復データを取得\n   * @returns {Promise<Array>} 筋肉回復データ配列\n   */\n  async getMuscleRecoveryData() {\n    try {\n      // Supabaseからワークアウト履歴を取得\n      let workoutHistory = [];\n      if (supabaseService.isAvailable() && supabaseService.getCurrentUser()) {\n        const result = await supabaseService.getWorkouts(30); // 過去30件\n        // データが配列でない場合は空配列にフォールバック\n        workoutHistory = Array.isArray(result) ? result : [];\n      } else {\n        // オフライン時はローカルストレージから取得\n        const localHistory = localStorage.getItem('workoutHistory');\n        workoutHistory = localHistory ? JSON.parse(localHistory) : [];\n      }\n\n      // ワークアウト履歴が配列でない場合は空配列にフォールバック\n      if (!Array.isArray(workoutHistory)) {\n        console.warn('workoutHistory is not an array, using empty array');\n        workoutHistory = [];\n      }\n\n      // 各筋肉部位の回復データを計算\n      const recoveryData = MUSCLE_GROUPS.map((muscle) => {\n        // 該当部位の最新ワークアウトを検索\n        const lastWorkout = this.findLastWorkoutForMuscle(\n          workoutHistory,\n          muscle.id\n        );\n\n        let recoveryInfo = {\n          percentage: 100,\n          status: 'fully_recovered',\n          hoursUntilRecovery: 0,\n          isReady: true,\n        };\n\n        let lastTrained = 'なし';\n        let nextRecommended = '今すぐ';\n\n        if (lastWorkout) {\n          recoveryInfo = this.calculateRecoveryPercentage(\n            lastWorkout.date,\n            muscle.id,\n            lastWorkout.intensity || 'moderate'\n          );\n\n          lastTrained = this.formatLastTrainedDate(lastWorkout.date);\n          nextRecommended = this.formatNextRecommendedTime(\n            recoveryInfo.hoursUntilRecovery\n          );\n        }\n\n        return {\n          ...muscle,\n          lastTrained,\n          recovery: recoveryInfo.percentage,\n          recoveryStatus: recoveryInfo.status,\n          hoursUntilRecovery: recoveryInfo.hoursUntilRecovery,\n          nextRecommended,\n          isReady: recoveryInfo.isReady,\n          recoveryColor: this.getRecoveryColor(recoveryInfo.percentage),\n          recoveryClass: this.getRecoveryClass(recoveryInfo.percentage),\n          lastWorkout,\n          recoveryFactors: recoveryInfo.factors,\n        };\n      });\n\n      return recoveryData;\n    } catch (error) {\n      console.error('筋肉回復データの取得に失敗:', error);\n      // フォールバック: 基本的な回復データを返す\n      return MUSCLE_GROUPS.map((muscle) => ({\n        ...muscle,\n        lastTrained: 'なし',\n        recovery: 100,\n        recoveryStatus: 'fully_recovered',\n        hoursUntilRecovery: 0,\n        nextRecommended: '今すぐ',\n        isReady: true,\n        recoveryColor: this.getRecoveryColor(100),\n        recoveryClass: this.getRecoveryClass(100),\n        lastWorkout: null,\n        recoveryFactors: null,\n      }));\n    }\n  }\n\n  /**\n   * 特定筋肉部位の最新ワークアウトを検索\n   * @param {Array} workoutHistory - ワークアウト履歴\n   * @param {string} muscleId - 筋肉部位ID\n   * @returns {Object|null} 最新ワークアウト\n   */\n  findLastWorkoutForMuscle(workoutHistory, muscleId) {\n    // ワークアウト履歴が配列でない場合はnullを返す\n    if (!Array.isArray(workoutHistory)) {\n      return null;\n    }\n\n    // ワークアウト履歴を日付順にソート（新しい順）\n    const sortedHistory = workoutHistory\n      .filter((workout) => {\n        // 筋肉部位のチェック（複数のフィールドに対応）\n        const muscleGroups =\n          workout.muscle_groups_trained || workout.muscleGroups || [];\n        return Array.isArray(muscleGroups) && muscleGroups.includes(muscleId);\n      })\n      .sort((a, b) => {\n        const dateA = new Date(a.date || a.workout_date || a.startTime);\n        const dateB = new Date(b.date || b.workout_date || b.startTime);\n        return dateB - dateA;\n      });\n\n    return sortedHistory.length > 0\n      ? {\n          ...sortedHistory[0],\n          date:\n            sortedHistory[0].date ||\n            sortedHistory[0].workout_date ||\n            sortedHistory[0].startTime,\n        }\n      : null;\n  }\n\n  /**\n   * 推奨部位を取得\n   * @returns {Promise<Array>} 推奨事項配列\n   */\n  async getRecommendations() {\n    try {\n      const recoveryData = await this.getMuscleRecoveryData();\n\n      // 推奨対象の部位を抽出（回復度80%以上）\n      const readyMuscles = recoveryData.filter((muscle) => muscle.isReady);\n\n      // 優先度でソート\n      const prioritizedMuscles = this.prioritizeMuscles(\n        readyMuscles,\n        recoveryData\n      );\n\n      // 推奨メッセージを生成\n      const recommendations = this.generateRecommendationMessages(\n        prioritizedMuscles,\n        recoveryData\n      );\n\n      return recommendations;\n    } catch (error) {\n      console.error('推奨事項の取得に失敗:', error);\n      return this.getFallbackRecommendations();\n    }\n  }\n\n  /**\n   * 筋肉部位の優先度付け\n   * @param {Array} readyMuscles - 回復済み筋肉部位\n   * @param {Array} allMuscles - 全筋肉部位データ\n   * @returns {Array} 優先度付きリスト\n   */\n  prioritizeMuscles(readyMuscles) {\n    return readyMuscles\n      .map((muscle) => {\n        let priority = 0;\n\n        // 回復度による優先度（100%回復は高優先度）\n        priority += muscle.recovery;\n\n        // 最後のトレーニングからの経過時間による優先度\n        if (muscle.lastWorkout) {\n          const daysSinceLastWorkout = this.getDaysSinceLastWorkout(\n            muscle.lastWorkout.date\n          );\n          priority += Math.min(daysSinceLastWorkout * 10, 50); // 最大50ポイント\n        } else {\n          priority += 100; // 未トレーニング部位は最高優先度\n        }\n\n        // 大筋群は優先度を上げる\n        if (muscle.category === 'large') {\n          priority += 20;\n        }\n\n        return {\n          ...muscle,\n          priority: Math.round(priority),\n        };\n      })\n      .sort((a, b) => b.priority - a.priority);\n  }\n\n  /**\n   * 推奨メッセージを生成\n   * @param {Array} prioritizedMuscles - 優先度付き筋肉部位\n   * @param {Array} allMuscles - 全筋肉部位データ\n   * @returns {Array} 推奨メッセージ配列\n   */\n  generateRecommendationMessages(prioritizedMuscles) {\n    const recommendations = [];\n\n    if (prioritizedMuscles.length === 0) {\n      recommendations.push({\n        message: '全ての部位が回復中です。休息日をお勧めします',\n        bgColor: 'bg-gray-50',\n        dotColor: 'bg-gray-500',\n        textColor: 'text-gray-700',\n        type: 'rest',\n        scientificBasis: '筋肉の成長には適切な休息が必要です',\n      });\n      return recommendations;\n    }\n\n    // トップ推奨部位\n    const topMuscle = prioritizedMuscles[0];\n    recommendations.push({\n      message: `今日は${topMuscle.name}のトレーニングが最適です`,\n      bgColor: topMuscle.bgColor,\n      dotColor: topMuscle.iconColor.replace('text-', 'bg-'),\n      textColor: topMuscle.textColor,\n      type: 'primary',\n      muscleId: topMuscle.id,\n      scientificBasis: topMuscle.scientificBasis,\n      priority: topMuscle.priority,\n      recoveryPercentage: topMuscle.recovery,\n    });\n\n    // 回復度情報\n    if (topMuscle.recovery === 100) {\n      recommendations.push({\n        message: `${topMuscle.name}は完全回復済み（${topMuscle.recovery}%）`,\n        bgColor: 'bg-green-50',\n        dotColor: 'bg-green-500',\n        textColor: 'text-green-700',\n        type: 'recovery_status',\n        scientificBasis: '完全回復により最大のトレーニング効果が期待できます',\n      });\n    } else if (topMuscle.recovery >= 80) {\n      recommendations.push({\n        message: `${topMuscle.name}は十分回復済み（${topMuscle.recovery}%）`,\n        bgColor: 'bg-blue-50',\n        dotColor: 'bg-blue-500',\n        textColor: 'text-blue-700',\n        type: 'recovery_status',\n        scientificBasis: '80%以上の回復で効果的なトレーニングが可能です',\n      });\n    }\n\n    // セカンダリ推奨（複数部位トレーニングの提案）\n    if (prioritizedMuscles.length > 1) {\n      const secondaryMuscle = prioritizedMuscles[1];\n      recommendations.push({\n        message: `${secondaryMuscle.name}も併せてトレーニング可能です`,\n        bgColor: 'bg-purple-50',\n        dotColor: 'bg-purple-500',\n        textColor: 'text-purple-700',\n        type: 'secondary',\n        muscleId: secondaryMuscle.id,\n        scientificBasis: '複数部位の同時トレーニングで効率性向上',\n      });\n    }\n\n    // 体力レベルに応じたアドバイス\n    const fitnessAdvice = this.getFitnessLevelAdvice();\n    if (fitnessAdvice) {\n      recommendations.push(fitnessAdvice);\n    }\n\n    // 目標に基づくアドバイス\n    const goalAdvice = this.getGoalBasedAdvice();\n    if (goalAdvice) {\n      recommendations.push(goalAdvice);\n    }\n\n    // 頻度に基づくアドバイス\n    const frequencyAdvice = this.getFrequencyAdvice();\n    if (frequencyAdvice) {\n      recommendations.push(frequencyAdvice);\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * 体力レベルに応じたアドバイスを取得\n   * @returns {Object|null} アドバイス\n   */\n  getFitnessLevelAdvice() {\n    const level = this.userSettings.fitnessLevel;\n\n    const adviceMap = {\n      beginner: {\n        message: '初心者の方は週2-3回のトレーニングから始めましょう',\n        bgColor: 'bg-yellow-50',\n        dotColor: 'bg-yellow-500',\n        textColor: 'text-yellow-700',\n        type: 'fitness_advice',\n        scientificBasis: '初心者は神経系の適応と基礎体力向上が優先されます',\n      },\n      intermediate: {\n        message: '中級者は週3-4回のバランス良いトレーニングが効果的です',\n        bgColor: 'bg-indigo-50',\n        dotColor: 'bg-indigo-500',\n        textColor: 'text-indigo-700',\n        type: 'fitness_advice',\n        scientificBasis: '中級者は筋肥大と筋力向上のバランスが重要です',\n      },\n      advanced: {\n        message:\n          '上級者は高強度トレーニングと適切な回復のバランスを重視しましょう',\n        bgColor: 'bg-red-50',\n        dotColor: 'bg-red-500',\n        textColor: 'text-red-700',\n        type: 'fitness_advice',\n        scientificBasis: '上級者は高強度刺激と十分な回復時間が成長の鍵です',\n      },\n    };\n\n    return adviceMap[level] || null;\n  }\n\n  /**\n   * 目標に基づくアドバイスを取得\n   * @returns {Object|null} アドバイス\n   */\n  getGoalBasedAdvice() {\n    const goal = this.userSettings.primaryGoal;\n    const recommendedIntensity = this.getRecommendedIntensity();\n\n    const adviceMap = {\n      strength: {\n        message: `筋力向上が目標です。${recommendedIntensity === 'high' ? '高強度' : '中強度'}トレーニングを心がけましょう`,\n        bgColor: 'bg-red-50',\n        dotColor: 'bg-red-500',\n        textColor: 'text-red-700',\n        type: 'goal_advice',\n        scientificBasis: '筋力向上には高負荷・低回数のトレーニングが効果的です',\n      },\n      muscle_gain: {\n        message: '筋肥大が目標です。中強度で適切なボリュームを確保しましょう',\n        bgColor: 'bg-blue-50',\n        dotColor: 'bg-blue-500',\n        textColor: 'text-blue-700',\n        type: 'goal_advice',\n        scientificBasis: '筋肥大には中負荷・中回数でのボリューム確保が重要です',\n      },\n      endurance: {\n        message: '持久力向上が目標です。低強度・高回数を意識しましょう',\n        bgColor: 'bg-green-50',\n        dotColor: 'bg-green-500',\n        textColor: 'text-green-700',\n        type: 'goal_advice',\n        scientificBasis:\n          '筋持久力向上には低負荷・高回数のトレーニングが適しています',\n      },\n      weight_loss: {\n        message:\n          '減量が目標です。中強度で代謝を高めるトレーニングを行いましょう',\n        bgColor: 'bg-orange-50',\n        dotColor: 'bg-orange-500',\n        textColor: 'text-orange-700',\n        type: 'goal_advice',\n        scientificBasis: '減量には筋トレと有酸素運動の組み合わせが効果的です',\n      },\n      general_fitness: {\n        message: '健康維持が目標です。無理のない範囲で継続しましょう',\n        bgColor: 'bg-teal-50',\n        dotColor: 'bg-teal-500',\n        textColor: 'text-teal-700',\n        type: 'goal_advice',\n        scientificBasis: '健康維持には継続性が最も重要な要素です',\n      },\n    };\n\n    return adviceMap[goal] || null;\n  }\n\n  /**\n   * 頻度に基づくアドバイスを取得\n   * @returns {Object|null} アドバイス\n   */\n  getFrequencyAdvice() {\n    const currentFrequency = this.userSettings.workoutFrequency;\n    const recommendedFrequency = this.getRecommendedFrequency();\n\n    if (currentFrequency < recommendedFrequency) {\n      return {\n        message: `現在の頻度（週${currentFrequency}回）より、週${recommendedFrequency}回がおすすめです`,\n        bgColor: 'bg-amber-50',\n        dotColor: 'bg-amber-500',\n        textColor: 'text-amber-700',\n        type: 'frequency_advice',\n        scientificBasis: '適切な頻度でのトレーニングが効果を最大化します',\n      };\n    } else if (currentFrequency > recommendedFrequency + 1) {\n      return {\n        message: `現在の頻度（週${currentFrequency}回）は高めです。回復に注意しましょう`,\n        bgColor: 'bg-rose-50',\n        dotColor: 'bg-rose-500',\n        textColor: 'text-rose-700',\n        type: 'frequency_advice',\n        scientificBasis: '過度な頻度はオーバートレーニングのリスクがあります',\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * フォールバック推奨事項\n   * @returns {Array} デフォルト推奨事項\n   */\n  getFallbackRecommendations() {\n    return [\n      {\n        message: '今日は胸筋のトレーニングがおすすめです',\n        bgColor: 'bg-blue-50',\n        dotColor: 'bg-blue-500',\n        textColor: 'text-blue-700',\n        type: 'fallback',\n        scientificBasis: '大筋群から始めることで全身の成長を促進できます',\n      },\n    ];\n  }\n\n  /**\n   * 最後のトレーニング日をフォーマット\n   * @param {string|Date} date - 日付\n   * @returns {string} フォーマット済み文字列\n   */\n  formatLastTrainedDate(date) {\n    if (!date) {\n      return 'なし';\n    }\n\n    const workoutDate = new Date(date);\n    const now = new Date();\n    const diffTime = now - workoutDate;\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n\n    if (diffDays === 0) {\n      return '今日';\n    }\n    if (diffDays === 1) {\n      return '昨日';\n    }\n    if (diffDays < 7) {\n      return `${diffDays}日前`;\n    }\n    if (diffDays < 30) {\n      return `${Math.floor(diffDays / 7)}週間前`;\n    }\n    return `${Math.floor(diffDays / 30)}ヶ月前`;\n  }\n\n  /**\n   * 次回推奨時間をフォーマット\n   * @param {number} hoursUntilRecovery - 回復までの時間\n   * @returns {string} フォーマット済み文字列\n   */\n  formatNextRecommendedTime(hoursUntilRecovery) {\n    if (hoursUntilRecovery <= 0) {\n      return '今すぐ';\n    }\n    if (hoursUntilRecovery < 24) {\n      return `${Math.round(hoursUntilRecovery)}時間後`;\n    }\n\n    const days = Math.floor(hoursUntilRecovery / 24);\n    const hours = Math.round(hoursUntilRecovery % 24);\n\n    if (hours === 0) {\n      return `${days}日後`;\n    }\n    return `${days}日${hours}時間後`;\n  }\n\n  /**\n   * 最後のワークアウトからの経過日数を取得\n   * @param {string|Date} date - 日付\n   * @returns {number} 経過日数\n   */\n  getDaysSinceLastWorkout(date) {\n    if (!date) {\n      return 999;\n    }\n\n    const workoutDate = new Date(date);\n    const now = new Date();\n    const diffTime = now - workoutDate;\n    return Math.floor(diffTime / (1000 * 60 * 60 * 24));\n  }\n\n  /**\n   * 回復度に応じた色を取得\n   * @param {number} percentage - 回復度\n   * @returns {string} CSSクラス\n   */\n  getRecoveryColor(percentage) {\n    if (percentage >= 100) {\n      return 'text-green-600';\n    }\n    if (percentage >= 80) {\n      return 'text-blue-600';\n    }\n    if (percentage >= 50) {\n      return 'text-yellow-600';\n    }\n    return 'text-red-600';\n  }\n\n  /**\n   * 回復度に応じたバークラスを取得\n   * @param {number} percentage - 回復度\n   * @returns {string} CSSクラス\n   */\n  getRecoveryClass(percentage) {\n    if (percentage >= 100) {\n      return 'bg-green-500';\n    }\n    if (percentage >= 80) {\n      return 'bg-blue-500';\n    }\n    if (percentage >= 50) {\n      return 'bg-yellow-500';\n    }\n    return 'bg-red-500';\n  }\n\n  /**\n   * 回復設定による倍率を取得\n   * @returns {number} 回復倍率\n   */\n  getRecoveryMultiplier() {\n    const recoveryMultipliers = {\n      fast: 0.8, // 20%短縮\n      standard: 1.0, // 標準\n      slow: 1.3, // 30%延長\n    };\n\n    return recoveryMultipliers[this.userSettings.recoveryPreference] || 1.0;\n  }\n\n  /**\n   * ライフスタイル要因による倍率を取得\n   * @returns {number} ライフスタイル倍率\n   */\n  getLifestyleMultiplier() {\n    let multiplier = 1.0;\n\n    // 睡眠時間による調整\n    const sleepHours = this.userSettings.sleepHoursPerNight;\n    if (sleepHours < 6) {\n      multiplier *= 1.2; // 睡眠不足は回復を遅らせる\n    } else if (sleepHours >= 8) {\n      multiplier *= 0.9; // 十分な睡眠は回復を促進\n    }\n\n    // ストレスレベルによる調整\n    const stressLevel = this.userSettings.stressLevel;\n    if (stressLevel >= 8) {\n      multiplier *= 1.15; // 高ストレスは回復を遅らせる\n    } else if (stressLevel <= 3) {\n      multiplier *= 0.95; // 低ストレスは回復を促進\n    }\n\n    return multiplier;\n  }\n\n  /**\n   * 目標に基づく推奨強度を取得\n   * @returns {string} 推奨強度\n   */\n  getRecommendedIntensity() {\n    const intensityMap = {\n      strength: 'high', // 筋力向上は高強度\n      muscle_gain: 'moderate', // 筋肥大は中強度\n      endurance: 'low', // 持久力は低強度\n      weight_loss: 'moderate', // 減量は中強度\n      general_fitness: 'low', // 健康維持は低強度\n    };\n\n    return intensityMap[this.userSettings.primaryGoal] || 'moderate';\n  }\n\n  /**\n   * 体力レベルに基づく推奨頻度を取得\n   * @returns {number} 推奨週間頻度\n   */\n  getRecommendedFrequency() {\n    const frequencyMap = {\n      beginner: 2, // 初心者は週2回\n      intermediate: 3, // 中級者は週3回\n      advanced: 4, // 上級者は週4回\n    };\n\n    return frequencyMap[this.userSettings.fitnessLevel] || 3;\n  }\n\n  /**\n   * ユーザー設定を更新\n   * @param {Object} newSettings - 新しい設定\n   */\n  updateUserSettings(newSettings) {\n    this.userSettings = { ...this.userSettings, ...newSettings };\n\n    // 新しい設定形式で保存\n    const userProfile = JSON.parse(localStorage.getItem('userProfile') || '{}');\n    const updatedProfile = {\n      ...userProfile,\n      fitness_level: newSettings.fitnessLevel || this.userSettings.fitnessLevel,\n      primary_goal: newSettings.primaryGoal || this.userSettings.primaryGoal,\n      workout_frequency:\n        newSettings.workoutFrequency || this.userSettings.workoutFrequency,\n      recovery_preference:\n        newSettings.recoveryPreference || this.userSettings.recoveryPreference,\n      sleep_hours_per_night:\n        newSettings.sleepHoursPerNight || this.userSettings.sleepHoursPerNight,\n      stress_level: newSettings.stressLevel || this.userSettings.stressLevel,\n    };\n\n    localStorage.setItem('userProfile', JSON.stringify(updatedProfile));\n\n    // 互換性のため旧形式も保存\n    localStorage.setItem(\n      'userFitnessSettings',\n      JSON.stringify(this.userSettings)\n    );\n  }\n\n  /**\n   * 推奨理由の詳細を取得\n   * @param {string} muscleId - 筋肉部位ID\n   * @returns {Object} 詳細情報\n   */\n  getRecommendationDetails(muscleId) {\n    const muscle = MUSCLE_GROUPS.find((mg) => mg.id === muscleId);\n    if (!muscle) {\n      return null;\n    }\n\n    const recoveryScience = RECOVERY_SCIENCE[muscle.category];\n\n    return {\n      muscleName: muscle.name,\n      category: muscle.category,\n      recoveryHours: muscle.recoveryHours,\n      scientificBasis: muscle.scientificBasis,\n      recoveryScience: recoveryScience.reason,\n      fitnessLevelAdjustment:\n        FITNESS_LEVEL_MULTIPLIERS[this.userSettings.fitnessLevel],\n      userFitnessLevel: this.userSettings.fitnessLevel,\n    };\n  }\n}\n\n// シングルトンインスタンスをエクスポート\nexport default new RecommendationService();\n"],"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","ignoreList":[]}